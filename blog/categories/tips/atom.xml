<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | Martin]]></title>
  <link href="http://Martin91.github.io/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://Martin91.github.io/"/>
  <updated>2016-11-26T22:40:52+08:00</updated>
  <id>http://Martin91.github.io/</id>
  <author>
    <name><![CDATA[Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sublime text 2基于语法的配置文件]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/08/03/sublime-text-2ji-yu-yu-fa-de-pei-zhi-wen-jian/"/>
    <updated>2014-08-03T23:13:09+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/08/03/sublime-text-2ji-yu-yu-fa-de-pei-zhi-wen-jian</id>
    <content type="html"><![CDATA[<p>最近在学习Python编程语言，但是遇到一个小小的问题，就是原来Ruby的编码规范是用2个空格缩进的，所以以前在Sublime的全局用户配置中设置了<code>"tab_size": 2</code>，所以在编辑Python文件的时候就每次都要从菜单中设置<code>tab_size</code>的大小为4。后来经过搜索，发现Sublime Text 2实际上是支持语法特定的配置的，具体的步骤是：</p>

<!-- More -->


<ol>
<li>先打开一个Python代码文件，或者是设置当前文件的语法为"Python"；</li>
<li>点击菜单栏中的“Sublime Text 2 &ndash;> Preferences &ndash;> Settings &ndash; More &ndash;> Syntax Specific &ndash; User”；</li>
<li>可以看到打开了一个名字为"Python.sublime-setting"的文件，如果打开的文件的名字不是Python，请回头检查第一步。</li>
<li><p>在打开的特定语言的配置文件中，直接设置:</p>

<p> <code>
 { "tab_size": 4, "translate_tabs_to_spaces": true }
</code></p>

<p> 以上的设置会默认覆盖全局配置。</p></li>
</ol>


<p>以上步骤参考自<a href="http://lukecafe.com/2013/03/daily-tips-sublime-text2-setting-and-ipa-generation/">今日技巧：Sublime Text 2语法缩进配置和ipa文件生成</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[注意Rake Task中invoke方法跟execute方法的不同]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/21/zhu-yi-rake-taskzhong-invokegen-executefang-fa-de-bu-tong/"/>
    <updated>2014-03-21T01:18:46+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/21/zhu-yi-rake-taskzhong-invokegen-executefang-fa-de-bu-tong</id>
    <content type="html"><![CDATA[<p>平时如果跟Rake Task有过接触的同学都会知道，当我们需要在一个Task里边调用另一个Task的时候，我们可以使用<code>Rake::Task['task_name'].invoke</code>的方式。但是在今天的实践中，才知道<code>Rake::Task#invoke</code>在默认情况下在整个运行过程中将只会被调用一次而已。话不多说，动手演示：</p>

<!-- More -->


<p>准备一个<strong>say hello</strong>的task，代码：
``` ruby</p>

<h1>lib/tasks/demo.rake</h1>

<p>namespace :demo do
  desc &ldquo;Print &lsquo;Hello&rsquo; string&rdquo;
  task :say_hello do</p>

<pre><code>puts "Hello, World!"
</code></pre>

<p>  end
end
<code>
接下来在命令行中执行rake task:
</code> sh
$ rake demo:say_hello
=> Hello, World!
<code>
假设我们一个循环，需要调用上边的task共5次，那么我们可能会这么写：
</code> ruby
namespace :demo do
  # &hellip;.</p>

<p>  desc &ldquo;Print &lsquo;Hello, World!&rsquo; five times&rdquo;
  task :say_five_hello do</p>

<pre><code>5.times do
  Rake::Task['demo:say_hello'].invoke
end
</code></pre>

<p>  end
end
<code>
Ok, 让我们尝试着运行这个`say_five_hello`的task，是不是真的会打印5次'Hello, World!'呢?
</code> sh
$ rake demo:say_five_hello
=> Hello, World!
<code>``
结果就是，'Hello, World!'只打印了一次，也就是说，我们的</code>Rake::Task[&lsquo;demo:say_hello&rsquo;]`只被运行了一次。</p>

<p>经过搜索，从StackOverflow找到了这个问题的相关描述，详见：<a href="http://stackoverflow.com/a/12948485">How do I execute Rake tasks with arguments multiple times?</a></p>

<p>按照答案中的描述，我们有两种修改方案。第一种就是将上述代码进行修改：
``` ruby
namespace :demo do
  # &hellip;</p>

<p>  desc &ldquo;Print &lsquo;Hello, World!&rsquo; five times&rdquo;
  task :say_five_hello do</p>

<pre><code>5.times do
  Rake::Task['demo:say_hello'].execute
end
</code></pre>

<p>  end
end
<code>
再次运行，这次总算得到期待结果了：
</code> sh
$ rake demo:say_five_hello
=> Hello, World!
   Hello, World!
   Hello, World!
   Hello, World!
   Hello, World!
```</p>

<p>而第二种方法则会稍微麻烦一点：
``` ruby
namespace :demo do
  # &hellip;</p>

<p>  desc &ldquo;Print &lsquo;Hello, World!&rsquo; five times&rdquo;
  task :say_five_hello do</p>

<pre><code>5.times do
  Rake::Task['demo:say_hello'].reenable
  Rake::Task['demo:say_hello'].invoke
end
</code></pre>

<p>  end
end
<code>
再次执行rake task, 同样能够得到预期结果：
</code> sh
$ rake demo:say_five_hello
=> Hello, World!
   Hello, World!
   Hello, World!
   Hello, World!
   Hello, World!
```</p>

<h3>未完待续</h3>

<p>针对重复调用的行为上的不同只是<code>invoke</code>以及<code>execute</code>方法之间的一个基本差异而已，那第一种方案跟第二种方案的差异又有什么不同？在带参数的情况下，又该如何考虑两个方法之间的差异？</p>

<p><a href="http://rake.rubyforge.org/classes/Rake/Task.html">Rake::Task source code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Split logs automatically every day]]></title>
    <link href="http://Martin91.github.io/blog/articles/2013/09/07/split-logs-automatically-every-day/"/>
    <updated>2013-09-07T01:11:00+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2013/09/07/split-logs-automatically-every-day</id>
    <content type="html"><![CDATA[<p><strong>Related resource(s):</strong></p>

<p>&ldquo;linuxcommand: logrotate&rdquo;:<a href="http://linuxcommand.org/man_pages/logrotate8.html">http://linuxcommand.org/man_pages/logrotate8.html</a><br>
<strong>logrotate</strong>  is  designed to ease administration of systems that generate large numbers of log files. Normally, logrotate is run as a daily cron job.</p>

<p><strong>Some important knowledges:</strong></p>

<ul>
<li>Any number of config files may be given. Later config files may override the options given in earlier files, so the order in  which  the logrotate config files are listed in is important.  Normally, <strong>a single config file which includes any other config files which are  needed  should  be used</strong>.  If a directory is  given, every file in that directory is used as a config file.</li>
<li><strong>Default config file:</strong> /etc/logrotate.conf. You can include other config files within it using <strong>include</strong> directive.</li>
</ul>


<!-- More -->


<h2>Assumption</h2>

<ol>
<li>Your site is <code>example.com</code></li>
<li>The site is located in <code>/var/www/example/</code></li>
<li>Your site is deployed by Capistrano, so you can find your logs in <code>/var/www/example/shared/log/</code></li>
<li>Your static contents server is <strong>Nginx</strong>, and its logs are located in <code>/var/www/example/shared/log/</code> and their names start with <code>nginx_</code></li>
</ol>


<h2>How to do</h2>

<h3>1. Login your server</h3>

<h3>2. Make sure that &ldquo;include /etc/logrotate.d&rdquo; is existed in default config file and not commented:</h3>

<pre>
$ cat /etc/logrotate.conf
</pre>


<p>You should be able to find the directive shown below, if not, append it manully.</p>

<pre>
include /etc/logrotate.d
</pre>


<h3>3.Create new logrotate config files for your site&rsquo;s logs</h3>

<p><strong>A. Create new rotate config file for application log:</strong></p>

<pre>
$ sudo vim /etc/logrotate.d/example_production_log
</pre>


<p>Type following contents, and save.</p>

<pre>
/var/www/example/shared/log/production.log {

  daily

  missingok

  rotate 30

  notifempty

  create 664 deploy deploy

  copytruncate

}
</pre>


<p><strong>B. Create new rotate config file for server log:</strong></p>

<pre>
$ sudo vim /etc/logrotate.d/nginx-log-for-example
</pre>


<p>Type following contents, and save.</p>

<pre>
/var/www/example/shared/log/nginx_*.log {

  daily

  missingok

  rotate 30

  notifempty

  create 664 root root

  sharedscripts

  postrotate

  [ ! -f /var/run/nginx.pid ] || kill -USR1 `cat /var/run/nginx.pid`

  endscript
}
</pre>


<p><strong>Attention:</strong><br>
<strong>/var/run/nginx.pid</strong> is your nginx pid file path, but someone may use default nginx pid path(<strong>/opt/nginx/logs/nginx.pid</strong>). You have two solutions to solve this conflict:</p>

<blockquote><ol type="a">
<li>Change <code>/var/run/nginx.pid</code> to <code>/opt/nginx/logs/nginx.pid</code> or other path you have defined in your nginx config file.</li>
<li>Set your <strong>&ldquo;pid&rdquo;</strong> directive to expected path:
<pre>
pid /var/run/nginx.pid;
</pre>
in your nginx config file(such as, /opt/nginx/conf/nginx.conf), and then restart your server.</li>
</ol>
</blockquote>

<p>If the above work are all finished, everything done! You should remember to check if everything runs normally at other days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup database and other attachments in ROR]]></title>
    <link href="http://Martin91.github.io/blog/articles/2013/09/07/backup-database-and-other-attachments-in-ror/"/>
    <updated>2013-09-07T00:26:00+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2013/09/07/backup-database-and-other-attachments-in-ror</id>
    <content type="html"><![CDATA[<h2>Related Resources</h2>

<ol>
<li><strong>rsync</strong>:<a href="http://rsync.samba.org/">http://rsync.samba.org/</a></li>
<li><strong>Crontab</strong>:<a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5">http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5</a></li>
<li><strong>&ldquo;Linux Crontab 定时任务 命令详解&rdquo;</strong>:<a href="http://blog.csdn.net/tianlesoftware/article/details/5315039">http://blog.csdn.net/tianlesoftware/article/details/5315039</a></li>
<li><strong>[rubygem]&ldquo;backup&rdquo;</strong>:<a href="https://github.com/meskyanichi/backup">https://github.com/meskyanichi/backup</a></li>
<li><strong>[rubygem]&ldquo;whenever&rdquo;</strong>:<a href="https://github.com/javan/whenever">https://github.com/javan/whenever</a></li>
</ol>


<h2>Automatically backup on the remote server:</h2>

<p>Let&rsquo;s firstly assumpt:</p>

<ol>
<li>You have a site named &ldquo;<strong>example.com</strong>&rdquo;;</li>
<li>You can login to it through a username &ldquo;<strong>deploy</strong>&rdquo;, and its password is &ldquo;<strong>password</strong>&rdquo;;</li>
<li>You located the contents of your site in <code>/var/www/example/</code>;</li>
<li>Your database server is <strong>Mysql</strong>, and the database for your site is <strong>example_production</strong>.</li>
</ol>


<!-- more -->


<p><strong>1. SSH login:</strong></p>

<pre>
$ ssh deploy@example.com
</pre>


<p><strong>2. Install the backup:</strong></p>

<pre>
$ gem install backup
</pre>


<p><strong>3. Prepare directories for backup files:</strong></p>

<pre>
$ mkdir /var/www/example/backup
$ mkdir /var/www/example/backup/db
</pre>


<p><strong>4. Generate and edit backup script:</strong></p>

<pre>
$ cd ~/
$ mkdir Backup/
$ cd Backup
$ backup generate:model -t example_db --databases=mysql --compressors=gzip --storages=local
$ cd models
$ vim example_db.rb
</pre>


<p>  Input the below content:
```ruby</p>

<h1>encoding: utf-8</h1>

<p>Backup::Model.new(:example_db, &lsquo;Dumping example Production Database&rsquo;) do
  split_into_chunks_of 250</p>

<p>  database MySQL do |db|</p>

<pre><code>db.name               = "example_production"
db.username           = ""                      # Replace the blank string with your real username
db.password           = ""                      # Replace the blank string with your real password
db.host               = "localhost"
db.port               = 3306
db.socket             = "/var/run/mysqld/mysqld.sock"
db.additional_options = ["--quick", "--single-transaction"]
</code></pre>

<p>  end</p>

<p>  store_with Local do |local|</p>

<pre><code>local.path       = "/var/www/example/backup/db"
local.keep       = 10
</code></pre>

<p>  end</p>

<p>  compress_with Gzip
end
```
 Run backup command to confirm that your config works:</p>

<pre>
backup perform -t example_db
</pre>


<p><strong>Attention</strong>: Remember to update the config file if you have changed the username and/or password of the database.</p>

<p><strong>5. Install whenever:</strong></p>

<pre>
$ gem install whenever
</pre>


<p><strong>6. Generate a schedule.rb file with whenever:</strong></p>

<pre>
$ cd /var/www/example/
$ mkdir config
$ wheneverize .
</pre>


<p>The last command will create a new file named <strong>&ldquo;schedule.rb&rdquo;</strong> under <code>config/</code> directory.</p>

<p><strong>7. Add a daily task:</strong></p>

<p>Open the file to edit:</p>

<pre>
vim config/schedule.rb
</pre>


<p>Contents:
<code>ruby
set :output, "~/Backup/example_whenever.log"           # This is important, it can help you to find the reason when failed to backup the database
every :day do
  command "cd ~/Backup &amp;&amp; backup perform -t example_db"
end
</code>
<strong>8. Update whenever task into crontab:</strong></p>

<pre>
$ whenever --update-crontab
</pre>


<p><strong>9. Check whether the task is updated successfully or not:</strong></p>

<pre>
$ crontab -e
</pre>


<p>If successed, you should see your new task shown at the bottom of the file.</p>

<h2>Synchronize remote backups every day automatically by rsync and crontab:</h2>

<p><strong>Attention</strong>: Below operations are played on a different server, which is used to sync files. We assumpt its domain is <code>another.com</code> and the username is <code>deploy</code>.</p>

<p><strong>1. SSH login:</strong></p>

<pre>
$ ssh deploy@another.com
</pre>


<p><strong>2. Write a synchronize shell script:</strong></p>

<pre>
$ mkdir ~/backup/example.com
$ cd ~/backup/example.com
$ vim sync.sh
</pre>


<p>Input the below contents into the new file named &lsquo;sync.sh&rsquo;:</p>

<pre>
#! /bin/bash
cd /home/deploy/backup/example.com/

rsync -av -e "ssh" deploy@example.com:/var/www/example/backup/db/example_db/ db/

rsync -av -e "ssh" deploy@example.com:/var/www/example/shared/public/uploads .

rsync -av -e "ssh" deploy@example.com:/var/www/example/shared/log .
</pre>


<p>and then, assign the scripe execution authority:</p>

<pre>
$ chmod 775 sync.sh
</pre>


<p>Run the script to ensure everything works well:</p>

<pre>
$ ./sync.sh
</pre>


<p><strong>Attention:</strong> Because it is required to be authorized to access the targer server, you should remember to copy your ssh public key to the target server(such as, <strong>example.com</strong>) before you can sync files.</p>

<p><strong>3. Open user&rsquo;s crontab config file:</strong></p>

<pre>
$ crontab -e
</pre>


<p>Append the below task at the end:</p>

<pre>
10 0 * * * /home/deploy/backup/example.com/sync.sh
</pre>


<p>Ok, that&rsquo;s all. The rest work is that remember to check if there is any backups generated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write css codes distinct from different pages]]></title>
    <link href="http://Martin91.github.io/blog/articles/2013/08/29/write-css-codes-distinct-from-different-pages/"/>
    <updated>2013-08-29T15:32:00+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2013/08/29/write-css-codes-distinct-from-different-pages</id>
    <content type="html"><![CDATA[<p>In rails, there is normally a view corresponding to an action. So if you want to do some special styles based on different pages, you can render controller name and action name in your layout file like this:
<code>html
&lt;body class="#{controller_name} #{action_name}"&gt;
  &lt;!-- Render something --&gt;
&lt;/body&gt;
</code>
Let&rsquo;s assumpt that your current page controller is <code>ProductsController</code>, and your action is <code>index</code>, then you can write your style codes like:
<code>scss
.products.index {
  /* some styles */
}
</code></p>
]]></content>
  </entry>
  
</feed>

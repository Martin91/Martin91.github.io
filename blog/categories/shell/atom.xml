<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | Martin]]></title>
  <link href="http://Martin91.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://Martin91.github.io/"/>
  <updated>2017-10-09T21:40:35+08:00</updated>
  <id>http://Martin91.github.io/</id>
  <author>
    <name><![CDATA[Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run a shell script auto-matically when entering/cd a directory]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/05/04/run-a-shell-script-auto-matically-when-entering-a-directory/"/>
    <updated>2014-05-04T10:32:16+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/05/04/run-a-shell-script-auto-matically-when-entering-a-directory</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t know if it is common that you need to run some shell scripts which are  used under only some directories, such as, one of your Rails projects.</p>

<!-- More -->


<p>Today I find that I always need to run <code>rspec</code> command with a <code>SPEC</code> option, which specifies spec files to be run. In short, everytime I should type the following command in my terminal:
<code>sh
rake spec SPEC=spec/lib/
</code></p>

<p>It is convenient to run this command as an <strong>alias</strong>, but I don&rsquo;t want to write this alias into the <code>~/.bash_profile</code>, because it should be available under the current directory only. But how?</p>

<p>Thanks to the powerful bash shell and its function, we can rewrite the built-in <code>cd</code> command through a function named <strong>cd</strong>. The following are steps:</p>

<ol>
<li><p>Open your <code>~/.bash_profile</code>, and insert:
<code>sh
function cd {
 # actually change the directory with all args passed to the function
 builtin cd "$@"
 # if there's a regular file named ".bash_local"...
 if [ -f ".bash_local" ] ; then
     # source its contents
     source .bash_local
 fi
}
</code></p></li>
<li><p>And then source it in your terminal:
<code>sh
$ source ~/.bash_profile
</code></p></li>
<li><p>Create new file named <code>.bash_local</code> under your target directories(on my machine, it is <code>~/development/rails-dev/graduation-project/</code>), and then insert:
<code>sh
alias rspec_lib='rake spec SPEC=spec/lib/'
</code></p></li>
<li><p>Now cd the directory, and the alias <code>rspec_lib</code> will be available auto-matically:
``` sh
$ cd ~/development/rails-dev/graduation-project/
$ rspec_lib
=> &hellip;..</p></li>
</ol>


<p>Finished in 0.00617 seconds
5 examples, 0 failures</p>

<p>Randomized with seed 23543
```</p>

<h3>Tips</h3>

<p>Please consider if it is necessary to check <code>.bash_local</code> into your git repo. If not, remember to add it to the <code>.gitignore</code> file.</p>

<h3>TODO</h3>

<p>When leave the directory, how to <strong>&ldquo;un-source&rdquo;</strong> the sourced file, that is, make <code>rspec_lib</code> unavailable?</p>

<h3>Related Links</h3>

<ol>
<li><a href="http://superuser.com/questions/283352/how-do-you-run-a-shell-command-script-automatically-when-entering-cd-ing-a-direc">How do you run a shell command/script automatically when entering/cd-ing a directory on Snow Leopard?</a></li>
<li><a href="http://stackoverflow.com/questions/8760505/is-it-possible-to-unsource-in-bash">Is it possible to “unsource” in bash?</a></li>
</ol>

]]></content>
  </entry>
  
</feed>

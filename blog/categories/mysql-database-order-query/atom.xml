<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MySQL Database order Query | Martin]]></title>
  <link href="http://Martin91.github.io/blog/categories/mysql-database-order-query/atom.xml" rel="self"/>
  <link href="http://Martin91.github.io/"/>
  <updated>2017-10-09T21:40:35+08:00</updated>
  <id>http://Martin91.github.io/</id>
  <author>
    <name><![CDATA[Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL IN 查询，并通过 FIELD 函数按照查询条件顺序返回结果]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/09/13/mysql-in-query-and-order-by-field-function/"/>
    <updated>2015-09-13T20:24:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/09/13/mysql-in-query-and-order-by-field-function</id>
    <content type="html"><![CDATA[<p>我们都非常习惯通过 MySQL 的 <a href="https://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#function_in">IN 函数</a>来查询特定集合的数据，比如为了在 books 表中找出李雷、韩梅梅和安华写的书，我们可以有如下的 SQL（可以通过 <a href="http://sqlfiddle.com/#!9/1982d">SQL Fiddle</a>查看示例）：</p>

<!-- MORE -->


<p><code>sql
SELECT * FROM books WHERE `books`.`author` IN ('李雷','韩梅梅','安华');
</code></p>

<p>数据库返回如下结果：</p>

<table>
<thead>
<tr>
<th></th>
<th> author </th>
<th>     title      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 安华   </td>
<td> 暴走漫画</td>
</tr>
<tr>
<td></td>
<td> 李雷   </td>
<td> 蓝色生死恋</td>
</tr>
<tr>
<td></td>
<td> 韩梅梅 </td>
<td> 冰与火之歌</td>
</tr>
<tr>
<td></td>
<td> 韩梅梅 </td>
<td> 天国的阶梯</td>
</tr>
<tr>
<td></td>
<td> 李雷   </td>
<td> 这个杀手不太冷</td>
</tr>
<tr>
<td></td>
<td> 韩梅梅 </td>
<td> 阿甘正传</td>
</tr>
</tbody>
</table>


<p>虽然这样确实能够返回所有李雷、韩梅梅和安华写过的书，但是返回的数据的排序方式是默认按照数据在数据库中的存储顺序，假如我们需要的返回结果是同时按照 IN 查询条件里边的参数顺序来排序呢？这个时候我们就需要利用到 MySQL <a href="https://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_field">FIELD</a> 这个函数了，FIELD 函数本来是 MySQL 提供用来查询某一个字符串在给定字符串元组中的索引位置的，比如这个官方例子：</p>

<p><code>sql
SELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo'); # -&gt; 2
</code>
如果将其应用在 <a href="http://dev.mysql.com/doc/internals/en/optimizer-order-by-clauses.html"><code>ORDER BY</code></a> 排序条件中，就可以根据指定字段的值在给定参数列表中的索引数值，进而将查询结果按照参数列表排序了（示例请访问 <a href="http://sqlfiddle.com/#!9/46ccc/5">SQL Fiddle</a>）：</p>

<p><code>
SELECT * FROM books WHERE `books`.`author` IN ('李雷','韩梅梅','安华') ORDER BY FIELD(author, '李雷','韩梅梅','安华');
</code>
这一次，返回的结果则是：</p>

<table>
<thead>
<tr>
<th></th>
<th> author </th>
<th>     title      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>李雷 </td>
<td>  蓝色生死恋</td>
</tr>
<tr>
<td></td>
<td>李雷 </td>
<td>  这个杀手不太冷</td>
</tr>
<tr>
<td></td>
<td>韩梅梅 </td>
<td> 冰与火之歌</td>
</tr>
<tr>
<td></td>
<td>韩梅梅 </td>
<td> 天国的阶梯</td>
</tr>
<tr>
<td></td>
<td>韩梅梅 </td>
<td> 阿甘正传</td>
</tr>
<tr>
<td></td>
<td>安华 </td>
<td>  暴走漫画</td>
</tr>
</tbody>
</table>


<p>可以发现，这一次，我们得到的结果就是按照条件参数列表 <code>'李雷','韩梅梅','安华'</code> 进行排序后得到了。</p>

<h3>应用层面的思考</h3>

<h4>1. 兼容性</h4>

<p>本文提到的 <code>FIELD</code> 函数，毕竟只是 MySQL 数据库内置提供的一种函数，除非你非常明确你的项目就是只用 MySQL 数据库，否则，你的 SQL 代码在未来迁移到其他数据库的过程中就会遇到语法兼容性问题（只是 PostgreSQL 数据库不支持 FIELD）。</p>

<h4>2. 性能问题</h4>

<p>我们都知道，数据库在进行 <code>ORDER BY</code> 排序的时候，除非它是按照某个已经存在索引的键的值进行排序，否则数据库则需要通过计算 <code>ORDER BY</code> 中表达式的值并且按照查询结果建立新的临时表，这个过程会带来额外的时间开销跟内存开销，对数据库本身就是一种性能负担。这样的方式在单一数据库多个数据库客户端连接的时候，可能对数据库造成太大负担。</p>

<h4>3. 与应用层代码的结合</h4>

<p>尽管使用 <code>FIELD</code> 函数可能带来兼容性以及性能方面的隐患，但是 <code>FIELD</code> 的使用并非全是有损之处。</p>

<p>比如在与 Ruby 的 active_record 结合时，这种通过数据库直接完成排序等 SQL 语句可以方便我们构建 ActiveRecord::Relation 对象，因为我们不再需要先将查询结果集从内存中转为数组排序，再进行二次查询，可以帮助我们减少 <a href="https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/">N+1 查询问题</a>，后者也是常见的影响数据库服务器性能的现象之一。除此之外，这样的写法也可以有效地帮助我们简化代码，保持代码简洁。</p>

<p>但是在不需要对数据进行二次查询或者查询数据量太大的情况下，我反而建议可以通过 Ruby 的 <code>Array#sort_by</code> 方法对数据进行排序，这样的话，排序的任务就转移给了客户端代码，排序任务的压力就自然分散，减轻了服务器端的压力。</p>

<h3>总结</h3>

<ol>
<li>FIELD 函数结合 ORDER BY 可以帮助我们将查询结果集按照参数列表顺序返回；</li>
<li>FIELD 函数结合 ORDER BY 的方式可以帮助我们在数据库层面完成排序，简化了业务代码逻辑；</li>
<li>FIELD 函数结合 ORDER BY 可能带来 SQL 兼容性以及性能方面的问题；</li>
<li>在确认项目数据库不大可能为 MySQL
之外的数据库的前提下，查询数据量少或者需要保持业务代码简洁的场景下，我建议可以采用 FIELD 函数排序；而在数据量庞大的情况下，或者不大可能出现大量 N+1 查询的情况下，我建议可以采用先在数据库中查询数据集（只查询 IN 条件，不排序）再到内存中通过业务代码排序(比如 Ruby 的 <code>Array#sort_by</code>)的方式。</li>
</ol>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 属性变更 | Martin]]></title>
  <link href="http://Martin91.github.io/blog/categories/shu-xing-bian-geng/atom.xml" rel="self"/>
  <link href="http://Martin91.github.io/"/>
  <updated>2017-02-18T12:40:00+08:00</updated>
  <id>http://Martin91.github.io/</id>
  <author>
    <name><![CDATA[Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[跟踪model中属性（值）的变更]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/07/zhui-zong-bian-geng/"/>
    <updated>2014-03-07T13:02:47+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/07/zhui-zong-bian-geng</id>
    <content type="html"><![CDATA[<p>此文翻译自<a href="http://monkeyandcrow.com/blog/reading_rails_change_tracking/">Reading Rails &ndash; Change Tracking</a>，限于本人水平，翻译不当之处，敬请指教！</p>

<p>我们今天来看看Rails是如何追踪model里边属性的变更的。
<code>ruby
person = Person.find(8)
person.name = "Mortimer"
person.name_changed?    #=&gt; true
person.name_was         #=&gt; "Horton"
person.changes          #=&gt; {"name"=&gt;["Horton","Mortimer"]}
person.save!
person.changes          #=&gt; {}
</code>
<code>name_changed?</code>方法是从哪来的呢？变更又是如何被创建的？让我们顺着这个场景，看看这一切背后的秘密。</p>

<!-- More -->


<p>如果需要跟着我的步骤走，请使用<a href="https://github.com/adamsanderson/qwandry">qwandry</a>打开每一个相关的代码库，或者直接从<a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github</a>查看源码即可。</p>

<h3>ActiveModel</h3>

<p>当你想探寻ActiveRecord里边的功能时，你应该首先了解ActiveModel。ActiveModel（<strong>提示</strong>： 命令行中键入<code>qw activemodel</code>查看代码）定义了没有与数据库捆绑的逻辑。我们将从<code>dirty.rb</code>文件开始。在这个模块最开始的地方，代码调用了<code>attribute_method_suffix</code>：
``` ruby
module Dirty
  extend ActiveSupport::Concern
  include ActiveModel::AttributeMethods</p>

<p>  included do</p>

<pre><code>attribute_method_suffix '_changed?', '_change', '_will_change!', '_was'
#...
</code></pre>

<p><code>
`attribute_method_suffix`定义了定制的属性读写器。这主要用来告诉Rails将一些带有类似`_changed?`后缀的调用分发到特定的处理器方法上。为了看看它们是如何实现的，请向下滚动代码，并且找到`def attribute_changed?`：
</code> ruby
def attribute_changed?(attr)
  changed_attributes.include?(attr)
end
<code>
我们将会在另外的一篇文章中再着重介绍如何连接这些方法的细节，当你调用一个类似`name_changed?`的方法时，Rails将会把`"name"`作为参数`attr`传给上述方法。往回看一点点，你会发现`changed_attributes`只是一个包含了从属性名到旧的属性值的映射的`Hash`而已：
</code> ruby</p>

<h1>Returns a hash of the attributes with unsaved changes indicating their original</h1>

<h1>values like <tt>attr => original value</tt>.</h1>

<p>#</p>

<h1>person.name # => &ldquo;bob&rdquo;</h1>

<h1>person.name = &lsquo;robert&rsquo;</h1>

<h1>person.changed_attributes # => {&ldquo;name&rdquo; => &ldquo;bob&rdquo;}</h1>

<p>def changed_attributes
  @changed_attributes ||= {}
end
<code>``
在Ruby中，如果你之前都没有见过</code>||=<code>操作，那么你可能需要了解这其实是一个用于初始化变量值的技巧。当它第一次被访问的时候，变量的值是</code>nil<code>，所以它返回了一个空的</code>Hash<code>并且用其初始化</code>@changed_attributes<code>。当它再一次被访问的时候，</code>@changed_attributes<code>已经被赋值过了。那么现在我们可以回答我们的第一个问题了，</code>name_changed?<code>方法被转发到</code>attribute_changed?<code>方法，而后者会在</code>changed_attributes`中查找特定的值。</p>

<p>在我们的例子中，我们看到<code>changes</code>返回一个类似<code>{"name"=&gt;["Horton","Mortimer"]}</code>这样既包含旧的属性值，又包含新的属性值的<code>Hash</code>。让我们这又是如何做到的：
<code>ruby
def changes
  ActiveSupport::HashWithIndifferentAccess[changed.map { |attr| [attr, attribute_change(attr)] }]
end
</code>
这段代码看起来有点难以理解，但是我们可以一步一步分析。首先我们从<code>ActiveSupport::HashWithIndifferentAccess</code>开始，这是在ActiveSupport中所定义的<code>Hash</code>的子类，通过字符串类型或者符号类型的键去访问它将得到一样的结果：
<code>ruby
hash = ActiveSupport::HashWithIndifferentAccess.new
hash[:name] = "Mortimer"
hash["name"] #=&gt; "Mortimer"
</code>
接下来就有点奇怪了，Rails调用了<code>Hash[]</code>方法。这是一个鲜为人知的从包含键/值对的数组中初始化一个哈希表的方法。
<code>ruby
Hash[
  [:name, "Mortimer"],
  [:species, "Crow"]
] #=&gt; {[:name, "Mortimer"]=&gt;[:species, "Crow"]}
</code>
可以查看<code>Hash Tricks</code>找到更多类似的方法。<code>changes</code>中剩余部分的代码就比较清晰了。属性名被映射到类似<code>[attr, attribute_change(attr)]</code>的数组。其中第一个元素，也就是<code>attr</code>编程了一个键，而对应的值则是<code>attribute_change(attr)</code>返回的结果。
<code>ruby
def attribute_change(attr)
  [changed_attributes[attr], __send__(attr)] if attribute_changed?(attr)
end
</code>
这是另一个被分发的属性方法，但是在这个例子里，它返回了一个包含了两个元素的数组，第一个元素是从<code>changed_attributes</code>哈希表中读到的<code>attr</code>所对应的旧的值，第二个则是所对应的新的值。Rails通过使用<code>__send__</code>方法调用了名为<code>attr</code>的方法，进而得到新的属性值。然后这对值会被返回，并且用作<code>changes</code>哈希表中<code>attr</code>所对应的值。</p>

<h3>ActiveRecord</h3>

<p>现在让我们来找出Rails是如何记录更改的。ActiveRecord实现了读写ActiveModel所跟踪的属性的代码。跟ActiveModel一样，ActiveRecord也有一个<code>dirty.rb</code>文件，我们将要对这个文件进行挖掘。通过在定义了<code>changed_attributes</code>的文件中（<strong>提示</strong>：命令行中键入<code>qw activerecord</code>）找到的相关代码，我们可以看到这个文件包装了ActiveRecord的<code>write_attribute</code>与逻辑以实现对变更的跟踪。
``` ruby</p>

<h1>Wrap write_attribute to remember original attribute value.</h1>

<p>def write_attribute(attr, value)
  attr = attr.to_s</p>

<p>  # The attribute already has an unsaved change.
  if attribute_changed?(attr)</p>

<pre><code>old = @changed_attributes[attr]
@changed_attributes.delete(attr) unless _field_changed?(attr, old, value)
</code></pre>

<p>  else</p>

<pre><code>old = clone_attribute_value(:read_attribute, attr)
@changed_attributes[attr] = old if _field_changed?(attr, old, value)
</code></pre>

<p>  end</p>

<p>  # Carry on.
  super(attr, value)
end
<code>
让我们暂时偏离一下主题，并且看一下方法的包装。这是在Rails的代码里边非常常见的模式。当你调用`super`的时候，Ruby查找当前对象的所有祖先，包括相关的模块。由于一个类可以引进多个模块，所以你可以多层地包装方法。这里是一个简单的例子：
</code> ruby
module Shouting
  def say(message)</p>

<pre><code>message.upcase
</code></pre>

<p>  end
end</p>

<p>class Speaker
  include Shouting</p>

<p>  def say(message)</p>

<pre><code>puts super(message)
</code></pre>

<p>  end
end</p>

<p>Speaker.new.say(&ldquo;Hi!&rdquo;) #=> &ldquo;HI!&rdquo;
<code>``
请注意</code>Shouting<code>是</code>Speaker<code>所包含的模块，而不是后者所扩展的类。Rails使用这种技巧去包装方法，以此确保在不同的文件里有独立的关注点（Concern）。这也意味着为了了解整个系统，你可能需要从多个文件里边找到相关的代码。假如你看到了一个对</code>super`的调用，这是一个可以告诉你在别的地方还有更多代码需要了解的好线索。假如你想学习更多的这方面的知识，James Coglan有一个非常详细的文章讲解了Ruby的<a href="https://blog.jcoglan.com/2013/05/08/how-ruby-method-dispatch-works/">方法分发</a>。</p>

<p>回到<code>write_attribute</code>方法。根据属性（值）是否已经改变，会有两个可能的场景。第一个分支检查你是否正在将一个属性（值）还原到原来的值，如果是这样，它将会从记录了已改变属性的哈希表中删除属性。第二个分支仅仅在新的值与旧的值不同的时候记录下更改。一旦更改被记录下来，实际的用于更新属性的逻辑通过调用<code>super</code>方法完成。</p>

<h3>总结</h3>

<p>Rails为你的model提供了变更的跟踪。这个功能是在ActiveModel中实现的，但是真正的监测更改的逻辑则是在ActiveRecord中实现的。</p>

<p>通过了解这个功能，我们也发掘到了一些有趣的小贴士：</p>

<ul>
<li>ActiveModel定义了<code>attribute_method_suffix</code>方法用于分发类似<code>name_changed?</code>的方法。</li>
<li><code>||=</code>操作符是一个可以用来初始化变量的方便的方法。</li>
<li>在<code>HashWithIndifferentAccess</code>中，字符串类型以及符号类型的键是一样的。</li>
<li><code>Hash</code>可以通过<code>Hash[key_value_pairs]</code>方法初始化。</li>
<li>你可以使用模块拦截方法并为方法加上另一层的功能。</li>
</ul>


<p>假如你有关于你想阅读的关于Rails中其他部分的建议，请让我知道。</p>

<h3>喜欢这篇文章？</h3>

<p><a href="/blog/2014/03/02/jie-du-rails-xi-lie-fan-yi/">阅读另外8篇</a>“解读Rails”中的文章。</p>
]]></content>
  </entry>
  
</feed>

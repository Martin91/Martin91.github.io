<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backup | Martin]]></title>
  <link href="http://Martin91.github.io/blog/categories/backup/atom.xml" rel="self"/>
  <link href="http://Martin91.github.io/"/>
  <updated>2016-10-29T22:47:42+08:00</updated>
  <id>http://Martin91.github.io/</id>
  <author>
    <name><![CDATA[Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backup database and other attachments in ROR]]></title>
    <link href="http://Martin91.github.io/blog/articles/2013/09/07/backup-database-and-other-attachments-in-ror/"/>
    <updated>2013-09-07T00:26:00+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2013/09/07/backup-database-and-other-attachments-in-ror</id>
    <content type="html"><![CDATA[<h2>Related Resources</h2>

<ol>
<li><strong>rsync</strong>:<a href="http://rsync.samba.org/">http://rsync.samba.org/</a></li>
<li><strong>Crontab</strong>:<a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5">http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5</a></li>
<li><strong>&ldquo;Linux Crontab 定时任务 命令详解&rdquo;</strong>:<a href="http://blog.csdn.net/tianlesoftware/article/details/5315039">http://blog.csdn.net/tianlesoftware/article/details/5315039</a></li>
<li><strong>[rubygem]&ldquo;backup&rdquo;</strong>:<a href="https://github.com/meskyanichi/backup">https://github.com/meskyanichi/backup</a></li>
<li><strong>[rubygem]&ldquo;whenever&rdquo;</strong>:<a href="https://github.com/javan/whenever">https://github.com/javan/whenever</a></li>
</ol>


<h2>Automatically backup on the remote server:</h2>

<p>Let&rsquo;s firstly assumpt:</p>

<ol>
<li>You have a site named &ldquo;<strong>example.com</strong>&rdquo;;</li>
<li>You can login to it through a username &ldquo;<strong>deploy</strong>&rdquo;, and its password is &ldquo;<strong>password</strong>&rdquo;;</li>
<li>You located the contents of your site in <code>/var/www/example/</code>;</li>
<li>Your database server is <strong>Mysql</strong>, and the database for your site is <strong>example_production</strong>.</li>
</ol>


<!-- more -->


<p><strong>1. SSH login:</strong></p>

<pre>
$ ssh deploy@example.com
</pre>


<p><strong>2. Install the backup:</strong></p>

<pre>
$ gem install backup
</pre>


<p><strong>3. Prepare directories for backup files:</strong></p>

<pre>
$ mkdir /var/www/example/backup
$ mkdir /var/www/example/backup/db
</pre>


<p><strong>4. Generate and edit backup script:</strong></p>

<pre>
$ cd ~/
$ mkdir Backup/
$ cd Backup
$ backup generate:model -t example_db --databases=mysql --compressors=gzip --storages=local
$ cd models
$ vim example_db.rb
</pre>


<p>  Input the below content:
```ruby</p>

<h1>encoding: utf-8</h1>

<p>Backup::Model.new(:example_db, &lsquo;Dumping example Production Database&rsquo;) do
  split_into_chunks_of 250</p>

<p>  database MySQL do |db|</p>

<pre><code>db.name               = "example_production"
db.username           = ""                      # Replace the blank string with your real username
db.password           = ""                      # Replace the blank string with your real password
db.host               = "localhost"
db.port               = 3306
db.socket             = "/var/run/mysqld/mysqld.sock"
db.additional_options = ["--quick", "--single-transaction"]
</code></pre>

<p>  end</p>

<p>  store_with Local do |local|</p>

<pre><code>local.path       = "/var/www/example/backup/db"
local.keep       = 10
</code></pre>

<p>  end</p>

<p>  compress_with Gzip
end
```
 Run backup command to confirm that your config works:</p>

<pre>
backup perform -t example_db
</pre>


<p><strong>Attention</strong>: Remember to update the config file if you have changed the username and/or password of the database.</p>

<p><strong>5. Install whenever:</strong></p>

<pre>
$ gem install whenever
</pre>


<p><strong>6. Generate a schedule.rb file with whenever:</strong></p>

<pre>
$ cd /var/www/example/
$ mkdir config
$ wheneverize .
</pre>


<p>The last command will create a new file named <strong>&ldquo;schedule.rb&rdquo;</strong> under <code>config/</code> directory.</p>

<p><strong>7. Add a daily task:</strong></p>

<p>Open the file to edit:</p>

<pre>
vim config/schedule.rb
</pre>


<p>Contents:
<code>ruby
set :output, "~/Backup/example_whenever.log"           # This is important, it can help you to find the reason when failed to backup the database
every :day do
  command "cd ~/Backup &amp;&amp; backup perform -t example_db"
end
</code>
<strong>8. Update whenever task into crontab:</strong></p>

<pre>
$ whenever --update-crontab
</pre>


<p><strong>9. Check whether the task is updated successfully or not:</strong></p>

<pre>
$ crontab -e
</pre>


<p>If successed, you should see your new task shown at the bottom of the file.</p>

<h2>Synchronize remote backups every day automatically by rsync and crontab:</h2>

<p><strong>Attention</strong>: Below operations are played on a different server, which is used to sync files. We assumpt its domain is <code>another.com</code> and the username is <code>deploy</code>.</p>

<p><strong>1. SSH login:</strong></p>

<pre>
$ ssh deploy@another.com
</pre>


<p><strong>2. Write a synchronize shell script:</strong></p>

<pre>
$ mkdir ~/backup/example.com
$ cd ~/backup/example.com
$ vim sync.sh
</pre>


<p>Input the below contents into the new file named &lsquo;sync.sh&rsquo;:</p>

<pre>
#! /bin/bash
cd /home/deploy/backup/example.com/

rsync -av -e "ssh" deploy@example.com:/var/www/example/backup/db/example_db/ db/

rsync -av -e "ssh" deploy@example.com:/var/www/example/shared/public/uploads .

rsync -av -e "ssh" deploy@example.com:/var/www/example/shared/log .
</pre>


<p>and then, assign the scripe execution authority:</p>

<pre>
$ chmod 775 sync.sh
</pre>


<p>Run the script to ensure everything works well:</p>

<pre>
$ ./sync.sh
</pre>


<p><strong>Attention:</strong> Because it is required to be authorized to access the targer server, you should remember to copy your ssh public key to the target server(such as, <strong>example.com</strong>) before you can sync files.</p>

<p><strong>3. Open user&rsquo;s crontab config file:</strong></p>

<pre>
$ crontab -e
</pre>


<p>Append the below task at the end:</p>

<pre>
10 0 * * * /home/deploy/backup/example.com/sync.sh
</pre>


<p>Ok, that&rsquo;s all. The rest work is that remember to check if there is any backups generated.</p>
]]></content>
  </entry>
  
</feed>

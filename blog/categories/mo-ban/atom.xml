<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 模板 | Martin]]></title>
  <link href="http://Martin91.github.io/blog/categories/mo-ban/atom.xml" rel="self"/>
  <link href="http://Martin91.github.io/"/>
  <updated>2016-08-02T15:19:04+08:00</updated>
  <id>http://Martin91.github.io/</id>
  <author>
    <name><![CDATA[Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[嘿，小心你的双等号==]]></title>
    <link href="http://Martin91.github.io/blog/articles/2016/01/17/pay-attention-to-your-double-equals/"/>
    <updated>2016-01-17T01:40:48+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2016/01/17/pay-attention-to-your-double-equals</id>
    <content type="html"><![CDATA[<p>前两天在写代码的时候，突然收到警告说项目代码中存在 XSS 漏洞，遂立即根据报告的 URL 排查页面代码，虽然很快就修复了，而且同样问题的讨论两年前就有了，看<a href="https://ruby-china.org/topics/16633">RubyChina: 别用 raw 和 html_safe</a>，一般来说相对有经验的老鸟也应该都知道这个点，但是还是觉得有必要写出来，再次提醒一下其他小伙伴，避免踩坑。</p>

<!-- MORE -->


<h2>问题根源</h2>

<p>其中，在找到的漏洞出现的地方，都存在类似以下这样的 slim 代码：</p>

<p><code>ruby
input class='xxx' value==params[:account]
</code>
问题就出在双等号 <code>==</code> 上，因为在 <strong>slim</strong> 跟 <strong>ERB</strong> 模板（其他模板比如 HAML 之类的就不清楚了）中，双等号其实是 Rails 的 <code>raw</code> 这个 helper 方法的缩写，<a href="http://edgeguides.rubyonrails.org/active_support_core_extensions.html#output-safety">参考链接</a>：</p>

<blockquote><p>To insert something verbatim use the raw helper rather than calling html_safe:</p>

<pre><code>&lt;%= raw @cms.current_template %&gt; &lt;%# inserts @cms.current_template as is %&gt;
</code></pre>

<p>or, equivalently, use <code>&lt;%==</code>:</p>

<pre><code>&lt;%== @cms.current_template %&gt; &lt;%# inserts @cms.current_template as is %&gt;
</code></pre></blockquote>

<p>也就是说上面的代码等同于：</p>

<p><code>ruby
input class='xxx' value=raw(params[:account])
</code></p>

<p>其中 <code>raw</code> 方法在 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw">Rails 文档</a>中的解释是这样子的：</p>

<blockquote><p>This method outputs without escaping a string. Since escaping tags is now default, this can be used when you don&rsquo;t want Rails to automatically escape tags. This is not recommended if the data is coming from the user&rsquo;s input.</p></blockquote>

<p>大概意思就是，这个方法将会跳过对传入的字符串进行标签过滤以及其他处理，直接将字符串输出到 HTML 中。<br/>
所以到现在原因就很清晰了，因为不小心在代码里多加了一个等号，变成了双等号，导致将会直接把用户的输入输出到待渲染的 HTML 中，在不自知的情况下留下了 XSS 漏洞。于是乎，修复方案仅需去掉一个等号即可：</p>

<p><code>ruby
input class='xxx' value=params[:account]
</code>
这样，Rails 就能继续自动过滤输入的 <code>:account</code> 的参数并且自动过滤恶意内容了。</p>

<h2>raw、String#html_safe 以及 &lt;%== %></h2>

<p>在查看 <code>raw</code> 方法的文档时，顺便看了其源码，极其简单，只有一行：</p>

<p>```ruby</p>

<h1>File actionview/lib/action_view/helpers/output_safety_helper.rb, line 16</h1>

<p>def raw(stringish)
  stringish.to_s.html_safe
end
<code>``
</code>raw<code>只是先确保将</code>stringish<code>参数转化为字符串，然后调用了 [</code>String#html_safe<code>](http://api.rubyonrails.org/classes/String.html#method-i-html_safe) 方法而已。而且在</code>String#html_safe` 的文档中，同样反复强调慎重使用这两个方法：</p>

<blockquote><p>It will be inserted into HTML with no additional escaping performed. It is your responsibilty to ensure that the string contains no malicious content. This method is equivalent to the <code>raw</code> helper in views.</p></blockquote>

<p>所以，可以总结一下，以下三种写法的代码都是等价的，都是不安全的：</p>

<p><code>ruby
input class='xxx' value==params[:account]
input class='xxx' value=raw(params[:account])
input class='xxx' value=params[:account].html_safe
</code>
那在切实需要输出包含 HTML 内容比如富文本编辑器编辑的内容时，如何保证安全？<br/>
方案很简单，只需要使用文档中推荐的 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize"><code>sanitize</code></a> helper 方法：</p>

<blockquote><ol>
<li>It is recommended that you use <code>sanitize</code> instead of this method(html_safe).</li>
<li>(#sanitize)Sanitizes HTML input, stripping all tags and attributes that aren&rsquo;t whitelisted.</li>
</ol>
</blockquote>

<p>或者使用一些其他第三方的 gem 用来做过滤处理。</p>

<h2>总结</h2>

<ol>
<li>不要使用双等号缩写的方式，以避免其他人（比如项目里的 Rails 新手）在不了解的情况下照着滥用；</li>
<li>尽可能不用 <code>raw</code> helper 或者 <code>String#html_safe</code> 方法，尽可能使用 <code>#sanitize</code>；</li>
<li>多借助工具进行自动扫描，比如 <a href="http://brakemanscanner.org/"><code>brakeman</code></a>，能够快速高效检测出包括 XSS 漏洞在内的多种安全隐患。</li>
</ol>


<h2>参考链接</h2>

<ol>
<li><a href="https://ruby-china.org/topics/16633">别用 raw 和 html_safe</a></li>
<li><a href="http://brakemanscanner.org/">BrakemanScanner</a></li>
<li><a href="http://guides.rubyonrails.org/active_support_core_extensions.html#safe-strings">Rails Guides: Safe Strings</a></li>
<li><a href="http://wiki.open.qq.com/wiki/Web%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E5%8F%8A%E4%BF%AE%E5%A4%8D#1.2_XSS.E6.BC.8F.E6.B4.9E">腾讯开放平台：XSS漏洞</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cross-site_scripting">Wikipedia: Cross-site scripting</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw">Rails API: #raw</a></li>
<li><a href="http://api.rubyonrails.org/classes/String.html#method-i-html_safe">Rails API: String#html_safe</a></li>
</ol>

]]></content>
  </entry>
  
</feed>

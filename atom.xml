<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Martin]]></title>
  <link href="http://Martin91.github.io/atom.xml" rel="self"/>
  <link href="http://Martin91.github.io/"/>
  <updated>2016-11-26T22:40:52+08:00</updated>
  <id>http://Martin91.github.io/</id>
  <author>
    <name><![CDATA[Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[周末到了，来段代码压压惊]]></title>
    <link href="http://Martin91.github.io/blog/articles/2016/11/26/zhou-mo-dao-le-lai-duan-dai-ma-ya-ya-jing/"/>
    <updated>2016-11-26T21:43:30+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2016/11/26/zhou-mo-dao-le-lai-duan-dai-ma-ya-ya-jing</id>
    <content type="html"><![CDATA[<p>最近一段时间，写了两篇关于 sidekiq 的源码分析，但是一直想要补充的一段 sidekiq 里边的代码其实是挺有趣也挺逗的，所以这个星期就不要长篇大论的源码分析，来点轻松点的吧。</p>

<!-- MORE -->


<p>这个代码是这样的 o(╯□╰)o：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq.rb#L51-L53</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Sidekiq</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">self</span><span class="o">.</span><span class="err">❨╯°□°❩╯︵┻━┻</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Calm down, yo.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Haha, are you kidding me? 见过用特殊字符或者特殊语言文字做方法名的，但是用颜文字，我还是第一次见。但是别笑，本着工科男严谨与求知的精神，我全局搜索了下这个方法的调用，结果更搞笑的结果来了，这个方法根本就没有真实调用，但是相应的测试用例同样非常逗 2333333333！！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;❨╯°□°❩╯︵┻━┻&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="p">{</span> <span class="vg">$stdout</span> <span class="o">=</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">after</span>  <span class="p">{</span> <span class="vg">$stdout</span> <span class="o">=</span> <span class="no">STDOUT</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;allows angry developers to express their emotional constitution and remedies it&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Sidekiq</span><span class="o">.</span><span class="err">❨╯°□°❩╯︵┻━┻</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;Calm down, yo.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="vg">$stdout</span><span class="o">.</span><span class="n">string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>哈哈，这只是难道为了方便程序员怒火中烧的时候表达想掀桌的内心吗？</p>

<p>当然，这个问题其实早就有很多人发现了，Ruby China 上也有好多的讨论了。今天是个快乐周六，让我再从网络上搜罗多一些搞笑的代码吧，哈哈~~~</p>

<h2>精彩段子时间</h2>

<p>每一个在注释或者代码里藏段子的程序员上辈子都是折翼的逗逼，不信，你看！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Exception</span> <span class="n">up</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Exception</span><span class="o">(</span><span class="s">&quot;Something is really wrong.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">throw</span> <span class="n">up</span><span class="o">;</span>  <span class="c1">//ha ha</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个程序猿写代码时到底什么心态啊，故意抛个异常，还在注释里如此狂妄？墙头草可除了？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//When I wrote this, only God and I understood what I was doing</span>
</span><span class='line'><span class="c1">//Now, God only knows</span>
</span></code></pre></td></tr></table></div></figure>


<p>哈哈，这个是我看的时候感觉比较搞笑的了，有种代码叫做天知地知我知，后来变成只有天知道了。。。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// drunk, fix later</span>
</span></code></pre></td></tr></table></div></figure>


<p>好自觉的程序猿啊，酒后不宜改代码，多提倡，建议立法机关考虑加条规定，凡是酒后写代码的，一律立案侦办！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define TRUE FALSE</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以想象当这个 commit 被 merge 进生产环境之后。。。哈哈，整个世界黑白颠倒！对的就是错的，错的就是对的！！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="c1"># returns 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>这。。。不。。。是。。。废。。。话。。。吗。。。？！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="c1">//who cares?</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>哈哈，我知道系统有异常啊，但是我才不管呢，哼~~~ ╭(╯^╰)╮</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// I am not responsible of this code.</span>
</span></code></pre></td></tr></table></div></figure>


<p>o(╯□╰)o 这个。。。不是我干的~~~真的！！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// it was hard to write</span>
</span><span class='line'><span class="c1">// so it should be hard to read</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以不能怪我咯，代码本来就不好写，你还想我让你好读？？？ <strong>╭(╯^╰)╮</strong> 来啊，互相伤害啊！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// I have to find a better job</span>
</span></code></pre></td></tr></table></div></figure>


<p>这位哥意识到自己职业生涯的终结了吗？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// If this code works, it was written by Paul DiLascia. If not, I don&#39;t know</span>
</span><span class='line'><span class="c1">// who wrote it</span>
</span></code></pre></td></tr></table></div></figure>


<p>反正我不管，好的代码跟我有关，不好的代码肯定不是我写的！！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Linux Sex</span>
</span><span class='line'><span class="nv">$ </span>date ; unzip ; strip ; touch ; grep ; finger ; mount ; fsck ; more ; yes ; umount ; sleep
</span></code></pre></td></tr></table></div></figure>


<p>好污的一段代码！！！天哪，我的眼睛! <code>(*/ω╲*)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="n">ago</span><span class="p">;</span> <span class="cm">/* in a galaxy far far away */</span>
</span></code></pre></td></tr></table></div></figure>


<p>我有故事你有酒，我来给你讲一宿！ O(∩_∩)O</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Always returns true.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">public</span> <span class="n">boolean</span> <span class="n">isAvailable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我读书少，你别骗我！（这段代码据说是真的跟注释说的一样的~~~）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// Dear maintainer:</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// Once you are done trying to &#39;optimize&#39; this routine,</span>
</span><span class='line'><span class="c1">// and have realized what a terrible mistake that was,</span>
</span><span class='line'><span class="c1">// please increment the following counter as a warning</span>
</span><span class='line'><span class="c1">// to the next guy:</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// total_hours_wasted_here = 42</span>
</span><span class='line'><span class="c1">//</span>
</span></code></pre></td></tr></table></div></figure>


<p>哈哈，这是受害者联盟吗？来来来，你掉坑里了吗？签个字登记一下吧！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">//true my ass! this doesn&#39;t work</span>
</span></code></pre></td></tr></table></div></figure>


<p>哈哈，童话里都是骗人的 o(╯□╰)o</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Peter wrote this, nobody knows what it does, don&#39;t change it!</span>
</span></code></pre></td></tr></table></div></figure>


<p>编程界网红<strong>Peter</strong>又中招……</p>

<p><strong>注意：</strong>上面所有有趣的代码片段跟注释都是从以下帖子或者讨论中摘录，欢迎点击链接阅读原文：</p>

<ol>
<li><a href="http://fuzzzyblog.blogspot.hk/2014/09/40-most-funny-code-comments.html">Fuzzzy blog: 40 most funny code comments ever</a></li>
<li><a href="https://www.quora.com/What-are-some-of-the-funniest-comments-in-source-code">What are some of the funniest comments in source code?</a></li>
</ol>


<h2>写在最后</h2>

<p>大多数程序猿的日常工作繁重辛苦，加班跟高度的精神压力都是家常便饭，如果你的身边有这样的程序猿，请一定要多多珍惜他们！也祝愿看到这篇帖子的程序猿们开怀一笑，生活已经如此多艰，快快休息放松一下吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sidekiq 信号处理源码分析]]></title>
    <link href="http://Martin91.github.io/blog/articles/2016/11/20/sidekiq-xin-hao-chu-li-yuan-ma-fen-xi/"/>
    <updated>2016-11-20T10:08:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2016/11/20/sidekiq-xin-hao-chu-li-yuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>在之前的文章<a href="http://Martin91.github.io/blog/articles/2016/10/29/sidekiqren-wu-diao-du-liu-cheng-fen-xi/">《Sidekiq任务调度流程分析》</a>中，我们一起仔细分析了 Sidekiq 是如何基于多线程完成队列任务处理以及调度的。我们在之前的分析里，看到了不管是 <code>Sidekiq::Scheduled::Poller</code> 还是 <code>Sidekiq::Processor</code> 的核心代码里，都会有一个由 <code>@done</code> 实例变量控制的循环体：</p>

<!-- More -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L63-L73</span>
</span><span class='line'><span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>  <span class="vi">@thread</span> <span class="o">||=</span> <span class="n">safe_thread</span><span class="p">(</span><span class="s2">&quot;scheduler&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">initial_wait</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="vi">@done</span>           <span class="c1"># 这是 poller 的循环控制</span>
</span><span class='line'>      <span class="n">enqueue</span>
</span><span class='line'>      <span class="n">wait</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;Scheduler exiting...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L66-L77</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="vi">@done</span>           <span class="c1"># 这是我们常说的 worker 循环控制</span>
</span><span class='line'>      <span class="n">process_one</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_stopped</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Shutdown</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_stopped</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_died</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ex</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是说，这些 <code>@done</code> 实例变量决定了 <code>poller</code> 线程跟 <code>worker</code> 线程是否循环执行？一旦 <code>@done</code> 被改为 <code>true</code>，那循环体就不再执行，线程自然也就是退出了。于是，单从这些代码，我们可以断定， Sidekiq 就是通过设置 <code>@done</code> 的值来通知一个线程安全退出（graceful exit）的。我们也知道，生产环境中，我们是通过发送信号的方式来告诉 sidekiq 退出或者进入静默(quiet)状态的，那么，这里的 <code>@done</code> 是怎么跟信号处理联系起来的呢？这些就是今天这篇文章的重点了！</p>

<h3>注意</h3>

<ol>
<li>今天的分析所参考的 sidekiq 的源码对应版本是 4.2.3；</li>
<li>今天所讨论的内容，将主要围绕系统信号处理进行分析，无关细节将不赘述，如有需要，请自行翻阅 sidekiq 源码；</li>
<li>今天的文章跟上篇的《Sidekiq任务调度流程分析》紧密相关，上篇文章介绍的启动过程跟任务调度会帮助这篇文章的理解，如果还没有阅读上篇文章的，建议先阅读后再来阅读这一篇信号处理的文章。</li>
</ol>


<h3>你将了解到什么？</h3>

<ol>
<li>Sidekiq 信号处理机制；</li>
<li>为什么重启 Sidekiq 时，<code>USR1</code> 信号（即进入 <code>quiet</code> 模式）需要尽可能早，而进程的退出重启需要尽可能晚。</li>
</ol>


<h3>从头再来</h3>

<p>因为前一篇文章着眼于任务调度，所以略过了其他无关细节，包括信号处理，这篇文章则将镜头对准信号处理，所以让我们从头再来一遍，只是这一次，我们只关心与信号处理有关的代码。</p>

<p>依旧是从 <code>cli.rb</code> 文件开始，它是 Sidekiq 核心代码的生命起点，因为 Sidekiq 命令行启动后，它是第一个被执行的代码，Sidekiq 启动过程中调用了 <code>Sidekiq::CLI#run</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/cli.rb#L49-L106</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="n">boot_system</span>
</span><span class='line'>  <span class="n">print_banner</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self_read</span><span class="p">,</span> <span class="n">self_write</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">pipe</span>
</span><span class='line'>
</span><span class='line'>  <span class="sx">%w(INT TERM USR1 USR2 TTIN)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sig</span><span class="o">|</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="nb">trap</span> <span class="n">sig</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">self_write</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="n">sig</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">ArgumentError</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Signal </span><span class="si">#{</span><span class="n">sig</span><span class="si">}</span><span class="s2"> not supported&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ... other codes</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">launcher</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">readable_io</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">[</span><span class="n">self_read</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">signal</span> <span class="o">=</span> <span class="n">readable_io</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>      <span class="n">handle_signal</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Interrupt</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s1">&#39;Shutting down&#39;</span>
</span><span class='line'>    <span class="n">launcher</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'>    <span class="c1"># Explicitly exit so busy Processor threads can&#39;t block</span>
</span><span class='line'>    <span class="c1"># process shutdown.</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;Bye!&quot;</span>
</span><span class='line'>    <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上的代码就是整个 Sidekiq 最顶层的信号处理的核心代码了，让我们慢慢分析！
首先，<code>self_read, self_write = IO.pipe</code> 创建了一个模拟管道的 IO 对象，并且同时返回这个 管道的一个写端以及一个读端，通过这两端，就可以实现对管道的读写了。需要注意的是，<code>IO.pipe</code> 创建的读端在读的时候不会自动生成 <code>EOF</code> 符，所以这就要求读时，写端是关闭的，而写时，读端是关闭的，一句话说，就是这样的管道不允许读写端同时打开。关于 <code>IO.pipe</code> 还有挺多细节跟需要注意的点，如果还需要了解，请阅读<a href="https://ruby-doc.org/core-2.3.1/IO.html#method-c-pipe">官方文档</a>。</p>

<p>上面说的管道本质上只是一个 IO 对象而已，暂时不用纠结太多，让我们接着往下读：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w(INT TERM USR1 USR2 TTIN)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sig</span><span class="o">|</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="nb">trap</span> <span class="n">sig</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">self_write</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="n">sig</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">ArgumentError</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Signal </span><span class="si">#{</span><span class="n">sig</span><span class="si">}</span><span class="s2"> not supported&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码就比较有意思了，最外层遍历了一个系统信号的数组，然后逐个信号进行监听（trap，或者叫捕捉？）。让我们聚焦在 <code>trap</code> 方法的调用跟其 block 上，查阅 <a href="https://ruby-doc.org/core-2.2.0/Signal.html#method-c-trap">Ruby 文档</a>，发现 <code>trap</code> 是 <code>Signal</code> 模块下的一个方法，<code>Signal</code> 主要是处理与系统信号有关的任务，然后 <code>trap</code> 的作用是：</p>

<blockquote><p>Specifies the handling of signals. The first parameter is a signal name (a string such as “SIGALRM”, “SIGUSR1”, and so on) or a signal number&hellip;</p></blockquote>

<p>所以，前面的那段代码的意思就很容易理解了，Sidekiq 注册了对 <code>INT</code>、<code>TERM</code>、<code>USR1</code>、<code>USR2</code>以及<code>TTIN</code>等系统信号的处理，而在进程收到这些信号时，就会执行 <code>self_write.puts(sig)</code>，也就是将收到的信号通过之前介绍的管道写端 <code>self_write</code> 记录下来。什么？只记录下来，那还得处理啊？！</p>

<p>稍安勿躁，让我们接着往下分析 <code>Sidekiq::CLI#run</code> 方法末尾的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">launcher</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="n">readable_io</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">[</span><span class="n">self_read</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">signal</span> <span class="o">=</span> <span class="n">readable_io</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>    <span class="n">handle_signal</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Interrupt</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s1">&#39;Shutting down&#39;</span>
</span><span class='line'>  <span class="n">launcher</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'>  <span class="c1"># Explicitly exit so busy Processor threads can&#39;t block</span>
</span><span class='line'>  <span class="c1"># process shutdown.</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;Bye!&quot;</span>
</span><span class='line'>  <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到没有，这里有个循环，循环控制条件里，<code>readable_io = IO.select([self_read])</code> 是从前面的管道的读端 <code>self_read</code> 阻塞地等待信号的到达。对于 <code>IO.select</code>，<a href="https://ruby-doc.org/core-2.3.1/IO.html#method-c-select">Ruby 官方文档</a>介绍如下：</p>

<blockquote><p>Calls select(2) system call. It monitors given arrays of IO objects, waits until one or more of IO objects are ready for reading, are ready for writing, and have pending exceptions respectively, and returns an array that contains arrays of those IO objects.</p></blockquote>

<p>所以这里就是说 Sidekiq 主线程首先负责执行完其他初始化工作，最后阻塞在信号等待以及处理。在其等到新的信号之后，进入上面代码展示的循环体：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">signal</span> <span class="o">=</span> <span class="n">readable_io</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="n">handle_signal</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里语法细节先不深究，我们看下这两行代码第一行是从前面说的管道中读取信号，并且将信号传递给 <code>handle_signal</code> 方法，让我们接着往下看 <code>handle_signal</code> 方法的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/cli.rb#L125-L153</span>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_signal</span><span class="p">(</span><span class="n">sig</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="s2">&quot;Got </span><span class="si">#{</span><span class="n">sig</span><span class="si">}</span><span class="s2"> signal&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">sig</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;INT&#39;</span>
</span><span class='line'>    <span class="c1"># Handle Ctrl-C in JRuby like MRI</span>
</span><span class='line'>    <span class="c1"># http://jira.codehaus.org/browse/JRUBY-4637</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">Interrupt</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;TERM&#39;</span>
</span><span class='line'>    <span class="c1"># Heroku sends TERM and then waits 10 seconds for process to exit.</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">Interrupt</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;USR1&#39;</span>
</span><span class='line'>    <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;Received USR1, no longer accepting new work&quot;</span>
</span><span class='line'>    <span class="n">launcher</span><span class="o">.</span><span class="n">quiet</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;USR2&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Sidekiq</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:logfile</span><span class="o">]</span>
</span><span class='line'>      <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;Received USR2, reopening log file&quot;</span>
</span><span class='line'>      <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Logging</span><span class="o">.</span><span class="n">reopen_logs</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;TTIN&#39;</span>
</span><span class='line'>    <span class="no">Thread</span><span class="o">.</span><span class="n">list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">thread</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;Thread TID-</span><span class="si">#{</span><span class="n">thread</span><span class="o">.</span><span class="n">object_id</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">36</span><span class="p">)</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">thread</span><span class="o">[</span><span class="s1">&#39;label&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">thread</span><span class="o">.</span><span class="n">backtrace</span>
</span><span class='line'>        <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span> <span class="n">thread</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;&lt;no backtrace available&gt;&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的代码挺长，但是一点都不难理解，我简单解释下就够了。当进程：</p>

<ol>
<li>收到 <code>TERM</code> 或者 <code>INT</code>信号时，直接抛出 <code>Interrupt</code> 中断；</li>
<li>收到 <code>USR1</code> 信号时，则通知 <code>launcher</code> 执行 <code>.quiet</code> 方法，Sidekiq 在这里进入 Quiet 模式（怎么进入？）；</li>
<li>收到 <code>USR2</code> 信号时，重新打开日志；</li>
<li>收到 <code>TTIN</code> 信号时，打印所有线程当前正在执行的代码列表。</li>
</ol>


<p>到此，一个信号从收到被存下，到被取出处理的大致过程就是这样的，至于具体的处理方式，我们下个章节详细展开。现在有一点需要补充的是，上面讲当 Sidekiq 收到 <code>TERM</code> 或者 <code>INT</code> 信号时，都会抛出 <code>Interrupt</code> 中断异常，那这个异常又是如何处理的呢？我们回过头去看刚才最开始的 <code>Sidekiq::CLI#run</code> 方法末尾的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">launcher</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="n">readable_io</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">[</span><span class="n">self_read</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">signal</span> <span class="o">=</span> <span class="n">readable_io</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>    <span class="n">handle_signal</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Interrupt</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s1">&#39;Shutting down&#39;</span>
</span><span class='line'>  <span class="n">launcher</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'>  <span class="c1"># Explicitly exit so busy Processor threads can&#39;t block</span>
</span><span class='line'>  <span class="c1"># process shutdown.</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;Bye!&quot;</span>
</span><span class='line'>  <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>原来是 <code>run</code> 方法在处理信号时，声明了 <code>rescue Interrupt</code>，捕捉了 <code>Interrupt</code> 中断异常，并且在异常处理时打印必要日志，同时执行 <code>launcher.stop</code> 通知各个线程停止工作，最后调用 <code>exit</code> 方法强制退出进程，到此，一个 Sidekiq 进程就彻底退出了。
但是问题又来了，信号处理的大致过程我是知道了，但是具体的 <code>launcher.quiet</code> 跟 <code>launcher.stop</code> 都干了些什么呢？</p>

<h3>Sidekiq::Launcher#quiet 源码探索</h3>

<p>老规矩，先上代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/launcher.rb#L32-L36</span>
</span><span class='line'><span class="k">def</span> <span class="nf">quiet</span>
</span><span class='line'>  <span class="vi">@done</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="vi">@manager</span><span class="o">.</span><span class="n">quiet</span>
</span><span class='line'>  <span class="vi">@poller</span><span class="o">.</span><span class="n">terminate</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码只有短短三行。 Launcher 对象首先设置自己的实例变量 <code>@done</code> 的值为 <code>true</code>，接着执行 <code>@manager.quiet</code> 以及 <code>@poller.terminate</code>。看方法命名上理解，应该是 Luancher 对象又将 quiet 的消息传递给了 <code>@manager</code> 即 <code>Sidekiq::Manager</code> 对象，同时通知 <code>@poller</code> 即 <code>Sidekiq::Scheduled::Poller</code> 对象结束工作。那到底是不是真的这样呢？让我们继续深挖！</p>

<h4>Sidekiq::Manager#quiet</h4>

<p>让我们来看看 <code>Sidekiq::Manager#quiet</code> 方法的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/manager.rb#L51-L58</span>
</span><span class='line'><span class="k">def</span> <span class="nf">quiet</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="vi">@done</span>
</span><span class='line'>  <span class="vi">@done</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="p">{</span> <span class="s2">&quot;Terminating quiet workers&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@workers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">terminate</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">fire_event</span><span class="p">(</span><span class="ss">:quiet</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码也很短，首先将 <code>Sidekiq::Manager</code> 对象自身的 <code>@done</code> 实例变量的值设置为 <code>true</code>，接着对其所管理的每一个 worker，都发出一个 <code>terminate</code> 消息。让我们接着往下看 worker 对象（<code>Sidekiq::Processor</code> 对象）的 <code>#terminate</code> 方法定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L42-L46</span>
</span><span class='line'><span class="k">def</span> <span class="nf">terminate</span><span class="p">(</span><span class="n">wait</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@done</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@thread</span>
</span><span class='line'>  <span class="vi">@thread</span><span class="o">.</span><span class="n">value</span> <span class="k">if</span> <span class="n">wait</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的代码依然保持了精短的特点！跟上一层逻辑一样，worker 在处理 <code>terminate</code> 时，同样设置自己的 <code>@done</code> 实例变量为 <code>true</code> 后返回，但是，如果其参数 <code>wait</code> 为 <code>true</code>，则会保持主线程等待，直到 <code>@thread</code> 线程退出（<code>@thread.value</code> 相当于执行 <code>@thread.join</code>并且返回线程的返回值，可参考 <a href="https://ruby-doc.org/core-2.2.0/Thread.html#method-i-value">Ruby 文档</a>）。</p>

<p>那么，这里就要问了，worker 设置 <code>@done</code> 为 true 是要干嘛？这里好像也没有做什么特别的事啊？！勿急，还记得上篇文章介绍 worker 运行时的核心代码吗？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L66-L77</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="vi">@done</span>
</span><span class='line'>      <span class="n">process_one</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_stopped</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Shutdown</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_stopped</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_died</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ex</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到了吧，<code>@done</code> 变量可是一个重要的开关，当 <code>@done</code> 为 <code>false</code> 时，worker 一直周而复始地从队列中取任务并且老老实实干活；而当 <code>@done</code> 为 <code>true</code> 时，worker 在处理完当前的任务之后，便不再执行新的任务，执行 <code>@msg.processor_stopped(self)</code> 通知 worker 管理器自己已经退出工作，最终 <code>#run</code> 方法返回。由于 <code>#run</code> 方法是在独立线程里执行的，所以当 <code>#run</code> 方法返回时，其所在的线程自然也就退出了。</p>

<p>那关于 worker 的 quiet 模式进入过程就是这么简单，通过一个共享变量 <code>@done</code> 便实现了对工作线程的控制。</p>

<h4>Sidekiq::Scheduled::Poller#terminate</h4>

<p>前面说到 <code>Sidekiq::Launcher#quiet</code> 执行时，先将消息传递给了 worker 管理器，随后执行了 <code>@poller.terminate</code>，那我们来看看 <code>#terminate</code> 方法的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L53-L61</span>
</span><span class='line'><span class="k">def</span> <span class="nf">terminate</span>
</span><span class='line'>  <span class="vi">@done</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@thread</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="vi">@thread</span>
</span><span class='line'>    <span class="vi">@thread</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="vi">@sleeper</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>又是如此简短的代码。poller 退出的逻辑跟 worker 退出的逻辑非常一致，都是同样先设置自己的 <code>@done</code> 实例变量的值为 <code>true</code>，接着等待线程 <code>@thread</code> 退出，最后 poller 返回。</p>

<p>那么，poller 的 <code>@done</code> 是不是也是用来控制线程退出呢？答案是肯定的！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L63-L73</span>
</span><span class='line'><span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>  <span class="vi">@thread</span> <span class="o">||=</span> <span class="n">safe_thread</span><span class="p">(</span><span class="s2">&quot;scheduler&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">initial_wait</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="vi">@done</span>
</span><span class='line'>      <span class="n">enqueue</span>
</span><span class='line'>      <span class="n">wait</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;Scheduler exiting...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>还记得上面这段代码吗？ poller 在每次将定时任务压回任务队列之后，等待一定时间，然后重新检查 <code>@done</code> 的值，如果为 <code>true</code>，则 poller 直接返回退出，因为 <code>#start</code> 方法里的循环体在新线程中执行，当循环结束时，线程自然也退出了。</p>

<h4>小结</h4>

<ol>
<li>当 Sidekiq 收到 <code>USR1</code> 系统信号时，Sidekiq 主线程向 <code>@launcher</code> 发送 <code>quiet</code> 消息，<code>@launcher</code> 又将消息传递给 <code>@manager</code> ，同时向 <code>@poller</code> 发出 <code>terminate</code> 消息；</li>
<li><code>@manager</code> 在收到 <code>quiet</code> 消息时，逐一对运行中的 worker 发送 <code>terminate</code> 消息，worker 收到消息后，设置自己的 <code>@done</code> 为 <code>true</code>，标识不再处理新任务，当前任务处理完成后退出线程；</li>
<li><code>@poller</code> 在收到 <code>terminate</code> 消息后，也是设置自己的 <code>@done</code> 为 <code>true</code>，在本次任务执行完毕后，线程也退出；</li>
<li>Sidekiq 进入 quiet 模式之后，所有未处理任务以及新任务都不再处理，直到 sidekiq 的下一次重启。</li>
</ol>


<h3>Sidekiq::Launcher#stop 源码探索</h3>

<p>前面介绍的是 Sidekiq 进入 quiet 模式的过程，那 Sidekiq 的停止过程又是怎样的呢？</p>

<p>让我们从 <code>Sidekiq::Launcher#stop</code> 方法开始寻找答案：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/launcher.rb#L41-L56</span>
</span><span class='line'><span class="k">def</span> <span class="nf">stop</span>
</span><span class='line'>  <span class="n">deadline</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="vi">@options</span><span class="o">[</span><span class="ss">:timeout</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@done</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="vi">@manager</span><span class="o">.</span><span class="n">quiet</span>
</span><span class='line'>  <span class="vi">@poller</span><span class="o">.</span><span class="n">terminate</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@manager</span><span class="o">.</span><span class="n">stop</span><span class="p">(</span><span class="n">deadline</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Requeue everything in case there was a worker who grabbed work while stopped</span>
</span><span class='line'>  <span class="c1"># This call is a no-op in Sidekiq but necessary for Sidekiq Pro.</span>
</span><span class='line'>  <span class="n">strategy</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@options</span><span class="o">[</span><span class="ss">:fetch</span><span class="o">]</span> <span class="o">||</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:BasicFetch</span><span class="p">)</span>
</span><span class='line'>  <span class="n">strategy</span><span class="o">.</span><span class="n">bulk_requeue</span><span class="p">(</span><span class="o">[]</span><span class="p">,</span> <span class="vi">@options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">clear_heartbeat</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，<code>Sidekiq::Launcher</code> 对象设定了一个强制退出的 <code>deadline</code>，时间是以当前时间加上配置的 <code>timeout</code>，这个时间<a href="https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq.rb#L23">默认是 8 秒</a>。</p>

<p>接着，设定对象本身的 <code>@done</code> 变量的值为 <code>true</code>，然后分别对 <code>@manager</code> 和 <code>@poller</code> 发送 <code>quiet</code> 和 <code>terminate</code> 消息，这个过程就是我们上面说的 <code>Sidekiq::Launcher#quiet</code> 的过程，所以，这里的代码主要是 Sidekiq 要确保退出前已经通知各个线程准备退出。</p>

<p>接下来的代码就比较重要了，我们先看这一行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@manager</span><span class="o">.</span><span class="n">stop</span><span class="p">(</span><span class="n">deadline</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在通知完 <code>@manager</code> 进入 quiet 模式之后，launcher 向 <code>@manager</code> 发送了 <code>stop</code> 消息，并且同时传递了 <code>deadline</code> 参数。让我们接着继续往下看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/manager.rb#L61-L83</span>
</span><span class='line'><span class="no">PAUSE_TIME</span> <span class="o">=</span> <span class="no">STDOUT</span><span class="o">.</span><span class="n">tty?</span> <span class="p">?</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">stop</span><span class="p">(</span><span class="n">deadline</span><span class="p">)</span>
</span><span class='line'>  <span class="n">quiet</span>
</span><span class='line'>  <span class="n">fire_event</span><span class="p">(</span><span class="ss">:shutdown</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># some of the shutdown events can be async,</span>
</span><span class='line'>  <span class="c1"># we don&#39;t have any way to know when they&#39;re done but</span>
</span><span class='line'>  <span class="c1"># give them a little time to take effect</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="no">PAUSE_TIME</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="vi">@workers</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="p">{</span> <span class="s2">&quot;Pausing to allow workers to finish...&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">remaining</span> <span class="o">=</span> <span class="n">deadline</span> <span class="o">-</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">remaining</span> <span class="o">&gt;</span> <span class="no">PAUSE_TIME</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="vi">@workers</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="no">PAUSE_TIME</span>
</span><span class='line'>    <span class="n">remaining</span> <span class="o">=</span> <span class="n">deadline</span> <span class="o">-</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="vi">@workers</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hard_shutdown</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，manager 首先调用了自身的 <code>quiet</code> 方法（这里就真的多此一举了，因为外层的 launcher 已经调用过一次了），然后 manager 执行 <code>sleep</code> 系统调用进入休眠，持续时间为 0.5 秒，休眠结束后检查所有 worker 是否已经都退出，如果退出，则直接返回，任务提前结束；如果仍有 worker 未退出，则检查当前时间是否接近强制退出的 deadline，如果不是，则重复“检查所有 worker 退出 &ndash; 休眠” 的过程，直到 deadline 来临，或者 worker 线程都已经全部退出。如果最后到达 deadline，仍有 worker 线程未退出，则最后执行 <code>hard_shutdown</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/manager.rb#L108-L135</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hard_shutdown</span>
</span><span class='line'>  <span class="n">cleanup</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="vi">@plock</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">cleanup</span> <span class="o">=</span> <span class="vi">@workers</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">cleanup</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">jobs</span> <span class="o">=</span> <span class="n">cleanup</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">.</span><span class="n">job</span> <span class="p">}</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ... other codes</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strategy</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@options</span><span class="o">[</span><span class="ss">:fetch</span><span class="o">]</span> <span class="o">||</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:BasicFetch</span><span class="p">)</span>
</span><span class='line'>    <span class="n">strategy</span><span class="o">.</span><span class="n">bulk_requeue</span><span class="p">(</span><span class="n">jobs</span><span class="p">,</span> <span class="vi">@options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cleanup</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">processor</span><span class="o">|</span>
</span><span class='line'>    <span class="n">processor</span><span class="o">.</span><span class="n">kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里 <code>hard_shutdown</code> 方法在执行时，首先克隆了当前仍未退出的 <code>@workers</code> 列表，接着获取每个 worker 当前正在处理的任务，将这些正在执行中的任务数据通过 <code>strategy.bulk_requeue(jobs, @options)</code> 重新写回队列，而最后对每一个 worker 发送 <code>kill</code> 消息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L48-L58</span>
</span><span class='line'><span class="k">def</span> <span class="nf">kill</span><span class="p">(</span><span class="n">wait</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@done</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@thread</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@thread</span><span class="o">.</span><span class="n">raise</span> <span class="o">::</span><span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Shutdown</span>
</span><span class='line'>  <span class="vi">@thread</span><span class="o">.</span><span class="n">value</span> <span class="k">if</span> <span class="n">wait</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>worker 在收到 <code>kill</code> 消息时，首先设置自己的 <code>@done</code> 为 <code>true</code>，最后向 worker 所关联的线程抛出 <code>::Sidekiq::Shutdown</code> 异常。让我们看看 worker 的线程又是如何处理异常的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L66-L77</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="vi">@done</span>
</span><span class='line'>      <span class="n">process_one</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_stopped</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Shutdown</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_stopped</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_died</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ex</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>又回到 worker 的 <code>run</code> 方法这里，可以看到，<code>run</code> 方法捕捉了 <code>Sidekiq::Shutdown</code> 异常，并且在处理异常时，只是执行 <code>@mgr.processor_stopped(self)</code>，通知 manager 自己已经退出，由于已经跳出正常流程，worker 的 <code>run</code> 方法返回，线程也因此得以退出。至此，worker 也都正常退出了。</p>

<h4>小结</h4>

<ol>
<li>launcher 在执行退出时，首先按照 quiet 的流程先通知各个线程准备退出；</li>
<li>接着 launcher 向 manager 下达 <code>stop</code> 指令，并且给出最后期限（<code>deadline</code>）；</li>
<li>manager 在给定的限时内，尽可能等待所有 worker 执行完自己退出，对于到达限时仍未退出的 worker，manager 备份了每个 worker 的当前任务，重新加入队列，确保任务至少完整执行一次，然后通过向线程抛出异常的方式，迫使 worker 的线程被动退出。</li>
</ol>


<h3>总结</h3>

<ol>
<li>Sidekiq 简单高效利用了系统信号，并且有比较清晰明了的信号处理过程；</li>
<li>Sidekiq 在信号处理的过程中，各个组件协调很有条理，消息逐级传递，而且对被强制停止的任务也有备份方案；</li>
<li>我们可以从 Sidekiq 的系统信号处理机制上借鉴不少东西，比如常用系统信号的分类处理等；</li>
<li>对于多线程的控制，通过共享变量以及异常的方式做到 <code>graceful</code> 以及 <code>hard</code> 两种方式的退出处理。</li>
<li>还有很多，一百个人心中有一百个哈姆莱特，同样一份代码，不同的人学习阅读，肯定收获不同，你可以在评论区留下你的感悟，跟看到这篇文章的人一起分享！</li>
</ol>


<h3>问题思考</h3>

<ol>
<li>为了尽可能确保所有 Sidekiq 的任务能够正常主动退出，所以在部署脚本中，都会尽可能早地让 Sidekiq 进入 quiet 模式，但是 Sidekiq 的 quiet 是不可逆的，所以一旦部署脚本中途失败，Sidekiq 得不到重启，将会一直保持 quiet 状态，如果长时间未重启，任务就会积压。所以，一般我都会在部署脚本中，额外捕捉部署脚本失败异常，然后主动执行 sidekiq 的重启。<strong>如果你的部署脚本中有涉及 Sidekiq 的，一定要注意检查部署失败是否会影响 Sidekiq 的状态</strong></li>
<li>虽然 Sidekiq 在强制退出当前长时间未退出的任务时，会将 job 的数据写回队列，等待重启后重新执行，那么这里就有个细节需要注意了，就是你的 job 必须是幂等的，否则就不能允许重新执行了。所以，请注意，<strong>如果你有需要长时间运行的 job，请注意检查其幂等性</strong>。</li>
</ol>


<p>好了，今天就写到这吧！仍然挺长一篇，啰嗦了。感谢看到这里！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sidekiq任务调度流程分析]]></title>
    <link href="http://Martin91.github.io/blog/articles/2016/10/29/sidekiqren-wu-diao-du-liu-cheng-fen-xi/"/>
    <updated>2016-10-29T16:32:28+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2016/10/29/sidekiqren-wu-diao-du-liu-cheng-fen-xi</id>
    <content type="html"><![CDATA[<p><a href="http://sidekiq.org/">sidekiq</a>是 Ruby 中一个非常优秀而且可靠的后台任务处理软件，其依赖 Redis 实现队列任务的增加、重试以及调度等。而 sidekiq 从启动到开始不断处理任务、定时任务以及失败任务的重试，都是如何调度的呢？遇到问题的时候，又该如何调优呢？</p>

<!-- MORE -->


<h3>注意</h3>

<ol>
<li>今天的分析所参考的 sidekiq 的源码对应版本是 4.2.3；</li>
<li>今天所讨论的内容，将主要围绕任务调度过程进行分析，无关细节将不赘述，如有需要，请自行翻阅 sidekiq 源码；</li>
<li>文章内容真的很长，请做好心理准备。<br/>
<img src="https://ruby-china-files.b0.upaiyun.com/photo/2016/0fc8f347a4c7cba67066b2527bdb8f94.png!large" alt="" /></li>
</ol>


<h3>你将了解到什么？</h3>

<ol>
<li>sidekiq 的任务调度机制：定时任务、重试任务的检查机制，队列任务的排队以及队列权重对处理优先级的影响；</li>
<li>sidekiq 的中间件机制以及在此基础上实现的任务重试机制。</li>
</ol>


<h2>先抛结论</h2>

<h3>时序图</h3>

<p>对于复杂的调用关系，我习惯用时序图帮助我理解其中各部分代码之间相互协作的关系（注意：为了避免太多细节造成阅读负担，我将参数传递以及返回值等冗杂过程去除了，只保留与任务调度相关的关键调用）：
<img src="http://Martin91.github.io/images/medias/sidekiq%20job%20dispatcher.png" alt="sidekiq 任务调度时序图" /></p>

<h3>人话</h3>

<p>Sidekiq 整个任务调度过程中依赖几个不同角色的代码共同协作，其分工如下：
<img src="https://ruby-china-files.b0.upaiyun.com/photo/2016/fe43bace416ba3bb7f7d77b397683bf4.png!large" alt="" /></p>

<h2>源码之旅 —— 启动</h2>

<p>当我们在执行 <code>sidekiq</code> 时，源码中的 <code>bin/sidekiq.rb</code> 文件便是第一个开始执行的文件，让我们看看<a href="https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/bin/sidekiq#L9-L12">里边的主要代码</a>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/bin/sidekiq#L9-L12</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">cli</span> <span class="o">=</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:CLI</span><span class="o">.</span><span class="n">instance</span>
</span><span class='line'>  <span class="n">cli</span><span class="o">.</span><span class="n">parse</span>
</span><span class='line'>  <span class="n">cli</span><span class="o">.</span><span class="n">run</span> <span class="c1"># &lt;===== 这边走</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>紧靠 <code>begin</code> 后边的两行代码首先创建 <code>Sidekiq::CLI</code> 类的一个实例，接着调用实例方法 <code>#parse</code> 解析 sidekiq 的配置参数，其中包括队列的配置、worker 数量的配置等，在此不展开了。接着实例方法 <code>#run</code> 将带着我们继续往下走，让我们继续看 <code>lib/sidekiq/cli.rb</code> 里边的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/cli.rb#L46-L106</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="c1"># 这里打印控制台欢迎信息、打印日志以及运行环境（不同 Rails 版本）加载等</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;sidekiq/launcher&#39;</span>
</span><span class='line'>  <span class="vi">@launcher</span> <span class="o">=</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Launcher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">launcher</span><span class="o">.</span><span class="n">run</span> <span class="c1"># &lt;===== 这边走</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 进程接收到的信号处理以及退出处理</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码主要是实例化了一个 <code>Sidekiq::Launcher</code> 的对象，紧随其后又调用了实例方法 <code>#run</code>，所以让我们继续顺藤摸瓜，看看 <code>Sidekiq::Launcher#run</code> 方法到底做了哪些事情？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/launcher.rb#L24-L28</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="vi">@thread</span> <span class="o">=</span> <span class="n">safe_thread</span><span class="p">(</span><span class="s2">&quot;heartbeat&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nb">method</span><span class="p">(</span><span class="ss">:start_heartbeat</span><span class="p">))</span>
</span><span class='line'>  <span class="vi">@poller</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="vi">@manager</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>#run</code> 方法首先通过 <code>safe_thread</code> 创建了一个新的线程，线程主要负责执行 <code>start_heartbeat</code> 方法的代码，从方法名称上，我们猜测其主要是心跳代码，负责定时检查 sidekiq 健康状态，跟之前一样，这里不往下挖，我们继续看后边的两行代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@poller</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="vi">@manager</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 <code>@poller</code> 跟 <code>@manager</code> 都是什么呢？让我们回头看一下，前面讲到 <code>lib/cli.rb</code> 的 <code>#run</code> 方法会负责创建 <code>Sidekiq::Launcher</code> 的实例，那让我们看下后者的 <code>initialize</code> 方法定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/launcher.rb#L17-L22</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@manager</span> <span class="o">=</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Manager</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@poller</span> <span class="o">=</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Scheduled</span><span class="o">::</span><span class="no">Poller</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="vi">@done</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@options</span> <span class="o">=</span> <span class="n">options</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，实际上，<code>@manager</code>是在创建 <code>Sidekiq::Launcher</code> 实例的过程中同步创建的 <code>Sidekiq::Manager</code> 的实例，同理，<code>@poller</code> 是同步创建的 <code>Sidekiq::Scheduled::Poller</code>的实例。那我们按照代码执行顺序，先看下 <code>@poller.start</code> 也就是 <code>Sidekiq::Scheduled::Poller#start</code> 方法的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L63-L73</span>
</span><span class='line'><span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>  <span class="vi">@thread</span> <span class="o">||=</span> <span class="n">safe_thread</span><span class="p">(</span><span class="s2">&quot;scheduler&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">initial_wait</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="vi">@done</span>
</span><span class='line'>      <span class="n">enqueue</span>
</span><span class='line'>      <span class="n">wait</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;Scheduler exiting...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里看到，<code>#start</code>方法也创建了一个线程，在线程里执行了两个部分代码：1. 初始化等待；2. 循环里的 <code>enqueue</code> 与 <code>wait</code>。这都是什么呢？</p>

<p><strong>注意</strong>: <code>#start</code> 方法在线程创建完成后就立刻返回了，至于 <code>#start</code> 方法里的逻辑，请移步后面章节“继续深挖 Sidekiq::Scheduled::Poller#start”作更深一步分析。这里，我们先继续接着看看 <code>#start</code> 方法返回后接下来执行的 <code>@manager.start</code> 方法又做了什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/manager.rb#L45-L49</span>
</span><span class='line'><span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>  <span class="vi">@workers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 <code>@workers</code> 又是什么？一个数组？怎样的数组？我们回顾下，前面说在创建 <code>Sidekiq::Launcher</code> 实例的过程中同步创建了 <code>Sidekiq::Manager</code> 的实例，让我们就看看 <code>Sidekiq::Manager</code> 的 <code>#initialize</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/manager.rb#L31-L43</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="p">{</span> <span class="n">options</span><span class="o">.</span><span class="n">inspect</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@options</span> <span class="o">=</span> <span class="n">options</span>
</span><span class='line'>  <span class="vi">@count</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:concurrency</span><span class="o">]</span> <span class="o">||</span> <span class="mi">25</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;Concurrency of </span><span class="si">#{</span><span class="vi">@count</span><span class="si">}</span><span class="s2"> is not supported&quot;</span> <span class="k">if</span> <span class="vi">@count</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@done</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@workers</span> <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="vi">@count</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@workers</span> <span class="o">&lt;&lt;</span> <span class="no">Processor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="vi">@plock</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在创建了 <code>Sidekiq::Manager</code> 的实例之后，又同步创建了多个 <code>Sidekiq::Processor</code> 的实例，实例的个数取决于 <code>options[:concurrency] || 25</code>，也就是配置的 <code>:concurrency</code> 的值，缺省值为 <code>25</code>。至此，我们知道，sidekiq 中的 worker 的数量就是在此其作用的，<code>Sidekiq::Manager</code> 按照配置的数量创建指定数量的 worker。
往回看刚才的 <code>#start</code> 方法中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/manager.rb#L46-L48</span>
</span><span class='line'><span class="vi">@workers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>简言之，就是 <code>Sidekiq::Manager</code> 在 <code>start</code> 的时候只做一件事：分别调用其管理的所有 worker 的 <code>#start</code> 方法，也就是 <code>Sidekiq::Processor#start</code>。继续往下走：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L60-L62</span>
</span><span class='line'><span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>  <span class="vi">@thread</span> <span class="o">||=</span> <span class="n">safe_thread</span><span class="p">(</span><span class="s2">&quot;processor&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nb">method</span><span class="p">(</span><span class="ss">:run</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>又是我们熟悉的 <code>safe_thread</code> 方法，同样是创建了一个新的线程，意味着每一个 worker 都是基于自己的一个新线程的，而这个线程里执行的代码是私有方法 <code>#run</code> 里的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L66-L77</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="vi">@done</span>
</span><span class='line'>      <span class="n">process_one</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_stopped</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Shutdown</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_stopped</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>    <span class="vi">@mgr</span><span class="o">.</span><span class="n">processor_died</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ex</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以发现，又是一个 while 循环！而这个循环体里只调用了一个 <code>#process_one</code> 实例方法，顾名思义，这里是说每个 worker 在没被结束之前，都重复每次处理一个新的任务，那这个 <code>#process_one</code> 里又做了什么呢？怎么决定该先做哪个任务呢？别急，请看后面章节“继续深挖 Sidekiq::Processor#process_one”。</p>

<h3>小结</h3>

<p>sidekiq 在启动后（此处可借文章开头的时序图辅助理解）：</p>

<ol>
<li>首先创建了 <code>Sidekiq::CLI</code> 的实例，并调用其 <code>run</code> 方法；</li>
<li><code>Sidekiq::CLI</code> 的实例在 <code>#run</code> 的过程中，创建了 <code>Sidekiq::Launcher</code> 的实例，并调用其 <code>run</code> 方法；</li>
<li><code>Sidekiq::Launcher</code> 的实例在创建后，同步创建了一个 <code>Sidekiq::Scheduled::Poller</code> 的实例以及 <code>Sidekiq::Manager</code> 的实例，而在其执行 <code>#run</code> 的过程中，则分别调用了这两个实例的 <code>start</code> 方法；</li>
<li><code>Sidekiq::Scheduled::Poller</code> 的实例在执行 <code>start</code> 过程中，创建了一个内部循环执行的线程，周而复始地执行 <code>enqueue</code> &ndash;> <code>wait</code>；</li>
<li><code>Sidekiq::Manager</code> 的实例在创建后，同步创建若干个指定的 worker，也就是 <code>Sidekiq::Processor</code> 的实例，并在执行 <code>start</code> 方法的过程中对每一个 worker 发起 <code>start</code> 调用；</li>
<li><code>Sidekiq::Processor</code> 实例在执行 <code>start</code> 方法的过程中创建了一个新的线程，新的线程里同样有一个 <code>while</code> 循环，反复执行 <code>process_one</code>。</li>
</ol>


<p>以上就是 Sidekiq 的主要启动过程，以下分别针对 <code>Sidekiq::Scheduled::Poller</code> 以及 <code>Sidekiq::Manager</code> 展开源码分析。</p>

<h2>定时任务拉取器的工作 Sidekiq::Scheduled::Poller#start</h2>

<p>经过前面较表层的代码分析，我们接下来继续展开 <code>Sidekiq::Scheduled::Poller#start</code> 方法的探索之旅，首先重温下其代码定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L63-L73</span>
</span><span class='line'><span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>  <span class="vi">@thread</span> <span class="o">||=</span> <span class="n">safe_thread</span><span class="p">(</span><span class="s2">&quot;scheduler&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">initial_wait</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="vi">@done</span>
</span><span class='line'>      <span class="n">enqueue</span>
</span><span class='line'>      <span class="n">wait</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">Sidekiq</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;Scheduler exiting...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，<code>#start</code> 方法的核心就是中间的 <code>while</code> 循环，在循环前面，执行了 <code>#initial_wait</code> 方法，让我们先看看这个方法到底是干些什么的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L133-L143</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initial_wait</span>
</span><span class='line'>  <span class="c1"># Have all processes sleep between 5-15 seconds.  10 seconds</span>
</span><span class='line'>  <span class="c1"># to give time for the heartbeat to register (if the poll interval is going to be calculated by the number</span>
</span><span class='line'>  <span class="c1"># of workers), and 5 random seconds to ensure they don&#39;t all hit Redis at the same time.</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="no">INITIAL_WAIT</span> <span class="k">unless</span> <span class="no">Sidekiq</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:poll_interval_average</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="nb">rand</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@sleeper</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Timeout</span><span class="p">:</span><span class="ss">:Error</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>结合注释理解，原来私有方法 <code>#initial_wait</code> 只是为了避免所有进程在后续逻辑中同时触发 Redis IO 而做的设计，如果对大型系统有过架构经验的童鞋就会明白，这里其实就是为了防止类似雪崩之类的系统故障出现。让当前进程随机等待一定范围的时间，从而就可以跟其他进程错开了。</p>

<p>在理解完 <code>initial_wait</code> 之后，我们接着看到循环体里的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L68-L69</span>
</span><span class='line'><span class="n">enqueue</span>
</span><span class='line'><span class="n">wait</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>enqueue</code>？干嘛呢？为什么是入队列呢？带着疑问往下看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L75-L86</span>
</span><span class='line'><span class="k">def</span> <span class="nf">enqueue</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="vi">@enq</span><span class="o">.</span><span class="n">enqueue_jobs</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里看到 <code>#enqueue</code> 代码非常简单，只是调用了实例变量 <code>@enq</code> 的 <code>#enqueue_jobs</code> 方法而已，那么，<code>@enq</code> 是什么类型的实例呢？它的 <code>#enqueue_jobs</code> 方法又做了什么呢？让我们回过头来看一遍 <code>Sidekiq::Scheduled::Poller</code> 的 <code>#initialize</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L45-L50</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="vi">@enq</span> <span class="o">=</span> <span class="p">(</span><span class="no">Sidekiq</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:scheduled_enq</span><span class="o">]</span> <span class="o">||</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Scheduled</span><span class="o">::</span><span class="no">Enq</span><span class="p">)</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="vi">@sleeper</span> <span class="o">=</span> <span class="ss">ConnectionPool</span><span class="p">:</span><span class="ss">:TimedStack</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>原来缺省情况下，<code>@enq</code> 就是 <code>Sidekiq::Scheduled::Enq</code> 的实例。而代码上看的话，sidekiq 支持用户通过 <code>:scheduled_enq</code> 配置项自定义 <code>@enq</code> 的类型，但是官方文档未对此参数提及以及说明，这里其实是一种策略模式的实现，用户自定义的类型必须实现 <code>enqueue_jobs</code> 方法。我估计，是 sidekiq pro 里边才会用到的配置项吧。</p>

<p>知道了 <code>@enq</code> 的类型后，让我们继续看下 <code>Sidekiq::Scheduled::Enq#enqueue_jobs</code> 方法的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L11-L33</span>
</span><span class='line'><span class="k">def</span> <span class="nf">enqueue_jobs</span><span class="p">(</span><span class="n">now</span><span class="o">=</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_f</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="n">sorted_sets</span><span class="o">=</span><span class="no">SETS</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># A job&#39;s &quot;score&quot; in Redis is the time at which it should be processed.</span>
</span><span class='line'>  <span class="c1"># Just check Redis for the set of jobs with a timestamp before now.</span>
</span><span class='line'>  <span class="no">Sidekiq</span><span class="o">.</span><span class="n">redis</span> <span class="k">do</span> <span class="o">|</span><span class="n">conn</span><span class="o">|</span>
</span><span class='line'>    <span class="n">sorted_sets</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sorted_set</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># Get the next item in the queue if it&#39;s score (time to execute) is &lt;= now.</span>
</span><span class='line'>      <span class="c1"># We need to go through the list one at a time to reduce the risk of something</span>
</span><span class='line'>      <span class="c1"># going wrong between the time jobs are popped from the scheduled queue and when</span>
</span><span class='line'>      <span class="c1"># they are pushed onto a work queue and losing the jobs.</span>
</span><span class='line'>      <span class="k">while</span> <span class="n">job</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">zrangebyscore</span><span class="p">(</span><span class="n">sorted_set</span><span class="p">,</span> <span class="s1">&#39;-inf&#39;</span><span class="o">.</span><span class="n">freeze</span><span class="p">,</span> <span class="n">now</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Pop item off the queue and add it to the work queue. If the job can&#39;t be popped from</span>
</span><span class='line'>        <span class="c1"># the queue, it&#39;s because another process already popped it so we can move on to the</span>
</span><span class='line'>        <span class="c1"># next one.</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">conn</span><span class="o">.</span><span class="n">zrem</span><span class="p">(</span><span class="n">sorted_set</span><span class="p">,</span> <span class="n">job</span><span class="p">)</span>
</span><span class='line'>          <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Sidekiq</span><span class="o">.</span><span class="n">load_json</span><span class="p">(</span><span class="n">job</span><span class="p">))</span>
</span><span class='line'>          <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Logging</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="p">{</span> <span class="s2">&quot;enqueued </span><span class="si">#{</span><span class="n">sorted_set</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">job</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实这里这个方法的寓意，通过代码里的注释都已经很明晰了，不过我觉得还是有几个点需要强调下。
首先，在无参数调用 <code>#enqueue_jobs</code> 方法时，定义中的参数 <code>now</code> 缺省为当前时间，而 <code>sorted_sets</code> 缺省为 <code>Sidekiq::Scheduled::SETS</code> 的值，其值定义为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L8</span>
</span><span class='line'><span class="no">SETS</span> <span class="o">=</span> <span class="sx">%w(retry schedule)</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是数组 <code>["retry", "schedule"]</code>，而这两个队列名称所对应的队列就是 sidekiq 的重试以及定时任务队列，在 sidekiq 里边，重试任务以及定时任务本质上都是 scheduled jobs，这两个队列使用了特殊的 Redis 的数据结构，进入队列的任务以其执行时间作为数据的 score，写入 Redis 之后按照 score 排序，也就是按任务的计划时间排序。</p>

<p>接着往下看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L14-L30</span>
</span><span class='line'><span class="no">Sidekiq</span><span class="o">.</span><span class="n">redis</span> <span class="k">do</span> <span class="o">|</span><span class="n">conn</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sorted_sets</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sorted_set</span><span class="o">|</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">job</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">zrangebyscore</span><span class="p">(</span><span class="n">sorted_set</span><span class="p">,</span> <span class="s1">&#39;-inf&#39;</span><span class="o">.</span><span class="n">freeze</span><span class="p">,</span> <span class="n">now</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">conn</span><span class="o">.</span><span class="n">zrem</span><span class="p">(</span><span class="n">sorted_set</span><span class="p">,</span> <span class="n">job</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Sidekiq</span><span class="o">.</span><span class="n">load_json</span><span class="p">(</span><span class="n">job</span><span class="p">))</span>
</span><span class='line'>        <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Logging</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="p">{</span> <span class="s2">&quot;enqueued </span><span class="si">#{</span><span class="n">sorted_set</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">job</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，sidekiq 分别针对 <code>"retry"</code> 和 <code>"schedule"</code> 队列做了一个循环，循环体里每次通过 Redis 的 <a href="http://redis.io/commands/ZRANGEBYSCORE"><code>ZRANGEBYSCORE</code></a>命令取出一个计划时间小于等于当前时间的任务，并且调用 <code>Sidekiq::Client</code> 的 <code>.push</code> 方法将此任务加到指定队列中（job 中包含队列名称等信息，在此不展开，有兴趣的同学请自行阅读 <code>Sidekiq::Client</code> 的代码）。</p>

<p>至此，可以明白，<code>enqueue_jobs</code> 就是分别从 <code>"retry"</code> 和 <code>"schedule"</code> 队列中取出已经到达计划时间的任务，将其一一加入原来队列。注意，定时任务以及重试任务的计划时间只是计划加进执行中队列的时间，并非执行时间，执行的时间就只能取决于队列的长度以及队列执行速度了。</p>

<p>接着往回点，继续看 <code>enqueue_jobs</code> 之后的 <code>wait</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L90-L100</span>
</span><span class='line'><span class="k">def</span> <span class="nf">wait</span>
</span><span class='line'>  <span class="vi">@sleeper</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">random_poll_interval</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Timeout</span><span class="p">:</span><span class="ss">:Error</span>
</span><span class='line'>  <span class="c1"># expected</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 <code>wait</code> 方法只是做一个休眠，休眠的实现依赖于 <code>@sleeper</code> 的 <code>#pop</code> 方法调用，回顾 <code>Sidekiq::Scheduled::Poller</code> 的 <code>#initialize</code> 方法的实现可以确认 <code>@sleeper</code> 是 <code>ConnectionPool::TimedStack</code> 的实例，而后者是 Ruby gem <a href="https://github.com/mperham/connection_pool/blob/master/lib/connection_pool/timed_stack.rb">connection_pool</a> 里的实现，其 <code>pop</code> 方法会阻塞当前代码的执行，直到有值返回或者到达指定的超时时间，这里 sidekiq 利用了其阻塞的特性，作为 <code>wait</code> 方法休眠器的实现。</p>

<p>而代码里的休眠时间则不是固定的，依赖 <code>#random_poll_interval</code> 方法的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L103-L105</span>
</span><span class='line'><span class="c1"># Calculates a random interval that is ±50% the desired average.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">random_poll_interval</span>
</span><span class='line'>  <span class="n">poll_interval_average</span> <span class="o">*</span> <span class="nb">rand</span> <span class="o">+</span> <span class="n">poll_interval_average</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实现依赖一个 <code>#poll_interval_average</code> 方法的返回值，顾名思义，这个方法将决定定时任务定期检查的平均时间周期。让我们继续深挖下去：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L107-L122</span>
</span><span class='line'><span class="c1"># We do our best to tune the poll interval to the size of the active Sidekiq</span>
</span><span class='line'><span class="c1"># cluster.  If you have 30 processes and poll every 15 seconds, that means one</span>
</span><span class='line'><span class="c1"># Sidekiq is checking Redis every 0.5 seconds - way too often for most people</span>
</span><span class='line'><span class="c1"># and really bad if the retry or scheduled sets are large.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Instead try to avoid polling more than once every 15 seconds.  If you have</span>
</span><span class='line'><span class="c1"># 30 Sidekiq processes, we&#39;ll poll every 30 * 15 or 450 seconds.</span>
</span><span class='line'><span class="c1"># To keep things statistically random, we&#39;ll sleep a random amount between</span>
</span><span class='line'><span class="c1"># 225 and 675 seconds for each poll or 450 seconds on average.  Otherwise restarting</span>
</span><span class='line'><span class="c1"># all your Sidekiq processes at the same time will lead to them all polling at</span>
</span><span class='line'><span class="c1"># the same time: the thundering herd problem.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># We only do this if poll_interval_average is unset (the default).</span>
</span><span class='line'><span class="k">def</span> <span class="nf">poll_interval_average</span>
</span><span class='line'>  <span class="no">Sidekiq</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:poll_interval_average</span><span class="o">]</span> <span class="o">||=</span> <span class="n">scaled_poll_interval</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法的重要性通过其几倍于代码的注释就可以看出来，大概意思是，sidekiq 为了避免在进程重启后，有大量的进程同时密集地访问 redis，所以设计了这个机制，就是每个进程对定时任务的检查都是按照一个公式来计算的，保证每个进程两次检查之间的平均休眠时间能够在一个范围内动态变化，从而将所有进程的 Redis IO 均匀错开。
从代码上看，sidekiq 的这个平均拉取时间支持配置项配置，但是目前也并没有在 wiki 上有所提及。而缺省情况下，其值由方法 <code>#scaled_poll_interval</code> 决定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L124-L131</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">scaled_poll_interval</span>
</span><span class='line'>  <span class="n">pcount</span> <span class="o">=</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:ProcessSet</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">pcount</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">pcount</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">pcount</span> <span class="o">*</span> <span class="no">Sidekiq</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:average_scheduled_poll_interval</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>正如前面一段代码的注释所说，缺省情况下，sidekiq 认为定时任务拉取器的平均休眠时间正是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sidekiq</span> <span class="err">进程数量</span> <span class="n">x</span> <span class="err">平均拉取时间</span> <span class="n">average_scheduled_poll_interval</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 <code>:average_scheduled_poll_interval</code> 的缺省配置是 15 秒：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/master/lib/sidekiq.rb#L25</span>
</span><span class='line'><span class="no">DEFAULTS</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">average_scheduled_poll_interval</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以回过头来，在没有相关自定义配置的情况下，假设你只开启了一个 sidekiq 进程，那么 sidekiq 的定时任务拉取器的拉取时间平均间隔为 1 x 15 = 15 秒，那按照上面的 <code>#random_poll_interval</code> 方法的定义，则实际每次拉取的时间间隔则是在 7.5 秒到 22.5 秒之间！</p>

<h3>小结</h3>

<p>从这个章节的分析，我们可以明白 Sidekiq 对定时任务和重试任务是一视同仁的，其处理流程都是：</p>

<ol>
<li>所有定时任务（包括重试任务，本质上重试任务也是定时的，后边会单独讲解）以其计划时间为 score，加入特殊的 <code>"retry"</code> 或 <code>"schedule"</code> 有序队列中；</li>
<li>sidekiq 的定时任务拉取器从 <code>"retry"</code> 和 <code>"schedule"</code> 队列中一一取出已到达计划时间的任务，将其加入该任务计划的队列中，后续的执行则跟其他普通队列中的任务一致；</li>
<li>拉取器休眠一定时间（<code>random_poll_interval</code>）后，从步骤 2 重新开始，周而复始。</li>
</ol>


<p>所以，定时任务的计划时间不是确切的任务时间！只是允许加回队列的时间，具体执行时间还得另外看队列长度以及队列处理速度！</p>

<h2>Sidekie worker 的秘密： Sidekiq::Processor#process_one</h2>

<p>前面我们分析过 sidekiq 的 worker 的核心代码就是在线程里循环执行 <code>#process_one</code> 方法，那么这个方法到底做了些什么啊？别急，现在就来一探究竟：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L79-L83</span>
</span><span class='line'><span class="k">def</span> <span class="nf">process_one</span>
</span><span class='line'>  <span class="vi">@job</span> <span class="o">=</span> <span class="n">fetch</span>
</span><span class='line'>  <span class="n">process</span><span class="p">(</span><span class="vi">@job</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@job</span>
</span><span class='line'>  <span class="vi">@job</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中，<code>#process_one</code> 先通过 <code>#fetch</code> 方法获取一个任务，当任务获取成功后，就将其作为参数调用 <code>#process</code> 方法，完成对任务的处理；如果没有获取到任务，则直接重新尝试获取新的任务。</p>

<p>首先让我们看看 <code>#fetch</code> 方法的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L96-L104</span>
</span><span class='line'><span class="k">def</span> <span class="nf">fetch</span>
</span><span class='line'>  <span class="n">j</span> <span class="o">=</span> <span class="n">get_one</span>         <span class="c1"># 吐槽一下这个 `j` 变量，命名真的不敢恭维，这个库就这里写得不雅</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="vi">@done</span>
</span><span class='line'>    <span class="n">j</span><span class="o">.</span><span class="n">requeue</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">j</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>#fetch</code> 方法通过 <code>#get_one</code> 方法从队列中获取任务，当获取到任务后，判断当前 worker 是否已经停止(<code>@done</code> 为 <code>true</code>)，是则将任务重新压回队列。</p>

<p>让我们接着看 <code>#get_one</code> 方法的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L85-L94</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_one</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">work</span> <span class="o">=</span> <span class="vi">@strategy</span><span class="o">.</span><span class="n">retrieve_work</span>
</span><span class='line'>    <span class="p">(</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="p">{</span> <span class="s2">&quot;Redis is online, </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="vi">@down</span><span class="si">}</span><span class="s2"> sec downtime&quot;</span> <span class="p">};</span> <span class="vi">@down</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@down</span>
</span><span class='line'>    <span class="n">work</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Shutdown</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>    <span class="n">handle_fetch_exception</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>核心代码则是 <code>work = @strategy.retrieve_work</code>，为了了解 <code>@strategy</code>，我们仍旧往回看<code>#initialize</code> 方法的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L32-L40</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">mgr</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="vi">@strategy</span> <span class="o">=</span> <span class="p">(</span><span class="n">mgr</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:fetch</span><span class="o">]</span> <span class="o">||</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:BasicFetch</span><span class="p">)</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mgr</span><span class="o">.</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>又是一个策略模式，缺省下，使用了 <code>Sidekiq::BasicFetch</code> 生成实例，并且通过实例变量 <code>@strategy</code> 引用。</p>

<p>回到前面的 <code>@strategy.retrieve_work</code>，让我们继续看看 <code>Sidekiq::BasicFetch#retrieve_work</code> 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/fetch.rb#L35-L38</span>
</span><span class='line'><span class="k">def</span> <span class="nf">retrieve_work</span>
</span><span class='line'>  <span class="n">work</span> <span class="o">=</span> <span class="no">Sidekiq</span><span class="o">.</span><span class="n">redis</span> <span class="p">{</span> <span class="o">|</span><span class="n">conn</span><span class="o">|</span> <span class="n">conn</span><span class="o">.</span><span class="n">brpop</span><span class="p">(</span><span class="o">*</span><span class="n">queues_cmd</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="no">UnitOfWork</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">work</span><span class="p">)</span> <span class="k">if</span> <span class="n">work</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，可以知道 <code>Sidekiq::BasicFetch</code> 的取任务逻辑比较直接，是通过 Redis 的 <a href="http://redis.io/commands/brpop"><code>BRPOP</code> 命令</a>从“所有队列”中阻塞地取出第一个任务：</p>

<blockquote><p>BRPOP is a blocking list pop primitive. It is the blocking version of RPOP because it blocks the connection when there are no elements to pop from any of the given lists. An element is popped from the tail of the first list that is non-empty, with the given keys being checked in the order that they are given.</p></blockquote>

<p>所以，理解了 <code>BRPOP</code> 命令的工作细节之后，我们把注意力缩放到 <code>#queues_cmd</code> 方法上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/fetch.rb#L40-L53</span>
</span><span class='line'><span class="k">def</span> <span class="nf">queues_cmd</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@strictly_ordered_queues</span>
</span><span class='line'>    <span class="vi">@queues</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">queues</span> <span class="o">=</span> <span class="vi">@queues</span><span class="o">.</span><span class="n">shuffle</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>    <span class="n">queues</span> <span class="o">&lt;&lt;</span> <span class="no">TIMEOUT</span>
</span><span class='line'>    <span class="n">queues</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，代码中检查了 <code>@strictly_ordered_queues</code> 这个实例变量的值，让我们回头看下这个变量的值的来源，也就是 <code>#initialize</code> 方法的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/d8f11c26518dbe967880f76fd23bb99e9d2411d5/lib/sidekiq/fetch.rb#L26-L33</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@strictly_ordered_queues</span> <span class="o">=</span> <span class="o">!!</span><span class="n">options</span><span class="o">[</span><span class="ss">:strict</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@queues</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:queues</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">q</span><span class="o">|</span> <span class="s2">&quot;queue:</span><span class="si">#{</span><span class="n">q</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@strictly_ordered_queues</span>
</span><span class='line'>      <span class="vi">@queues</span> <span class="o">=</span> <span class="vi">@queues</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>      <span class="vi">@queues</span> <span class="o">&lt;&lt;</span> <span class="no">TIMEOUT</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>缺省情况下，此值为 <code>false</code>。所以让我们看 <code>#queues_cmd</code> 方法的 <code>else</code> 分支里的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">queues</span> <span class="o">=</span> <span class="vi">@queues</span><span class="o">.</span><span class="n">shuffle</span><span class="o">.</span><span class="n">uniq</span>
</span></code></pre></td></tr></table></div></figure>


<p>而这里的 <code>@queues</code> 就是来自 <code>options[:queues]</code> 中的配置： <code>options[:queues].map { |q| "queue:#{q}" }</code>。那么，这个 <code>options[:queues]</code> 的值又是什么呢？
让我们一步一步沿着调用链上参数往回走：</p>

<ol>
<li><code>Sidekiq::BasicFetch.new</code> 的参数 <code>options</code> 来自 worker 在 <code>Sidekiq::Processor#initialize</code> 方法中的参数 <code>mgr</code> 的 <code>options</code> 属性；</li>
<li>worker 的 mgr 参数正是 <code>Sidekiq::Manager</code> 的实例，其 <code>options</code> 属性则是 <code>Sidekiq::Launcher</code> 创建 <code>Sidekiq::Manager</code> 实例时传入的 <code>options</code> 变量；</li>
<li>而 <code>Sidekiq::Launcher#initialize</code> 接收到的 <code>options</code> 变量则是更外层的 <code>Sidekiq::CLI</code> 的实例方法 <code>options</code> 的值；</li>
<li>而 <code>Sidekiq::CLI</code> 的实例的 <code>options</code> 则是在其接收到 <code>#parse</code> 调用时设置的。
为了节省篇幅，省略这里其中的太多调用栈，我们直接看最根源代码：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/cli.rb#L389-L399</span>
</span><span class='line'><span class="k">def</span> <span class="nf">parse_queues</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="n">queues_and_weights</span><span class="p">)</span>
</span><span class='line'>  <span class="n">queues_and_weights</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">queue_and_weight</span><span class="o">|</span> <span class="n">parse_queue</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="o">*</span><span class="n">queue_and_weight</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">parse_queue</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="o">[</span><span class="n">weight</span><span class="o">.</span><span class="n">to_i</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">max</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>   <span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:queues</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">q</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">opts</span><span class="o">[</span><span class="ss">:strict</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">weight</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，sidekiq 在解析 <code>:queues</code> 的相关配置时，按照每个队列以及其权重，生成了一个重复次数等于队列权重的队列的新数组，假设用户提供如下配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">:queues</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">myqueue</span><span class="p-Indicator">,</span> <span class="nv">2</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>则此处生成的 <code>options[:queues]</code> 则为 <code>["default", "myqueue", "myqueue"]</code>。所以，这里权重主要用于后边确定各个不同队列被处理到的优先权的比重。</p>

<p>了解了 <code>@queues</code> 的来源之后，我们回到最开始讨论的地方：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">queues</span> <span class="o">=</span> <span class="vi">@queues</span><span class="o">.</span><span class="n">shuffle</span><span class="o">.</span><span class="n">uniq</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是说，每次 worker 在请求新的任务时，sidekiq 都按照原来的 <code>@queues</code> 执行 <code>shuffle</code> 方法，而 <code>shuffle</code> 则表示将数组元素重新随机排序，亦即“洗牌”。结合前面的权重，那么每个队列洗牌后排在第一位的概率与其权重挂钩。最后的 <code>#uniq</code> 方法确保队列名称没有重复，避免 Redis 在执行 <code>BRPOP</code> 命令时重复检查同一队列。这里使用 <code>BRPOP</code> 还有个好处就是，加入当前面优先的队列里边没有任务时，可以依次将机会让给后面的队列。</p>

<p>而后边的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">queues</span> <span class="o">&lt;&lt;</span> <span class="no">TIMEOUT</span>
</span></code></pre></td></tr></table></div></figure>


<p>则是在命令末尾追加超时设定，即 Redis 的 <code>BRPOP</code> 命令最多阻塞 2 秒，超时则直接放弃。</p>

<p>了解了任务的获取之后，我们接着看 sidekiq 如何处理获取到的任务，回到 <code>retrieve_work</code> 的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/fetch.rb#L36-L37</span>
</span><span class='line'><span class="n">work</span> <span class="o">=</span> <span class="no">Sidekiq</span><span class="o">.</span><span class="n">redis</span> <span class="p">{</span> <span class="o">|</span><span class="n">conn</span><span class="o">|</span> <span class="n">conn</span><span class="o">.</span><span class="n">brpop</span><span class="p">(</span><span class="o">*</span><span class="n">queues_cmd</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="no">UnitOfWork</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">work</span><span class="p">)</span> <span class="k">if</span> <span class="n">work</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到在获取到任务之后，任务通过 <code>Sidekiq::BasicFetch::UnitOfWork</code> 结构体实例化后返回给调用方。</p>

<p>直接回到 <code>Sidekiq::Processor#process_one</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L79-L83</span>
</span><span class='line'><span class="k">def</span> <span class="nf">process_one</span>
</span><span class='line'>  <span class="vi">@job</span> <span class="o">=</span> <span class="n">fetch</span>
</span><span class='line'>  <span class="n">process</span><span class="p">(</span><span class="vi">@job</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@job</span>
</span><span class='line'>  <span class="vi">@job</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以明白，@job 就是返回的 <code>UnitOfWork</code> 实例，那么 <code>process(@job)</code> 会做些什么呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L118-L152</span>
</span><span class='line'><span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">work</span><span class="p">)</span>
</span><span class='line'>  <span class="n">jobstr</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="n">job</span>
</span><span class='line'>  <span class="n">queue</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="n">queue_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@reloader</span><span class="o">.</span><span class="n">call</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">ack</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">job</span> <span class="o">=</span> <span class="no">Sidekiq</span><span class="o">.</span><span class="n">load_json</span><span class="p">(</span><span class="n">jobstr</span><span class="p">)</span>
</span><span class='line'>      <span class="n">klass</span>  <span class="o">=</span> <span class="n">job</span><span class="o">[</span><span class="s1">&#39;class&#39;</span><span class="o">.</span><span class="n">freeze</span><span class="o">].</span><span class="n">constantize</span>
</span><span class='line'>      <span class="n">worker</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">worker</span><span class="o">.</span><span class="n">jid</span> <span class="o">=</span> <span class="n">job</span><span class="o">[</span><span class="s1">&#39;jid&#39;</span><span class="o">.</span><span class="n">freeze</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">stats</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">queue</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="no">Sidekiq</span><span class="o">.</span><span class="n">server_middleware</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">queue</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>          <span class="c1"># Only ack if we either attempted to start this job or</span>
</span><span class='line'>          <span class="c1"># successfully completed it. This prevents us from</span>
</span><span class='line'>          <span class="c1"># losing jobs if a middleware raises an exception before yielding</span>
</span><span class='line'>          <span class="n">ack</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>          <span class="n">execute_job</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">cloned</span><span class="p">(</span><span class="n">job</span><span class="o">[</span><span class="s1">&#39;args&#39;</span><span class="o">.</span><span class="n">freeze</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码中，sidekiq 从 <code>work</code> 中获取任务的相关信息，包括队列名称，任务对应的类型（<code>job['class'.freeze]</code>）、任务调用所需的参数等，根据这些信息重新实例化任务对象，并且将实例化的任务对象 <code>worker</code> 以及任务参数都传递给对 <code>execute_job</code> 的调用。让我们看看 <code>#execute_job</code> 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L154-L156</span>
</span><span class='line'><span class="k">def</span> <span class="nf">execute_job</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">cloned_args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">worker</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="o">*</span><span class="n">cloned_args</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到了吧？我们最熟悉的 <code>#perform</code> 方法！这下知道我们为什么需要在每个 sidekiq Worker 或者 ActiveJob 的 Job 类中定义这个方法了吧？因为这个方法就是最终任务执行时所需调用的方法，这就是约定！</p>

<p>至此，任务的调度过程就到此为止了，剩下的就是周而复始的重复了。</p>

<h3>小结</h3>

<p>经过上面的分析，我们可以明白 sidekiq 中 worker 的工作流程：
1. 按照所有队列以及其权重，每次重新排列待处理队列顺序，高权重的队列有更高的优先级；
2. 将重新排好的队列顺序传递给 Redis 的 BRPOP 命令，同时设置 2 秒超时；
3. sidekiq 将从队列中获取到的任务实例化，并且根据携带的参数调用了任务的 <code>#perform</code> 方法。</p>

<p>等等，上面都只是正常流程，那如果任务执行过程中出错了怎么办？？？重试的机制是如何运转的呢？</p>

<h2>重试机制：基于中间件的实现</h2>

<p><strong>注意：</strong>阅读本章节前，建议先阅读官方 Wiki 的 <a href="https://github.com/mperham/sidekiq/wiki/Error-Handling">Error Handling</a>。</p>

<p>细心的童鞋肯定发现了上面的 <code>Sidekiq::Processor#process</code> 方法中有个关键的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L131-L137</span>
</span><span class='line'><span class="no">Sidekiq</span><span class="o">.</span><span class="n">server_middleware</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="n">queue</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">execute_job</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">cloned</span><span class="p">(</span><span class="n">job</span><span class="o">[</span><span class="s1">&#39;args&#39;</span><span class="o">.</span><span class="n">freeze</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个 <code>server_middleware</code> 是什么呢？让我们来简单过一下吧：</p>

<p>全局搜索了代码，发现 <code>Sidekiq.server_middleware</code> 的来源是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq.rb#L140-L144</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">server_middleware</span>
</span><span class='line'>  <span class="vi">@server_chain</span> <span class="o">||=</span> <span class="n">default_server_middleware</span>
</span><span class='line'>  <span class="k">yield</span> <span class="vi">@server_chain</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="vi">@server_chain</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>缺省情况下，<code>.server_middleware</code> 依赖 <code>.default_server_middleware</code> 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq.rb#L146-L154</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">default_server_middleware</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Middleware</span><span class="p">:</span><span class="ss">:Chain</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="n">add</span> <span class="ss">Middleware</span><span class="p">:</span><span class="ss">:Server</span><span class="o">::</span><span class="no">Logging</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="n">add</span> <span class="ss">Middleware</span><span class="p">:</span><span class="ss">:Server</span><span class="o">::</span><span class="no">RetryJobs</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以明白 <code>Sidekiq.default_server_middleware</code> 返回一个 <code>Middleware::Chain</code> 实例，并且调用了其 <code>#add</code> 方法将 <code>Middleware::Server::Logging</code> 以及 <code>Middleware::Server::RetryJobs</code> 两个中间件加到中间件的 Chain 上。此中间件的实现以及实现类似 rackup，有兴趣的童鞋自行<a href="https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/middleware/chain.rb">阅读源码</a>，在此不展开，让我们直接跳到 <code>Middleware::Server::RetryJobs</code> 的 <code>call</code> 方法中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/middleware/server/retry_jobs.rb#L73-L84</span>
</span><span class='line'><span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Shutdown</span>
</span><span class='line'>  <span class="c1"># ignore, will be pushed back onto queue during hard_shutdown</span>
</span><span class='line'>  <span class="k">raise</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="c1"># ignore, will be pushed back onto queue during hard_shutdown</span>
</span><span class='line'>  <span class="k">raise</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Shutdown</span> <span class="k">if</span> <span class="n">exception_caused_by_shutdown?</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">raise</span> <span class="n">e</span> <span class="k">unless</span> <span class="n">msg</span><span class="o">[</span><span class="s1">&#39;retry&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">attempt_retry</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们聚焦方法的最后一行代码 <code>attempt_retry(worker, msg, queue, e)</code>，此处表示当执行中的任务出现异常时，除去停机的因素以及禁用了重试机制后，尝试进行下次重试运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/middleware/server/retry_jobs.rb#L88-L137</span>
</span><span class='line'><span class="k">def</span> <span class="nf">attempt_retry</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>
</span><span class='line'>  <span class="n">max_retry_attempts</span> <span class="o">=</span> <span class="n">retry_attempts_from</span><span class="p">(</span><span class="n">msg</span><span class="o">[</span><span class="s1">&#39;retry&#39;</span><span class="o">]</span><span class="p">,</span> <span class="vi">@max_retries</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">count</span> <span class="o">=</span> <span class="k">if</span> <span class="n">msg</span><span class="o">[</span><span class="s1">&#39;retry_count&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">[</span><span class="s1">&#39;retried_at&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">[</span><span class="s1">&#39;retry_count&#39;</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">[</span><span class="s1">&#39;failed_at&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">[</span><span class="s1">&#39;retry_count&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">max_retry_attempts</span>
</span><span class='line'>    <span class="n">delay</span> <span class="o">=</span> <span class="n">delay_for</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="p">{</span> <span class="s2">&quot;Failure! Retry </span><span class="si">#{</span><span class="n">count</span><span class="si">}</span><span class="s2"> in </span><span class="si">#{</span><span class="n">delay</span><span class="si">}</span><span class="s2"> seconds&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">retry_at</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_f</span> <span class="o">+</span> <span class="n">delay</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">=</span> <span class="no">Sidekiq</span><span class="o">.</span><span class="n">dump_json</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Sidekiq</span><span class="o">.</span><span class="n">redis</span> <span class="k">do</span> <span class="o">|</span><span class="n">conn</span><span class="o">|</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">zadd</span><span class="p">(</span><span class="s1">&#39;retry&#39;</span><span class="p">,</span> <span class="n">retry_at</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># Goodbye dear message, you (re)tried your best I&#39;m sure.</span>
</span><span class='line'>    <span class="n">retries_exhausted</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">raise</span> <span class="n">exception</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的代码中看出，sidekiq 在捕捉到异常后，首先检查此任务此前是否已经重试过，是的话，则在重试累计次数上加 1，更新最后重试时间；否则初始化重试累计次数为 0，设定初次失败时间。接着，sidekiq 检查重试累计次数是否超过限定最大重试次数，是的话则放弃重试，任务从此不再重试，进入 Dead 状态，sidekiq 抛出异常；否则计算任务下次重试时间，将任务按照计划的下次重试时间加到 <code>retry</code> 有序队列中，最后抛出异常。关于重试任务的检查跟执行，请阅读前面的相关章节，接下来我们主要分析 sidekiq 如何计算任务的下次重试时间 <code>delay</code>。</p>

<p>让我们展开对 <code>#delay_for</code> 方法的探索：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/middleware/server/retry_jobs.rb#L172-L174</span>
</span><span class='line'><span class="k">def</span> <span class="nf">delay_for</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>
</span><span class='line'>  <span class="n">worker</span><span class="o">.</span><span class="n">sidekiq_retry_in_block?</span> <span class="o">&amp;&amp;</span> <span class="n">retry_in</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span> <span class="o">||</span> <span class="n">seconds_to_delay</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先了解下 <code>worker.sidekiq_retry_in_block?</code> 的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/worker.rb#L32</span>
</span><span class='line'><span class="n">base</span><span class="o">.</span><span class="n">class_attribute</span> <span class="ss">:sidekiq_retry_in_block</span>
</span></code></pre></td></tr></table></div></figure>


<p>其定义了每个 Worker 类的 <code>sidekiq_retry_in_block</code> 属性，而其又可以通过 Worker 类的 <code>#sidekiq_retry_in</code> 方法完成赋值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/worker.rb#L96-L98</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sidekiq_retry_in</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">sidekiq_retry_in_block</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>回过头来，前面的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worker</span><span class="o">.</span><span class="n">sidekiq_retry_in_block?</span> <span class="o">&amp;&amp;</span> <span class="n">retry_in</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span> <span class="o">||</span> <span class="n">seconds_to_delay</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示当具体的 Worker 配置了 <code>:sidekiq_retry_in_block</code> 时，则直接使用这个配置的 block 执行的值作为失败任务下次重试的时间间隔；否则使用缺省的计算公式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/middleware/server/retry_jobs.rb#L177-L179</span>
</span><span class='line'><span class="k">def</span> <span class="nf">seconds_to_delay</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">count</span> <span class="o">**</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="mi">15</span> <span class="o">+</span> <span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>count</code> 为任务累计重试次数，从公式上看，随着失败重试次数的累计增加，任务的下次重试时间间隔也会指数式增长，按照官方文档说法：</p>

<blockquote><p>Sidekiq will retry failures with an exponential backoff using the formula (retry_count ** 4) + 15 + (rand(30) * (retry_count + 1)) (i.e. 15, 16, 31, 96, 271, &hellip; seconds + a random amount of time). It will perform 25 retries over approximately 21 days.</p></blockquote>

<p>更多失败任务重试的相关配置请看文档：<a href="https://github.com/mperham/sidekiq/wiki/Error-Handling#configuration">Error Handling: Configuration</a>。</p>

<h3>小结</h3>

<ol>
<li>sidekiq 在执行任务时，通过自行实现的中间件架构以及对应的简单的中间件，及时捕捉失败的任务，针对允许再次重试的任务，按失败次数计算新的重试时间，缺省为指数增长的时间间隔；</li>
<li>用户可以通过配置修改缺省的公式，也可以指定最大重试次数等。</li>
</ol>


<p><strong>注意</strong>：结合失败任务捕捉处理以及重试任务的检查，缺省情况下，一个首次失败任务下次重回队列（不是执行）的理论最大时间间隔大概是 67.5 秒！（固定的 15 秒 + 最大随机时间 30 秒 + 最大理论检查时间 22.5 秒）。所以，如果你的任务很重要，又需要尽快重试，就需要对几部分时间的相关配置参数进行调优了哦！在我自己的工作中，我针对某个队列任务设置的 <code>sidekiq_retry_in</code> 公式为线性时间，即1s、2s、&hellip;50s，然后在重试检查那里设置了 <code>:poll_interval_average</code> 为 5 秒，新的下次执行时间理论最大时间间隔就是 8.5 秒！不过这些配置需要慎重调整，综合考虑业务以及业务量，既要尽可能保证任务尽早处理完，又得保证 Redis 没被 IO 压垮。</p>

<h2>总结</h2>

<h3>关于 sidekiq 项目代码</h3>

<ol>
<li>sidekiq 的源码比较简洁，很少看到长方法定义，大部分方法都在几行之内，读的过程中非常舒服；</li>
<li>sidekiq 的注释也很充足，比较重要又比较核心的代码都有大量详细的注释跟例子，除此之外大部分重点在 Wiki 中都有提及，非常好的一份代码库；</li>
<li>sidekiq 将 Redis 的各种数据结构用得都恰到好处，可以通过 sidekiq 加深对 Redis 的印象以及学习到如何恰当高效地结合 Redis 实现业务逻辑；</li>
<li>正是因为 sidekiq 将 Redis 充分利用以及高度结合，我终于理解 sidekiq 的作者为什么表示 sidekiq 不考虑其他数据库了；</li>
<li>sidekiq 的代码没有太多花俏的代码，非常推荐各位童鞋仔细研读。</li>
</ol>


<h3>关于源码阅读</h3>

<ol>
<li>带着问题去阅读，效率通常很高；</li>
<li>读的过程中适当放弃无关细节，只追击与问题相关的线索；</li>
<li>有些文档中没有提及的配置项，往往都藏匿在代码之中；</li>
<li>只有充分了解了工具的运行机制，在遇到问题调优的时候才能得心应手。</li>
</ol>


<h3>最后</h3>

<p>如果你能从头看到这里，那么非常感谢你的时间，毕竟这篇文章确实不短，尽管我已经尽量去除无用的部分，一些代码也直接跳过了，但是系统得了解一个框架或者一个软件，确实也是很多细节。</p>

<p>这是今年第二篇博客，今年的产出远不比去年，然而去年的产出远不比千年，所以，可能这篇也是今年最后一篇了。洋洋洒洒几万字，从下午两三点写到现在，七个多小时，难得可以静下心来写这么多，哎，这两年心态太浮躁，技术路上，还是继续保持“stay foolish, stay hungry”的好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[嘿，小心你的双等号==]]></title>
    <link href="http://Martin91.github.io/blog/articles/2016/01/17/pay-attention-to-your-double-equals/"/>
    <updated>2016-01-17T01:40:48+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2016/01/17/pay-attention-to-your-double-equals</id>
    <content type="html"><![CDATA[<p>前两天在写代码的时候，突然收到警告说项目代码中存在 XSS 漏洞，遂立即根据报告的 URL 排查页面代码，虽然很快就修复了，而且同样问题的讨论两年前就有了，看<a href="https://ruby-china.org/topics/16633">RubyChina: 别用 raw 和 html_safe</a>，一般来说相对有经验的老鸟也应该都知道这个点，但是还是觉得有必要写出来，再次提醒一下其他小伙伴，避免踩坑。</p>

<!-- MORE -->


<h2>问题根源</h2>

<p>其中，在找到的漏洞出现的地方，都存在类似以下这样的 slim 代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">==</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>问题就出在双等号 <code>==</code> 上，因为在 <strong>slim</strong> 跟 <strong>ERB</strong> 模板（其他模板比如 HAML 之类的就不清楚了）中，双等号其实是 Rails 的 <code>raw</code> 这个 helper 方法的缩写，<a href="http://edgeguides.rubyonrails.org/active_support_core_extensions.html#output-safety">参考链接</a>：</p>

<blockquote><p>To insert something verbatim use the raw helper rather than calling html_safe:</p>

<pre><code>&lt;%= raw @cms.current_template %&gt; &lt;%# inserts @cms.current_template as is %&gt;
</code></pre>

<p>or, equivalently, use <code>&lt;%==</code>:</p>

<pre><code>&lt;%== @cms.current_template %&gt; &lt;%# inserts @cms.current_template as is %&gt;
</code></pre></blockquote>

<p>也就是说上面的代码等同于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">=</span><span class="n">raw</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>raw</code> 方法在 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw">Rails 文档</a>中的解释是这样子的：</p>

<blockquote><p>This method outputs without escaping a string. Since escaping tags is now default, this can be used when you don&rsquo;t want Rails to automatically escape tags. This is not recommended if the data is coming from the user&rsquo;s input.</p></blockquote>

<p>大概意思就是，这个方法将会跳过对传入的字符串进行标签过滤以及其他处理，直接将字符串输出到 HTML 中。<br/>
所以到现在原因就很清晰了，因为不小心在代码里多加了一个等号，变成了双等号，导致将会直接把用户的输入输出到待渲染的 HTML 中，在不自知的情况下留下了 XSS 漏洞。于是乎，修复方案仅需去掉一个等号即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">=</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，Rails 就能继续自动过滤输入的 <code>:account</code> 的参数并且自动过滤恶意内容了。</p>

<h2>raw、String#html_safe 以及 &lt;%== %></h2>

<p>在查看 <code>raw</code> 方法的文档时，顺便看了其源码，极其简单，只有一行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File actionview/lib/action_view/helpers/output_safety_helper.rb, line 16</span>
</span><span class='line'><span class="k">def</span> <span class="nf">raw</span><span class="p">(</span><span class="n">stringish</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stringish</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>raw</code> 只是先确保将 <code>stringish</code> 参数转化为字符串，然后调用了 <a href="http://api.rubyonrails.org/classes/String.html#method-i-html_safe"><code>String#html_safe</code></a> 方法而已。而且在 <code>String#html_safe</code> 的文档中，同样反复强调慎重使用这两个方法：</p>

<blockquote><p>It will be inserted into HTML with no additional escaping performed. It is your responsibilty to ensure that the string contains no malicious content. This method is equivalent to the <code>raw</code> helper in views.</p></blockquote>

<p>所以，可以总结一下，以下三种写法的代码都是等价的，都是不安全的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">==</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span>
</span><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">=</span><span class="n">raw</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">=</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">].</span><span class="n">html_safe</span>
</span></code></pre></td></tr></table></div></figure>


<p>那在切实需要输出包含 HTML 内容比如富文本编辑器编辑的内容时，如何保证安全？<br/>
方案很简单，只需要使用文档中推荐的 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize"><code>sanitize</code></a> helper 方法：</p>

<blockquote><ol>
<li>It is recommended that you use <code>sanitize</code> instead of this method(html_safe).</li>
<li>(#sanitize)Sanitizes HTML input, stripping all tags and attributes that aren&rsquo;t whitelisted.</li>
</ol>
</blockquote>

<p>或者使用一些其他第三方的 gem 用来做过滤处理。</p>

<h2>总结</h2>

<ol>
<li>不要使用双等号缩写的方式，以避免其他人（比如项目里的 Rails 新手）在不了解的情况下照着滥用；</li>
<li>尽可能不用 <code>raw</code> helper 或者 <code>String#html_safe</code> 方法，尽可能使用 <code>#sanitize</code>；</li>
<li>多借助工具进行自动扫描，比如 <a href="http://brakemanscanner.org/"><code>brakeman</code></a>，能够快速高效检测出包括 XSS 漏洞在内的多种安全隐患。</li>
</ol>


<h2>参考链接</h2>

<ol>
<li><a href="https://ruby-china.org/topics/16633">别用 raw 和 html_safe</a></li>
<li><a href="http://brakemanscanner.org/">BrakemanScanner</a></li>
<li><a href="http://guides.rubyonrails.org/active_support_core_extensions.html#safe-strings">Rails Guides: Safe Strings</a></li>
<li><a href="http://wiki.open.qq.com/wiki/Web%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E5%8F%8A%E4%BF%AE%E5%A4%8D#1.2_XSS.E6.BC.8F.E6.B4.9E">腾讯开放平台：XSS漏洞</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cross-site_scripting">Wikipedia: Cross-site scripting</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw">Rails API: #raw</a></li>
<li><a href="http://api.rubyonrails.org/classes/String.html#method-i-html_safe">Rails API: String#html_safe</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谨防 ActiveSupport::Cache::Store 缓存 nil 值]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/10/30/jin-fang-activesupport-cache-store-huan-cun-nil-zhi/"/>
    <updated>2015-10-30T20:48:41+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/10/30/jin-fang-activesupport-cache-store-huan-cun-nil-zhi</id>
    <content type="html"><![CDATA[<p>Rails 中的 <strong><a href="https://github.com/rails/rails/tree/master/activesupport">active_support</a></strong> 组件主要基于 Rails 需要提供了很多非常有用的基础工具以及对 Ruby 内置类进行扩展。其中的 cache 模块主要提供了 Rails 中底层缓存的定义以及简单实现。今天要跟大家探讨的是之前在使用此模块所遇到的一个坑，有兴趣学习其基本用法的可以点击以下两个链接：</p>

<ul>
<li><a href="http://guides.rubyonrails.org/caching_with_rails.html#activesupport-cache-store">Rails Guides: ActiveSupport::Cache::Store</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html">Rails API: ActiveSupport::Cache::Store</a></li>
</ul>


<!-- MORE -->


<h3>从 ActiveSupport::Cache::Store#fetch 聊起</h3>

<p>之前在实现一个需要从外部服务请求数据的功能时，处于性能考虑，我在代码中使用了缓存，并且设置缓存失效时间为 7 天，示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">read_external_service</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 这段代码稍微解释下：</span>
</span><span class='line'>  <span class="c1">#   当缓存命中时，则直接读取缓存，如果无期待缓存，则通过 HTTP 向外请求结果，并且将结果</span>
</span><span class='line'>  <span class="c1">#   缓存下来，这样子，当下次继续调用时，则可直接返回缓存内容，而无需重复向外请求</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="s1">&#39;example_cache_key_here&#39;</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;https://example.com/example/request/path&#39;</span>
</span><span class='line'>    <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码其实不复杂，核心代码就是使用了 <a href="http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html#method-i-fetch"><code>ActiveSupport::Cache::Store#fetch</code></a> 方法。</p>

<p>一切都很正常地运行着，直到有一天，线上系统不断报警，出错原因就是这段代码总是返回 <code>nil</code> ，而调用者又因为没有判断 <code>nil</code> 值，就会出现 <code>undefined method 'xxx' for nil:NilClass</code> 错误。在 debug 时，我尝试了直接调用外部服务接口，发现请求都有正确返回数据，不可能返回 <code>nil</code> 啊，难道是缓存了 <code>nil</code> 值？下面就直接通过代码验证一下！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;active_support&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Cache</span><span class="o">::</span><span class="no">MemoryStore</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="c1">#ActiveSupport::Cache::MemoryStore entries=0, size=0, options={}&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">read</span> <span class="ss">:nil_value</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">exist?</span> <span class="ss">:nil_value</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="ss">:nil_value</span> <span class="k">do</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="kp">nil</span>   <span class="c1"># this `nil` value will be cached</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">read</span> <span class="ss">:nil_value</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">exist?</span> <span class="ss">:nil_value</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>看吧， <code>fetch</code> 方法确实会缓存 <code>nil</code> 值（通过 <code>exist?</code> 方法可以判断是否缓存了指定的 key ），所以系统出错原因就清晰了：在某次代码执行中，我的缓存刚好失效了，所以系统向外部发送了请求，恰巧这时候外部系统因为故障或者其他可能原因，没有返回期待数据，导致代码中最终缓存了 <code>nil</code> 值，在接下来的时间里，虽然外部系统可能恢复了正确服务，可是这时候因为我们的系统已经缓存了 <code>nil</code>值，所以在每次调用时都返回缓存的 <code>nil</code>，而不是重新请求正确结果，导致最后不停的报错告警。</p>

<p>这里插播一句，通过后来仔细查阅文档，才发现文档里已经注明：</p>

<blockquote><p>Nil values can be cached.</p></blockquote>

<p><strong>╮(╯▽╰)╭ 怪我咯~</strong></p>

<h3>解决方案</h3>

<p>意识到这个问题之后，解决思路简单粗暴，就是在可能返回 <code>nil</code> 值的地方放弃写入缓存：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">read_external_service</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cache_key</span> <span class="o">=</span> <span class="s1">&#39;example_cache_key_here&#39;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 缓存命中，且内容不为 nil ，直接返回缓存内容</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span> <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 缓存失效，只能重新请求了~</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;https://example.com/example/request/path&#39;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 请求结果正确，写入缓存；否则，放弃之~~~</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cache_key</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span><span class="p">)</span> <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>呃~~~虽然解决问题了，可是，就为了告诉系统不要相信 <code>nil</code>，就写得这么繁琐，好么？好么？好么？</p>

<h3>踏上阅读源码之路</h3>

<p>我尝试搜索了 <code>#fetch</code> 方法是否有支持比如 <code>reject_nil</code> 这样的 option，可惜的是，没有！可是真的没有吗？我不信！看源码去！</p>

<p>首先还是拜访下 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L154"><code>ActiveSupport::Cache::Store</code></a> 这个类啦，它可是所有缓存实现类的抽象类，别问我抽象类是什么，就是它明明只说话不干活，但是其他干活的都得向它看齐！好啦，说人话，其实就是说，我们在调用 <code>Rails.cache.read</code>、<code>Rails.cache.fetch</code> 等读写方法时，这些方法都是在 <code>ActiveSupport::Cache::Store</code> 中定义的，但是它只定义逻辑，而实际底层的读写实现，则都是交由其各种子类实现的，比如前面的 <code>ActiveSupport::Cache::MemoryStore</code>。</p>

<p>首先让我们来看看 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L275"><code>fetch</code></a>方法的全部内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fetch</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>    <span class="n">options</span> <span class="o">=</span> <span class="n">merged_options</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">namespaced_key</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">instrument</span><span class="p">(</span><span class="ss">:read</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">payload</span><span class="o">|</span>
</span><span class='line'>      <span class="n">cached_entry</span> <span class="o">=</span> <span class="n">read_entry</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:force</span><span class="o">]</span>
</span><span class='line'>      <span class="n">payload</span><span class="o">[</span><span class="ss">:super_operation</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:fetch</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>      <span class="n">entry</span> <span class="o">=</span> <span class="n">handle_expired_entry</span><span class="p">(</span><span class="n">cached_entry</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">entry</span>
</span><span class='line'>        <span class="n">payload</span><span class="o">[</span><span class="ss">:hit</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>        <span class="n">get_entry_value</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">payload</span><span class="o">[</span><span class="ss">:hit</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>        <span class="n">save_block_result_to_cache</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">_name</span><span class="o">|</span> <span class="k">yield</span> <span class="n">_name</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">read</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从代码中可以看到，当 <code>#fetch</code> 方法调用时没有传递 block 的话，它本质上就是 <code>read</code> 方法的别名而已。而当调用时传递了 block 的话，即如我前面的示例代码，让我们把代码分开看下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cached_entry</span> <span class="o">=</span> <span class="n">read_entry</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:force</span><span class="o">]</span>
</span><span class='line'><span class="n">payload</span><span class="o">[</span><span class="ss">:super_operation</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:fetch</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'><span class="n">entry</span> <span class="o">=</span> <span class="n">handle_expired_entry</span><span class="p">(</span><span class="n">cached_entry</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>它首先判断是否设置了 <code>force</code> 选项，如果有，则不读取缓存，由此模拟缓存强制失效；如果未设置 <code>force</code> 选项或者该选项不等于 true value，则尝试读取缓存，并且调用 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L564-L578"><code>handle_expired_entry</code></a>判断缓存是否仍旧有效。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">entry</span>
</span><span class='line'>  <span class="n">payload</span><span class="o">[</span><span class="ss">:hit</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>  <span class="n">get_entry_value</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这三行代码，则是在缓存命中时，直接读取缓存内容并且返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">payload</span><span class="o">[</span><span class="ss">:hit</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>  <span class="n">save_block_result_to_cache</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">_name</span><span class="o">|</span> <span class="k">yield</span> <span class="n">_name</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>else</code> 的代码则表示，在缓存无命中时， <code>#fetch</code> 代码直接调用 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L585-L592"><code>#save_block_result_to_cache</code></a> 方法，并且向其传递了一个 block，这个 block 没有干别的事情，它只会执行我们传递给 <code>#fetch</code> 方法的 block，让我们接着往下看看相关的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">save_block_result_to_cache</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">instrument</span><span class="p">(</span><span class="ss">:generate</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">payload</span><span class="o">|</span>
</span><span class='line'>    <span class="k">yield</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，<code>#save_block_result_to_cache</code> 方法首先执行传递进来的代码块，实际上也就是我们期待在缓存失效时执行的代码，而在获得执行结果 <code>result</code> 后，方法通过调用 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L384-L391"><code>#write</code></a> 方法将结果写入缓存，最后将 <code>result</code> 返回。</p>

<p>通过上面的源码分析，我们可以知道，当缓存失效时，<code>#fetch</code> 方法会直接将其代码块中的代码的返回值<strong>不加判断</strong>地写入缓存，并且返回该返回值。这里，或许我们可以做点什么，来实现我们想要支持 <code>:reject_nil</code> 的需求？</p>

<h3>支持 <code>:reject_nil</code> option</h3>

<p>为了支持 <code>:reject_nil</code>，我们只需要在写入缓存前判断是否真的需要 <code>nil</code> 值即可，于是我们只需要在 <code>#save_block_result_to_cache</code> 中加入 <code>#write</code> 的前置条件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">save_block_result_to_cache</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">instrument</span><span class="p">(</span><span class="ss">:generate</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">payload</span><span class="o">|</span>
</span><span class='line'>    <span class="k">yield</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># options[:reject_nil] &amp;&amp; result.nil? 作为前置条件</span>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">unless</span> <span class="n">result</span><span class="o">.</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:reject_nil</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>话不多说，让我们来重新试验一番：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;active_support&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Cache</span><span class="o">::</span><span class="no">MemoryStore</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="c1">#ActiveSupport::Cache::MemoryStore entries=0, size=0, options={}&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="ss">:nil_key1</span> <span class="k">do</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">exist?</span> <span class="ss">:nil_key1</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="ss">:nil_key2</span><span class="p">,</span> <span class="n">reject_nil</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">exist?</span> <span class="ss">:nil_key2</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，当我们调用 <code>#fetch</code> 方法时，如果没有传递 <code>reject_nil: true</code>，则 <code>#fetch</code> 方法会默认缓存 <code>nil</code> 值；而如果我们设置 <code>reject_nil: true</code> 的话，则 <code>#fetch</code> 就会放弃写入 <code>nil</code> 值到缓存中。试验成功！！！</p>

<p>基于这样的实现，我的代码就又可以改为如下了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">read_external_service</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 所有改动只是加了一个 `reject_nil: true`，多方便，妈妈再也不用担心我掉到坑里去了</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="s1">&#39;example_cache_key_here&#39;</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">reject_nil</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;https://example.com/example/request/path&#39;</span>
</span><span class='line'>    <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>待会去给 Rails 提交 Pull Request 去 <strong>O(∩_∩)O~~</strong></p>

<h3>总结</h3>

<ul>
<li>缓存是好个东西，用得好能够让应用性能表现突飞猛进</li>
<li>要注意缓存写入的边界条件，要注意避免缓存了空值，但也并非所有空值都不能缓存（比如有些接口确实就是有可能返回空值嘛），具体看业务，没有绝对的要与不要，反正 <code>:reject_nil</code> 给你了，看你要不要</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 chinese_pinyin + friendly_id 为中文标题生成 slug]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/10/21/use-chinese-pinyin-and-friendly-id-to-generate-slugs/"/>
    <updated>2015-10-21T22:20:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/10/21/use-chinese-pinyin-and-friendly-id-to-generate-slugs</id>
    <content type="html"><![CDATA[<p>在许多项目中，我们可能都会遇到需要为数据生成 slug 的场景，这些场景类似于：</p>

<ul>
<li>基于商品名称生成 slug</li>
<li>基于文章标题生成 slug</li>
</ul>


<p>至于为什么需要生成 slug，而不是使用比如 Rails 中默认自增的主键也就是数据的 id，原因其实很简单：</p>

<ul>
<li>使用自增 id 容易暴露数据，比如通过订单 id 可能导致遍历所有订单，不信，你看这里就有个<a href="http://www.wooyun.org/bugs/wooyun-2015-0127301">例子</a></li>
<li>增加 URL 友好性，/products/18376 这样的链接肯定没有比 /products/apple-watch-gold 这样的链接更招人喜欢</li>
</ul>


<!-- MORE -->


<h3><a href="https://github.com/norman/friendly_id">friendly_id</a></h3>

<p>friendly_id 是用来生成 slug 的 ruby gem，假设我们有一个产品模型 <code>Product</code>，使用 friendly_id 为商品名称(<code>name</code>)生成 slug 的示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">friendly_id</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">use</span><span class="p">:</span> <span class="ss">:slugged</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码理论上来说已经完成我们所需要的工作了，但是如果 title 包含中文的话，生成的 slug 就有点类似 <code>30f175f4-1e56-4e3a-823d-a7c1a5d32b29</code> 这样的乱码了，实际上这个 slug 对应的原来的 title 是 <code>测试产品</code>。这样的 slug 虽然避免了自增 id 的弊端，但是却丧失了友好性。如果 slug 能够基于汉语拼音生成，岂不更好？</p>

<h3>自己控制 slug 生成方式</h3>

<p>阅读 <a href="https://github.com/norman/friendly_id/blob/master/lib/friendly_id/slugged.rb#L290-L292">friendly_id 的源码</a>可以找到以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">FriendlyId</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Slugged</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">normalize_friendly_id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">parameterize</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码便是 friendly_id 基于输入生成 slug 的核心代码，使用 ActiveSupport 扩展后的 <code>String</code> 类的 <a href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html#method-i-parameterize"><code>parameterize</code></a> 方法，此方法会将除了英文字母、数字、短横线以及下划线之外的字符转换为 <code>-</code>，所以不适用于中文的情况，我们需要<a href="https://github.com/norman/friendly_id/blob/master/lib/friendly_id/slugged.rb#L259-L261">重写该方法</a>，以满足我们的需求。</p>

<h3>中文拼音利器——<a href="https://github.com/flyerhzm/chinese_pinyin">chinese_pinyin</a></h3>

<p>中文生成中文拼音的工具，我选择了黄志敏先生写的 <code>chinese_pinyin</code> 这个 gem，推荐理由就是简单够用。</p>

<p>以下是单独使用这个 gem 时的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="no">Pinyin</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;中国人&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;zhong guo ren&quot;</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="no">Pinyin</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;Hello, 李雷&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;Hello  li lei&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>组装！！！</h3>

<p>根据 <a href="https://github.com/norman/friendly_id/blob/master/lib/friendly_id/slugged.rb#L259-L261">friendly_id 的注释</a>，如果你只需要为单独一个 model 定制 slug 的生成逻辑，那么建议你只在相关的 model 中定义同名方法即可。但是由于我是需要为多个 model 定制中文的 slug 生成逻辑，所以我选择了直接重定义 <code>FriendlyId::Slugged</code> 模块中的这个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/initializers/friendly_id/slugged.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">FriendlyId</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Slugged</span>
</span><span class='line'>    <span class="c1"># 重定义 friendly_id 方法，实现 slug 从中文到拼音，非中文不受影响</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">normalize_friendly_id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Pinyin</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span><span class="o">.</span><span class="n">parameterize</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的定义方式使得新的 <code>normalize_friendly_id</code> 方法对所有依赖 friendly_id 的代码都生效。</p>

<p>最后通过新的方法为我们的产品生成新的 slug，现在“测试产品”得到的 slug 变为 <code>ce-shi-chan-pin</code> 了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">slug</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>  <span class="c1"># 显式清空 slug, friendly_id 在 save 时会自动重新生成 slug</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后产品的链接已变为 <code>/products/ce-shi-chan-pin</code>，比起 <code>/products/30f175f4-1e56-4e3a-823d-a7c1a5d32b29</code>，可真是叫人心旷神怡。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL IN 查询，并通过 FIELD 函数按照查询条件顺序返回结果]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/09/13/mysql-in-query-and-order-by-field-function/"/>
    <updated>2015-09-13T20:24:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/09/13/mysql-in-query-and-order-by-field-function</id>
    <content type="html"><![CDATA[<p>我们都非常习惯通过 MySQL 的 <a href="https://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#function_in">IN 函数</a>来查询特定集合的数据，比如为了在 books 表中找出李雷、韩梅梅和安华写的书，我们可以有如下的 SQL（可以通过 <a href="http://sqlfiddle.com/#!9/1982d">SQL Fiddle</a>查看示例）：</p>

<!-- MORE -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">books</span> <span class="k">WHERE</span> <span class="o">`</span><span class="n">books</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">author</span><span class="o">`</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;李雷&#39;</span><span class="p">,</span><span class="s1">&#39;韩梅梅&#39;</span><span class="p">,</span><span class="s1">&#39;安华&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>数据库返回如下结果：</p>

<table>
<thead>
<tr>
<th></th>
<th> author </th>
<th>     title      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 安华   </td>
<td> 暴走漫画</td>
</tr>
<tr>
<td></td>
<td> 李雷   </td>
<td> 蓝色生死恋</td>
</tr>
<tr>
<td></td>
<td> 韩梅梅 </td>
<td> 冰与火之歌</td>
</tr>
<tr>
<td></td>
<td> 韩梅梅 </td>
<td> 天国的阶梯</td>
</tr>
<tr>
<td></td>
<td> 李雷   </td>
<td> 这个杀手不太冷</td>
</tr>
<tr>
<td></td>
<td> 韩梅梅 </td>
<td> 阿甘正传</td>
</tr>
</tbody>
</table>


<p>虽然这样确实能够返回所有李雷、韩梅梅和安华写过的书，但是返回的数据的排序方式是默认按照数据在数据库中的存储顺序，假如我们需要的返回结果是同时按照 IN 查询条件里边的参数顺序来排序呢？这个时候我们就需要利用到 MySQL <a href="https://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_field">FIELD</a> 这个函数了，FIELD 函数本来是 MySQL 提供用来查询某一个字符串在给定字符串元组中的索引位置的，比如这个官方例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">FIELD</span><span class="p">(</span><span class="s1">&#39;ej&#39;</span><span class="p">,</span> <span class="s1">&#39;Hej&#39;</span><span class="p">,</span> <span class="s1">&#39;ej&#39;</span><span class="p">,</span> <span class="s1">&#39;Heja&#39;</span><span class="p">,</span> <span class="s1">&#39;hej&#39;</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span> <span class="o">#</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果将其应用在 <a href="http://dev.mysql.com/doc/internals/en/optimizer-order-by-clauses.html"><code>ORDER BY</code></a> 排序条件中，就可以根据指定字段的值在给定参数列表中的索引数值，进而将查询结果按照参数列表排序了（示例请访问 <a href="http://sqlfiddle.com/#!9/46ccc/5">SQL Fiddle</a>）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">books</span> <span class="k">WHERE</span> <span class="o">`</span><span class="n">books</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">author</span><span class="o">`</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;李雷&#39;</span><span class="p">,</span><span class="s1">&#39;韩梅梅&#39;</span><span class="p">,</span><span class="s1">&#39;安华&#39;</span><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">FIELD</span><span class="p">(</span><span class="n">author</span><span class="p">,</span> <span class="s1">&#39;李雷&#39;</span><span class="p">,</span><span class="s1">&#39;韩梅梅&#39;</span><span class="p">,</span><span class="s1">&#39;安华&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一次，返回的结果则是：</p>

<table>
<thead>
<tr>
<th></th>
<th> author </th>
<th>     title      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>李雷 </td>
<td>  蓝色生死恋</td>
</tr>
<tr>
<td></td>
<td>李雷 </td>
<td>  这个杀手不太冷</td>
</tr>
<tr>
<td></td>
<td>韩梅梅 </td>
<td> 冰与火之歌</td>
</tr>
<tr>
<td></td>
<td>韩梅梅 </td>
<td> 天国的阶梯</td>
</tr>
<tr>
<td></td>
<td>韩梅梅 </td>
<td> 阿甘正传</td>
</tr>
<tr>
<td></td>
<td>安华 </td>
<td>  暴走漫画</td>
</tr>
</tbody>
</table>


<p>可以发现，这一次，我们得到的结果就是按照条件参数列表 <code>'李雷','韩梅梅','安华'</code> 进行排序后得到了。</p>

<h3>应用层面的思考</h3>

<h4>1. 兼容性</h4>

<p>本文提到的 <code>FIELD</code> 函数，毕竟只是 MySQL 数据库内置提供的一种函数，除非你非常明确你的项目就是只用 MySQL 数据库，否则，你的 SQL 代码在未来迁移到其他数据库的过程中就会遇到语法兼容性问题（只是 PostgreSQL 数据库不支持 FIELD）。</p>

<h4>2. 性能问题</h4>

<p>我们都知道，数据库在进行 <code>ORDER BY</code> 排序的时候，除非它是按照某个已经存在索引的键的值进行排序，否则数据库则需要通过计算 <code>ORDER BY</code> 中表达式的值并且按照查询结果建立新的临时表，这个过程会带来额外的时间开销跟内存开销，对数据库本身就是一种性能负担。这样的方式在单一数据库多个数据库客户端连接的时候，可能对数据库造成太大负担。</p>

<h4>3. 与应用层代码的结合</h4>

<p>尽管使用 <code>FIELD</code> 函数可能带来兼容性以及性能方面的隐患，但是 <code>FIELD</code> 的使用并非全是有损之处。</p>

<p>比如在与 Ruby 的 active_record 结合时，这种通过数据库直接完成排序等 SQL 语句可以方便我们构建 ActiveRecord::Relation 对象，因为我们不再需要先将查询结果集从内存中转为数组排序，再进行二次查询，可以帮助我们减少 <a href="https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/">N+1 查询问题</a>，后者也是常见的影响数据库服务器性能的现象之一。除此之外，这样的写法也可以有效地帮助我们简化代码，保持代码简洁。</p>

<p>但是在不需要对数据进行二次查询或者查询数据量太大的情况下，我反而建议可以通过 Ruby 的 <code>Array#sort_by</code> 方法对数据进行排序，这样的话，排序的任务就转移给了客户端代码，排序任务的压力就自然分散，减轻了服务器端的压力。</p>

<h3>总结</h3>

<ol>
<li>FIELD 函数结合 ORDER BY 可以帮助我们将查询结果集按照参数列表顺序返回；</li>
<li>FIELD 函数结合 ORDER BY 的方式可以帮助我们在数据库层面完成排序，简化了业务代码逻辑；</li>
<li>FIELD 函数结合 ORDER BY 可能带来 SQL 兼容性以及性能方面的问题；</li>
<li>在确认项目数据库不大可能为 MySQL
之外的数据库的前提下，查询数据量少或者需要保持业务代码简洁的场景下，我建议可以采用 FIELD 函数排序；而在数据量庞大的情况下，或者不大可能出现大量 N+1 查询的情况下，我建议可以采用先在数据库中查询数据集（只查询 IN 条件，不排序）再到内存中通过业务代码排序(比如 Ruby 的 <code>Array#sort_by</code>)的方式。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apdex——衡量服务器性能的标准]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/07/30/the-correct-way-to-metric-server-response-time/"/>
    <updated>2015-07-30T12:12:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/07/30/the-correct-way-to-metric-server-response-time</id>
    <content type="html"><![CDATA[<p>日常工作中，我们总是习惯于通过量化的标准去衡量我们对事物的评价，比如美食点评的星级、酒店的星级、每个个人的信用评分等等。而作为一个 Web 工程师，我们也总是在意于我们网站的性能，因为网站的性能会最直接地影响用户的体验。今天要介绍的就是一种同样能够帮助工程师对应用性能进行量化评估的标准 —— Apdex 。</p>

<!-- MORE -->


<p>Apdex 全称是 Application Performance Index，是由 Apdex 联盟开放的用于评估应用性能的工业标准。Apdex 联盟起源于 2004 年，由 <a href="http://apdex.org/bios.html">Peter Sevcik</a>发起。Apdex 标准从用户的角度出发，将对应用响应时间的表现，转为用户对于应用性能的可量化为范围为 0-1 的满意度评价。</p>

<h3>术语</h3>

<p>Apdex 定义了应用响应时间的最优门槛为T，另外根据应用响应时间结合 T 定义了三种不同的性能表现：</p>

<ul>
<li><strong>Satisfied（满意）</strong>：应用响应时间低于或等于 T（T 由性能评估人员根据预期性能要求确定），比如 T 为 1.5s，则一个耗时 1s 的响应结果则可以认为是 satisfied 的。</li>
<li><strong>Tolerating（可容忍）</strong>：应用响应时间大于 T，但同时小于或等于 4T。假设应用设定的 T 值为 1s，则 4 * 1 = 4 秒极为应用响应时间的容忍上限。</li>
<li><strong>Frustrated（烦躁期）</strong>：应用响应时间大于 4T。</li>
</ul>


<h3>公式</h3>

<p><code>Apdex<sub>t</sub> = (Satisfied Count + Tolerating Count / 2) / Total Samples</code></p>

<p>其中 <code>Satisfied Count</code> 就是指定采样时间内响应时间满足 <code>Satisfied</code> 要求的应用响应次数；而 <code>Tolerating Count</code> 就是指定采样时间内响应时间满足 <code>Tolerating</code> 要求的应用响应次数；最后的 <code>Total Samples</code> 就是总的采样次数总数。从公式可以看出，应用的 Apdex 得分与采样持续时间无关，与目标响应时间 T 相关（在采用总数固定的情况下，T 通过影响 <code>Satisfied Count</code>以及 <code>Tolerating Count</code>的值间接影响最终的得分）。</p>

<p>举例来说，假设你的应用期待的响应时间能够在 1000 ms 内，在 100 次采样中，有 50 次应用响应时间低于 1000 ms，30 次应用响应时间处于 1000 ms 到 4000 ms（ 4 * 1000ms） 之间，剩下 20 次响应时间长于 4000 ms，那么，该应用在 T = 1000ms 的情况下的 Apdex 值为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">50</span> <span class="o">+</span> <span class="mi">30</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">65</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Apdex 与 New Relic</h3>

<p>在 New Relic 的 APM（Application Performance Management）功能中，就提供了各个维度的 Apdex 统计结果，比如 Server Apdex(服务器性能评分)以及 Browser Apdex(终端用户性能体验评分)，如图：
<img src="http://7xj84e.com1.z0.glb.clouddn.com/blog/apdex%20overview.png" alt="Apdex 统计报表(T=0.5s)" /></p>

<p>其中可以看到应用服务器在 <code>T=0.5s</code> 的情况下得到的 Apdex 分数为 0.76，而 Browser（Browser 更多的是静态文件加载） 在 <code>T=7s</code>的情况下得到的 Apdex 分数为 0.94。结合两者可以判断，目前应用到达终端用户性能表现比较优秀（0.94，比较接近最大值 1），但是其中影响总体性能的瓶颈则在于服务器性能（仅仅只有 0.76 分），通过这样的数据，我们就能知道下一步性能优化的方向了——服务器端性能优化。</p>

<p>实际上，上面展示的只是 New Relic 的一种粒度比较粗的针对整个应用的 Apdex 报表，New Relic 同样提供了很多细粒度的 Apdex 数据，比如下面展示的针对具体的请求入口的 Apdex 报表：
<img src="http://7xj84e.com1.z0.glb.clouddn.com/blog/detailed_apdex.png" alt="具体请求入口的 Apdex" />
这样，通过逐步的细化，我们就可以进一步定位性能瓶颈，通过不断优化 Apdex 评分低的入口逐步提升应用整体性能体验。</p>

<h3>Apdex 与 T 值</h3>

<p>从公式中其实可以非常明显地看出来，T 值的选择对于最终的 Apdex 值也会有直接影响，越大的 T 值理论上来说会有更大的 Apdex 得分。比如我们可以在 New Relic 中将应用的 Apdex T 值改为 1s，以下是设定过程中看到的原来的值是 0.5s：
<img src="http://7xj84e.com1.z0.glb.clouddn.com/blog/apdex%20setting.png" alt="T 值设定" />
而改为 1s 后，跟上面同样的采样数据得到的新的平均 Apdex 值则高于原来的 0.76。
所以，在对应用性能进行评估的时候，首先需要确保结合应用具体情况设定一个相对合理的 T 值，太大的 T 值会导致过于乐观的 Apdex 值，但是太小的 T 值又会造成过于严苛的性能要求，最终可能导致过度的性能优化。
所以，总而言之，抛弃 T 值谈 Apdex 得分，都是耍流氓！</p>

<h3>Apdex 值一定要做到 1 吗？</h3>

<p>Apdex 公式计算能够得到的最大值就是 1，表示应用“可能”能够令所有用户对应用性能感到满意。但是， Apdex = 1 可以只是一个不断优化的方向，却不一定是要成为优化的目标，具体根据项目实际情况确定，毕竟，优化本身也需要成本投入，不需要为了极致的性能而投入过多的成本。</p>

<h3>参考资料以及推荐链接</h3>

<ol>
<li><a href="https://en.wikipedia.org/wiki/Apdex">Wikipedia: Apdex</a></li>
<li><a href="http://www.apdex.org/">Apdex 官网</a></li>
<li><a href="https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measuring-user-satisfaction#what-is">Apdex: Measuring user satisfaction</a></li>
<li><a href="https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/change-your-apdex-settings">New Relic: Change your Apdex settings</a></li>
<li><a href="https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/view-your-apdex-score">New Relic: View your Apdex score</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[申请以及集成 Stripe 的 Alipay 支付方案]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/03/28/shen-qing-yi-ji-ji-cheng-stripe-de-alipay-zhi-fu-fang-an/"/>
    <updated>2015-03-28T12:12:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/03/28/shen-qing-yi-ji-ji-cheng-stripe-de-alipay-zhi-fu-fang-an</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在一个项目需要支持人民币支付，并且客户要求希望能够收完款后的结算是用美元，所以就想到了去年 Stripe 宣布已经跟支付宝达成合作意向，所以经过一番咨询跟集成，终于把 Stripe 集成进来，并且启用了支付宝收款。这篇文章介绍功能申请以及集成的完整过程。</p>

<!-- More -->


<h2>功能申请</h2>

<ol>
<li><a href="https://dashboard.stripe.com/register">注册 Stripe 账号</a>；</li>
<li>加入 <a href="https://stripe.com/alipay">beta 用户组</a>，电子邮箱跟注册的 Stripe 账号保持一致；</li>
<li>联系 Stripe 员工<br/>
发送邮件到 <a href="mailto:support@stripe.com">support@stripe.com</a>，声明你需要在你的 Stripe 账号中启用 Alipay 的支付功能，并且提供你的 Stripe 账号。然后，等待回复就是，一般当天都能收到回复的。</li>
</ol>


<h2>集成</h2>

<h3>0. 时序图(可结合后边代码一起理解)</h3>

<p><img src="http://Martin91.github.io/images/medias/stripe_checkout_flow.png" alt="Stripe 支付流程" /></p>

<h3>1. 引入 stripe.js 以及初始化脚本</h3>

<p>假设支付页面上有个开始支付按钮，其 html 代码为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&#39;pay&#39;</span><span class="nt">&gt;</span>支付<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>请在 html 代码里合适的地方（比如<code>&lt;body&gt;</code>标签的底部）加载 stripe.js：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://checkout.stripe.com/checkout.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在脚本中初始化 stripe.js，并且注册支付按钮的事件监听函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">stripeHandler</span> <span class="o">=</span> <span class="nx">StripeCheckout</span><span class="p">.</span><span class="nx">configure</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;pk_test_xxxxxxxxxxxxxxxxxxxxxxxx&#39;</span><span class="p">,</span>  <span class="c1">// 可以查看 https://dashboard.stripe.com/account/apikeys</span>
</span><span class='line'>    <span class="nx">image</span><span class="o">:</span> <span class="s1">&#39;https://placehold.it/200x200&#39;</span><span class="p">,</span>    <span class="c1">// 显示在支付对话框的图片，可自己指定</span>
</span><span class='line'>    <span class="nx">alipay</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>                             <span class="c1">// 启用支付宝支付</span>
</span><span class='line'>    <span class="nx">token</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">token</span><span class="p">){</span>                   <span class="c1">// 用户填写完资料并且 Stripe 校验成功后的回调函数</span>
</span><span class='line'>      <span class="c1">// 此时应该提交 token.id 到后台，比如 http://example.com/orders/1?stripeToken={token.id}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#pay&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">stripeHandler</span><span class="p">.</span><span class="nx">open</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Business Name&#39;</span><span class="p">,</span>                  <span class="c1">// 收款方或商家名称，比如 Beansmile</span>
</span><span class='line'>      <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;商品描述内容&quot;</span><span class="p">,</span>              <span class="c1">// 待支付商品的描述</span>
</span><span class='line'>      <span class="nx">amount</span><span class="o">:</span> <span class="mi">50</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span>                       <span class="c1">// 支付金额，单位是“分”</span>
</span><span class='line'>      <span class="nx">opened</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>                     <span class="c1">// 支付对话框打开后的回调函数</span>
</span><span class='line'>        <span class="c1">// Do something</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 通过 token 请求收款</h3>

<p>服务器端是 Ruby on Rails 实现，所以在 Gemfile 中引入 Stripe 官方的 Ruby SDK(具体配置方法请自行查阅其 README)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="c1"># Stripe Ruby bindings</span>
</span><span class='line'><span class="c1"># https://github.com/stripe/stripe-ruby</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;stripe&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.20.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在 Controller action 中添加处理逻辑:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/orders_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">OrdersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="c1"># PUT /orders/:id</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># params:</span>
</span><span class='line'>  <span class="c1">#   id: 订单的 id</span>
</span><span class='line'>  <span class="c1">#   stripeToken: 客户端完成支付流程，在脚本的回调函数中会得到 `token.id`，</span>
</span><span class='line'>  <span class="c1">#                将其上传到 `stripeToken` 参数，服务器端用此 token 请求收款</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pay</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="ss">Stripe</span><span class="p">:</span><span class="ss">:Charge</span><span class="o">.</span><span class="n">create</span>  <span class="ss">amount</span><span class="p">:</span> <span class="n">order</span><span class="o">.</span><span class="n">amount_in_cents</span><span class="p">,</span>
</span><span class='line'>                                      <span class="ss">currency</span><span class="p">:</span> <span class="s1">&#39;USD&#39;</span><span class="p">,</span>
</span><span class='line'>                                      <span class="ss">source</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:stripeToken</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                      <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;订单描述&quot;</span>
</span><span class='line'>    <span class="n">order</span><span class="o">.</span><span class="n">update_attribute</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">:paid</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">order</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Stripe</span><span class="p">:</span><span class="ss">:InvalidRequestError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;由于</span><span class="si">#{</span><span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">，支付失败！&quot;</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">order</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 效果预览</h3>

<p><img src="http://Martin91.github.io/images/medias/stripe.gif" alt="stripe 支付流程演示" /></p>

<h2>其他</h2>

<ol>
<li>关于 Stripe 的沙盒机制<br/>
Stripe 为每个账号都提供了<a href="https://dashboard.stripe.com/account/apikeys">两组 keys</a>，一组 key 用于用于 live 环境，另一组是 test 环境，后者即是沙盒环境，而针对支付宝的沙盒，可用任意合法的邮箱账号进行测试，但验证码是固定的 123456，而身份证后 6 位是固定的 12345；</li>
<li>在功能申请过程中，一定要记得完成步骤3——联系 Stripe 开通 Alipay 支付功能。否则，会在支付的时候出现错误，错误信息示例为：<code>There is no token with ID atok_xxxxxxxxxxxxxxxxxxxxxxxx</code></li>
<li>实际开发中，请结合考虑用 stripe 提供的 <a href="https://dashboard.stripe.com/account/webhooks">webhook</a> 处理支付状态变迁；</li>
<li>此支付机制中，付款人可用人民币支付，但是 Stripe 会用美元跟商家（收款方）进行结算；</li>
<li>我总结了工作中集成过的其他几款支付网关，横向对比了各家的异同点，有兴趣的请戳：<a href="http://jianggaowang.com/slides/67">讲稿网：Payment Gateways</a></li>
</ol>


<h2>参考链接</h2>

<ol>
<li><a href="https://stripe.com/alipay">Stripe: Alipay 首页</a></li>
<li><a href="https://stripe.com/press/alipay">Stripe: Alipay FAQ</a></li>
<li><a href="https://stripe.com/docs/guides/alipay-beta">Stripe: Alipay 集成文档</a></li>
<li><a href="https://stripe.com/docs/checkout">Stripe: Checkout</a>，这部分的文档虽然没有提交 Alipay, 但是针对 Alipay 的集成，依旧适用。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do I fix Passenger application startup problem]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/01/10/how-do-i-fix-passenger-application-startup-problem/"/>
    <updated>2015-01-10T01:54:35+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/01/10/how-do-i-fix-passenger-application-startup-problem</id>
    <content type="html"><![CDATA[<p>Recent days I was working on deploying one of my Rails project on a complete new VPS. I had operated according to my experience for deploying sites before, but at the last step, after I have deployed the site, it always raised error message &ldquo;An error occurred while starting up the preloader: it did not write a startup response in time.&rdquo; when I try to visit the site. But, thanks to much hard work and retry, I found the source of the problem and finally fix it.</p>

<p>I will spend short time to show the main steps to resolve the problem. Let&rsquo;s GO!</p>

<!-- More -->


<h2>What Does The Error Message Mean?</h2>

<p>According the official wiki of <a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems">Passenger</a> on Github:</p>

<blockquote><p>Phusion Passenger reports this error if the application did not finish initializing within a time limit, or if it exited without sending Phusion Passenger a message that says &ldquo;I&rsquo;ve initialized successfully!&rdquo;</p></blockquote>

<p>That is, <strong>TWO</strong> things are expected that our application should:</p>

<ul>
<li>response a message to notify Passenger that itself is ready</li>
<li>response within a time limit</li>
</ul>


<p>otherwise Passenger will regard the application has been failed to startup and hence report error.</p>

<h2>Possible Causes Of Problem</h2>

<p>According <a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#possible-causes-of-problems">&ldquo;Possible causes of problems&rdquo;</a> section in the above wiki, we can conclude that there will be the below four causes:</p>

<ul>
<li><a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#stdout-redirection">Stdout redirection</a></li>
<li><a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#early-termination-in-bash">Early termination in bash</a></li>
<li><a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#application-startup-freeze">Application startup freeze</a></li>
<li><a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#server-too-busy">Server too busy</a></li>
</ul>


<h2>How I Refused Impossible Causes</h2>

<p>For the first possible cause, I can not find any STDOUT redirection in all my bash init scripts, so I trust there is no redirection in my server.</p>

<p>For the second one, I had tried to config to disable the loading of bashrc, but it still didn&rsquo;t work, so the second cause is not the cause.</p>

<p>The third one is impossible because I had built the application on other servers successfully, it seems that the cause was not from the application itself.</p>

<h2>The True Evil Found</h2>

<p>For the last one possible cause, I tried to run <code>top</code> command in shell of the server to determine if CPU or disk is busy, and I found a interesting thing: everytime I visit the site, the CPU usage was up to > 80%, even 90% &ndash; 100%, and after about one and half minutes, the browser rendered a rails &ldquo;Something went wrong&rdquo; page and meantime the CPU usage was back to &lt;10%.</p>

<p>I then check the explanation from Passenger again:</p>

<blockquote><p>It could also be that your server is so busy doing something (either CPU-wise or disk-wise) that it fails to start an application process within a reasonable amount of time. The default startup limit is 90 seconds.</p></blockquote>

<p>Aha, looks like the time limit is the evil. So I decided to try to change the timeout to a longer time, such as 300 seconds.</p>

<p>In my passenger module config file <code>/etc/apache2/mods-available/passenger.conf</code>(more details about why this file, see <a href="https://www.phusionpassenger.com/documentation/Users%20guide%20Apache.html#working_with_apache_conf">Passenger Guide: Working with the Apache configuration file</a>), I explicitly append:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PassengerStartTimeout 300</span></code></pre></td></tr></table></div></figure>


<p>After that, I tried to restart my Apache2 server and deploy again, and Passenger waited for startup within a longer time this time, and hence my application was lastly deployed successfully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 coding.net 上部署 Jekyll 博客]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/12/20/zai-coding-dot-netshang-bu-shu-jekyllbo-ke/"/>
    <updated>2014-12-20T12:59:30+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/12/20/zai-coding-dot-netshang-bu-shu-jekyllbo-ke</id>
    <content type="html"><![CDATA[<p>自从 <a href="https://ruby-china.org/topics/22858">coding 推出 PaaS 演示平台以及开放自定义域名</a>之后，很多人开始尝试在 coding 上部署自己的博客，其中就有 <a href="http://jekyllrb.com/">jekyll</a>，coding 上就有官方推荐的 <a href="https://coding.net/u/chenwj233/p/jekyll-demo/git">jekyll-demo</a>。但是因为这个 Demo 的 README 文档中只是简单介绍配置步骤而已，没有详细介绍原理以及灵活配置的地方，我在参照着迁移 jekyll 博客的过程中也遇到一些问题。现在写下文章，希望能够把原理理清楚。</p>

<!-- MORE -->


<p><strong>声明：</strong>这篇文章主要是对原来的 Demo 的几个主要思路做一个补充说明，而并非 coding 演示平台使用操作的详细教程，所以在有些细节上不一定覆盖到，建议最终的部署代码需要以官方推荐的 repo 里的代码为主。</p>

<h2>基本原理</h2>

<p>因为 Coding 提供的演示平台是通用的 PaaS 平台，并非类似 Github 或者 Gitcafe 的 Pages 服务，所以 jekyll 部署到演示平台需要解决三个问题：</p>

<p><strong>1. 运行问题</strong>，blog 需要以常规 Web 程序的方式运行；<br/>
<strong>2. 启动脚本</strong>，部署完成后自动启动服务器；<br/>
<strong>3. 自动更新</strong>，blog 内容更新 push 后能够自动生成新的页面。</p>

<p>第一个问题我们可以通过 <a href="https://github.com/adaoraul/rack-jekyll">rack-jekyll</a> 解决；第二个问题通过 Coding 约定的 <code>Procfile</code> 文件解决；第三个问题我们通过 Coding 的 <a href="https://coding.net/help/about_git/what_is_web_hook">Webhook</a> 结合脚本解决。</p>

<h3>1. 将 Jekyll 博客变为一个在线运行的 Rack 程序</h3>

<p>Jekyll 原本是一个用于生成静态博客站点的框架，但是为了能够在 coding 演示平台上直接运行 Jekyll 博客，我们需要一个能够在 <a href="http://unicorn.bogomips.org/">Unicorn</a> 服务器上运行 Jekyll 的方法。通过原来 coding 提供的 Demo，找到了一个叫 <a href="https://github.com/adaoraul/rack-jekyll">rack-jekyll</a> 的工具。</p>

<p>rack-jekyll 主要的功能如其介绍：</p>

<blockquote><p>Transform your Jekyll app into Rack application!</p></blockquote>

<p>就是将 Jekyll 作为 <a href="http://rack.github.io/">Rack</a> 程序运行。</p>

<p>首先，为了能够使用 rack-jekyll 以及 unicorn，我们在 <code>Gemfile</code> 文件(如果没有则直接新建即可)中加入:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rack-jekyll&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;unicorn&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两行，然后执行 <code>bundle install</code> 这样，我们的项目中就成功引入 <code>rack-jekyll</code> 以及 <code>unicorn</code> 了。</p>

<p>其次，因为 unicorn 默认会从项目根目录下的 <code>config.ru</code> 文件启动，再结合 <a href="https://github.com/adaoraul/rack-jekyll#how-to-use-it">rack-jekyll 的使用说明</a> ，我们在 jekyll 项目根目录下要创建一个包含以下内容的文件，并且名字就是 <code>config.ru</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config.ru</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rack/jekyll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Jekyll</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>到此，可以在命令行中 cd 到当前项目根目录，执行 <code>jekyll build</code> 生成站点，然后再执行 <code>unicorn</code> 从默认配置启动服务器，成功启动后，在浏览器中访问“ <a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a> ”就可以看到博客了。</p>

<h3>2. 添加用于 Coding 演示平台的启动脚本</h3>

<p>上面第一步只是解决了 Jekyll 能够以 Rack 方式运行的问题而已，但是为了部署到 coding 后，项目能够正常启动，我们还需要加入启动命令。</p>

<p>按照 <a href="http://docs.coding.io/ruby.html#%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4">coding 在关于 Ruby 部分的演示平台文档</a> 中的介绍得知，coding 会查找项目根目录下的 <code>Procfile</code> 文件，并将里边的内容作为启动命令，当此文件不存在时，则将默认使用一下启动命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">web</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rackup</span> <span class="n">config</span><span class="o">.</span><span class="n">ru</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照默认启动命令的格式，我们也可以写出以下 <code>Procfile</code> 文件，用于部署后从 unicorn 启动项目：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">web</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">unicorn</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span> <span class="o">-</span><span class="n">c</span> <span class="o">.</span><span class="n">/unicorn</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成前面两步之后，将代码 push 到 coding 上，再从演示平台一键部署的话，就应该可以成功启动 unicorn 服务器，并且能够访问你的 jekyll 博客了。但是，如果有了新文章呢？怎么自动在站点改动后重新生成站点？</p>

<h3>3. 使用 Webhook 在 push 后自动重新生成站点内容</h3>

<p>coding 为用户提供了 <a href="https://coding.net/help/about_git/what_is_web_hook">webhook</a> 功能，方便用户在 push 代码改动后自动 POST 请求你指定的 Web URL，你可以利用这个 URL 在程序后台完成程序的自动部署等操作。更多的介绍跟使用方法请参考 <a href="https://coding.net/help/about_git/about_web_hook_content">&ldquo;WebHook 的内容是什么？&rdquo;</a> 以及 <a href="https://coding.net/help/about_git/what_is_web_hook">&ldquo;WebHook 是什么？我该如何使用？&rdquo;</a>。</p>

<p>为了增加新的入口以接收 coding 的 Webhook 通知，我们可以在 <code>config.ru</code> 中添加新的路由，并且添加响应的处理脚本，这部分的内容我先直接拷贝官方推荐的 <a href="https://coding.net/u/chenwj233/p/jekyll-demo/git/raw/master/config.ru">jekyll demo 的代码</a> 后再做必要的解读：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config.ru</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler/setup&quot;</span>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:default</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">WEBHOOK_TOKEN</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;WEBHOOK_TOKEN&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Response</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">path_info</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">path_info</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=~</span> <span class="sr">/application\/json/</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">params</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">post?</span> <span class="o">&amp;&amp;</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;token&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="no">WEBHOOK_TOKEN</span>
</span><span class='line'>    <span class="n">repo_url</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;repository&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">repo_url</span>
</span><span class='line'>      <span class="n">archive_url</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">repo_url</span><span class="si">}</span><span class="s2">/archive/master&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;--&gt; updating to </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="s1">&#39;ref&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">..&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="sb">`jekyll build`</span>
</span><span class='line'>      <span class="sb">`rm -rf $HOME/_posts; curl -s -L -o $TMPDIR/archive.zip </span><span class="si">#{</span><span class="n">archive_url</span><span class="si">}</span><span class="sb">; unzip -qo -d $HOME $TMPDIR/archive.zip; cd $HOME; jekyll build`</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;--&gt; done.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;--&gt; error: no url field found in params: </span><span class="si">#{</span><span class="n">params</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;200&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Conetent-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/json;charset=utf-8&#39;</span> <span class="p">},</span> <span class="o">[</span><span class="s1">&#39;ok&#39;</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;403&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Conetent-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/json;charset=utf-8&#39;</span> <span class="p">},</span> <span class="o">[</span><span class="p">{</span> <span class="ss">error</span><span class="p">:</span> <span class="s1">&#39;webhook token mismatch!&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">to_json</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">jekyll</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Jekyll</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">auto</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:URLMap</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;/&#39;</span> <span class="o">=&gt;</span> <span class="n">jekyll</span><span class="p">,</span> <span class="s1">&#39;/_&#39;</span> <span class="o">=&gt;</span> <span class="n">app</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，程序在启动时，指定了两个路由入口分别指向不同的后台程序，其中 <code>'/'</code> 路径指向了我们的 <code>jekyll</code> 程序，这个跟原来的配置目的一致；而 <code>'/_'</code> 路径指向了 <code>app</code> 这个程序。</p>

<p>所以，当有外部向服务器发送了一个指向 &ldquo;/_&rdquo; 路径（比如“ <a href="http://test.codingapp.com/_">http://test.codingapp.com/_</a> ”）的请求时，服务器在内部启动了 <code>app</code> 的脚本。（注意，如果你希望使用别的路径名来配置 webhook 的入口，只要将下划线改成你需要的路径即可，比如： &ldquo;<a href="http://test.codingapp.com/deploy">http://test.codingapp.com/deploy</a>&#8220;）。</p>

<p><code>app</code> 脚本首先通过请求的 <code>Content-Type</code> 头信息判断请求格式，并据此从请求中提取请求参数赋给 <code>params</code> 变量；接着脚本验证请求的合法性，要求请求必须是 POST 方式，并且参数中的 <code>token</code> 参数的值必须与我们在 coding 后台中配置的 token 一致。</p>

<p>最后，在确认请求的合法性后，脚本先清空了当前部署的项目，然后下载解压指定分支的最新代码，并且进入项目根目录(<code>$HOME</code>环境变量)重新执行了 <code>jekyll build</code> 命令以重新生成静态站点，见代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sb">`rm -rf $HOME/_posts; curl -s -L -o $TMPDIR/archive.zip </span><span class="si">#{</span><span class="n">archive_url</span><span class="si">}</span><span class="sb">; unzip -qo -d $HOME $TMPDIR/archive.zip; cd $HOME; jekyll build`</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中值得一提的是，<code>archive_url</code>是在前面代码中拼接而来的链接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">archive_url</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">repo_url</span><span class="si">}</span><span class="s2">/archive/master&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>请注意其中硬编码的部分 <code>"archive/master"</code>，其中的 <code>master</code> 指定了是 <code>master</code> 分支上的代码压缩包的路径，所以假如你需要从 master 分支外的分支部署代码，请务必记得将 <code>master</code> 改为对应的分支名，比如我的部署分支是 <code>coding-pages</code>，那我这里的代码就应该改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">archive_url</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">repo_url</span><span class="si">}</span><span class="s2">/archive/coding-pages&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成 webhook 处理脚本后，需要重新 push 代码并且重新在演示平台部署一次，以使 <code>config.ru</code> 文件里的代码生效。至于如何配置 webhook ，直接参照 coding 的官方文档即可。</p>

<h2>总结</h2>

<p>以上的三点主要是对在 coding 上部署 jekyll 博客的关键思路的说明，通过这三点，相信你再去看原来的 <a href="https://coding.net/u/chenwj233/p/jekyll-demo/git/raw/125f456d2dfa4d324e320a57a78adf7fda89c93e/README.md">README</a> 的时候，应该就能很快理解为什么需要配置 <code>WEBHOOK_TOKEN</code> 环境变量以及为什么要配置 webhook 的 URL 为类似 &ldquo;<a href="http://host/_">http://host/_</a>&rdquo; 这么奇怪的链接了吧？除此之外，你也可以根据你的需要将脚本中的代码分支从 <code>master</code> 改为你所需要的目标分支了。<br/>
其实用 unicorn 运行 jekyll 项目的原理还是非常简单的，知道了这些之后，将你的已有 jekyll 项目直接迁移到 coding 甚至是其他 PaaS 平台上就不是件麻烦的事了。</p>

<h2>其他联想</h2>

<ol>
<li><a href="http://octopress.org/">Octopress</a> 博客是在 jekyll 的基础上封装而来的更高级也更方便的静态站点框架，所以按照上面的原理，将已有的 octopress 项目部署到 coding 平台上，应该也不是件难事。</li>
<li>Octopress 本身支持另外一种部署方式，就是本地生成静态站点之后，直接执行 <code>rake deploy</code> 将生成后的静态站点 push 到指定的远程 repo 或者指定的分支上，从这个角度考虑，其实也可以为 jekyll 实现类似的脚本，结合 coding 演示平台的 <a href="https://coding.net/help/project_demos/do_you_support_static_html_site">静态站点部署</a> ，就可以直接部署 jekyll 博客了，这种方式就省去了 unicorn 服务器等的配置了，也不需要再使用 webhook 重新生成站点了，而且纯静态站点的方案的最大优点就是，特别节约内存。这种方案只是构想，但是值得一试。如果哪位朋友尝试成功了，请记得在评论里回复一下。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RAILS中利用YAML文件完成数据对接]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/11/12/railszhong-jie-he-yamlwen-jian-wan-cheng-shu-ju-dui-jie/"/>
    <updated>2014-11-12T20:15:33+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/11/12/railszhong-jie-he-yamlwen-jian-wan-cheng-shu-ju-dui-jie</id>
    <content type="html"><![CDATA[<p>最近在做的Ruby on Rails项目中，需要将远程数据库中的数据对接到项目数据库中，但是远程的数据不仅数据表名跟字段命名奇葩，数据结构本身跟项目数据结构出入比较大，在数据导入过程中代码经历了几次重构，最后使用了YAML文件解决了基本数据<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>对接的问题。在此写一篇博文，我会尽量重现一路过来的代码变更，算是分享一下我的思考过程，也算是祭奠一下自己的苦逼岁月。</p>

<!-- More -->


<h3>假设以及数据结构预览</h3>

<p>因为远程数据库服务器为Oracle Server，我在项目中使用到了<a href="http://sequel.jeremyevans.net/">Sequel</a>这个gem用于连接数据库以及数据查询，因为数据库连接的内容不是本文的重点，故后续代码直接用<code>remote_database</code>表示数据库连接，而根据<a href="http://sequel.jeremyevans.net/rdoc/files/doc/dataset_basics_rdoc.html">Sequel的用法</a>，我们可以直接使用<code>remote_database[table_name]</code>连接到具体的表。</p>

<p>本次需要从远程数据库中导入的基本数据主要有学生信息表（包含班级名称）、老师信息表以及专业信息表，相应地，项目中（以下称为“本地”）也已经创建好了对应的model。其中学生信息表的表名以及部分数据字段的从本地到远程的映射关系如表所示：</p>

<table>
<thead>
<tr>
<th> 表名或字段名 </th>
<th>                 本地                 </th>
<th>      远程      </th>
</tr>
</thead>
<tbody>
<tr>
<td> 表名         </td>
<td> students                             </td>
<td> XSJBXX</td>
</tr>
<tr>
<td> 姓名         </td>
<td> name                                 </td>
<td> XM</td>
</tr>
<tr>
<td> 学号         </td>
<td> number                               </td>
<td> XH</td>
</tr>
<tr>
<td> 年级         </td>
<td> grade                                </td>
<td> NJ</td>
</tr>
<tr>
<td> 班级         </td>
<td> belongs_to :klass &nbsp;&nbsp;&nbsp; </td>
<td> BJMC(班级名称)</td>
</tr>
</tbody>
</table>


<p>老师信息表的表名以及部分数据字段的映射关系为：</p>

<table>
<thead>
<tr>
<th> 表名或字段名 </th>
<th>    本地   </th>
<th>   远程  </th>
</tr>
</thead>
<tbody>
<tr>
<td> 表名         </td>
<td> teachers  </td>
<td> JZGJBXX</td>
</tr>
<tr>
<td> 姓名         </td>
<td> name      </td>
<td> XM</td>
</tr>
<tr>
<td> 职称         </td>
<td> title     </td>
<td> ZC</td>
</tr>
<tr>
<td> 证件号码     </td>
<td> id_number </td>
<td> ZJHM</td>
</tr>
</tbody>
</table>


<h3>数据对接第一版：属性方法显式赋值</h3>

<p>第一个导入的数据表是学生的信息表，在最开始的时候，因为只需要考虑一张单独的表，所以代码写得简单粗暴，基本过程就是：根据需要的信息，查询对应的远程数据字段，然后使用属性方法赋值，最后保存接入的数据。对接方法的部分相关代码示例（为了方便阅读以及保护项目敏感信息，本文对项目中原有代码进行了缩减以及修改）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/student.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>    <span class="n">remote_students</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="ss">:xsjbxx</span><span class="o">].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">remote_students</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_student</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">grade</span> <span class="o">=</span> <span class="o">*</span><span class="n">remote_student</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="ss">:xm</span><span class="p">,</span> <span class="ss">:xh</span><span class="p">,</span> <span class="ss">:nj</span><span class="p">)</span>
</span><span class='line'>      <span class="n">class_name</span> <span class="o">=</span> <span class="n">remote_student</span><span class="o">[</span><span class="ss">:bjmc</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">klass</span> <span class="o">=</span> <span class="no">Klass</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="nb">name</span><span class="p">:</span> <span class="n">class_name</span>
</span><span class='line'>      <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="o">.</span><span class="n">find_by_create_by</span> <span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="ss">number</span><span class="p">:</span> <span class="n">number</span><span class="p">,</span>
</span><span class='line'>                                          <span class="ss">grade</span><span class="p">:</span> <span class="n">grade</span><span class="p">,</span>
</span><span class='line'>                                          <span class="ss">klass</span><span class="p">:</span> <span class="n">klass</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，呃，中规中矩，基本体现了各取所需的指导思想，但是总觉得怎么有点不好呢？</p>

<h3>数据对接第二版：通过本地到远程数据库字段映射关系自动匹配赋值</h3>

<p>在第一版的代码中，最大的坏味道在于：代码中需要把所有需要对接的字段列举出来，一旦遇到字段增删修改的情况，就需要同时更新原来的逻辑代码，太不灵活了，而且列举所有字段本身就是一件非常繁琐枯燥的事情。再假设字段很多的情况下，要从代码中一个个检查字段的名称，肯定是件多么可怕的事情啊。</p>

<p>那么怎么修改呢？用映射表！仔细观察第一段的代码，其实代码所做的工作如此简单：无非是先从远程数据中取值，然后赋值到本地数据对象的对应属性中，这种“本地-远程”的字段映射关系，不就是我们每天面对的“键-值”对的特征吗？那直接用一个<code>Hash</code>来保存这种对应关系不就好了。</p>

<p>话不多说，我们开始重构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/student.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">number</span><span class="p">:</span> <span class="ss">:xh</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="ss">:xm</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">age</span><span class="p">:</span> <span class="ss">:nj</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">klass</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">association_field_name</span><span class="p">:</span> <span class="ss">:name</span><span class="p">,</span>
</span><span class='line'>      <span class="n">remote_field_name</span><span class="p">:</span> <span class="ss">:bjmc</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>    <span class="n">remote_students</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="ss">:xsjbxx</span><span class="o">].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">remote_students</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_student</span><span class="o">|</span>
</span><span class='line'>      <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="o">.</span><span class="n">find_or_initialize_by</span> <span class="ss">xxx</span><span class="p">:</span> <span class="n">xxx</span>
</span><span class='line'>      <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># 逐一调用属性赋值方法，完成Student属性的赋值</span>
</span><span class='line'>        <span class="n">student</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">remote_student</span><span class="o">[</span><span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">[</span><span class="n">attribute</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">association_name</span><span class="p">,</span> <span class="n">association_fields_map</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># 把远程数据赋给对应的本地数据字段</span>
</span><span class='line'>        <span class="n">association_field_name</span> <span class="o">=</span> <span class="n">association_fields_map</span><span class="o">[</span><span class="ss">:association_field_name</span><span class="o">]</span>
</span><span class='line'>        <span class="n">remote_value</span> <span class="o">=</span> <span class="n">remote_student</span><span class="o">[</span><span class="n">association_fields_map</span><span class="o">[</span><span class="ss">:remote_field_name</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 查找或创建关联对象</span>
</span><span class='line'>        <span class="n">related_object</span> <span class="o">=</span>
</span><span class='line'>          <span class="n">reflect_on_association</span><span class="p">(</span><span class="n">association_name</span><span class="p">)</span><span class="o">.</span><span class="n">klass</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="n">association_field_name</span> <span class="o">=&gt;</span> <span class="n">remote_value</span>
</span><span class='line'>        <span class="c1"># 建立关联关系</span>
</span><span class='line'>        <span class="n">local_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">association_name</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">related_object</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">student</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的示例中，我们用常量<code>LOCAL_TO_REMOTE_FIELDS_MAP</code>保存<code>Student</code>这个model本身的字段跟远程数据字段的映射关系，这样我们就可以通过类似<code>LOCAL_TO_REMOTE_FIELDS_MAP[:number]</code>知道学生的姓名在远程数据表中对应的字段是<code>:xm</code>了。另外值得一提的是，我用了<code>LOCAL_TO_REMOTE_ASSOCIATION_MAP</code>这个常量保存了学生与班级关联关系，同时保存了关联的<code>klass</code>的数据字段映射关系。</p>

<p>在声明了必要的字段映射关系之后，我就在代码中遍历了每一个字段，并且通过对应的远程字段名称查找对应的数值，并且使用<code>send</code>方法调用了对象的属性赋值方法，将数据自动对接到本地数据对象上。</p>

<p>到目前为止，代码行数虽然反而多了，但是却实现了字段映射关系与逻辑代码的分离，我们可以独立管理映射关系了。以后就算需要加入新的对接字段，只要在<code>LOCAL_TO_REMOTE_FIELDS_MAP</code>中添加新的键值对就好了，甚至可以在<code>LOCAL_TO_REMOTE_ASSOCIATION_MAP</code>添加类似<code>klass</code>的简单关联关系的数据接入，而这些都无需修改逻辑代码。</p>

<h3>数据对接第三版：教职工信息也需要导入了，代码拷贝之旅开始了</h3>

<p>毫无疑问，如果只是满足于学生信息的对接，相信上面的代码也都够用了，代码的重构也可以告一段落了。</p>

<p>但是，前面说了，除了学生的信息，还有教职工的信息需要做接入，而且从最开始的<strong>假设以及数据结构预览</strong>一节看到，老师的数据结构跟学生的数据结构极其相似，所以，时间紧迫，我就直接拷贝代码然后简单删改了一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/teacher.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">number</span><span class="p">:</span> <span class="ss">:xh</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">title</span><span class="p">:</span> <span class="ss">:zc</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id_number</span><span class="p">:</span> <span class="ss">:zjhm</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>    <span class="n">remote_teachers</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="ss">:jzgjbxx</span><span class="o">].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">remote_teachers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_teacher</span><span class="o">|</span>
</span><span class='line'>      <span class="n">teacher</span> <span class="o">=</span> <span class="no">Teacher</span><span class="o">.</span><span class="n">find_or_initialize_by</span> <span class="ss">xxx</span><span class="p">:</span> <span class="n">xxx</span>
</span><span class='line'>      <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>        <span class="n">teacher</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">remote_teacher</span><span class="o">[</span><span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">[</span><span class="n">attribute</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">teacher</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意在上面的代码中，<code>Teacher</code>中比起<code>Student</code>，少了<code>LOCAL_TO_REMOTE_ASSOCIATION_MAP</code>常量，并且也删除了相关的代码，虽然代码已经满足需求了，教职工的数据导入也是无比顺利，可是面对着一堆重复的代码，真心别扭！</p>

<h3>数据对接第四版：抽象逻辑，代码共享</h3>

<p>其实我多少也是有代码洁癖的，大片Copy的代码岂不是搞得自己逼格好Low？怎么可以忍受，继续重构！</p>

<p>这一次重构其实就简单多了，把重复的核心逻辑代码抽取出来，然后放到一个专门负责数据对接的Concern里边，最后在需要此concern的model里include一下就行了。话不多说，上Concern代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/concerns/import_data_concern.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ImportDataConcern</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>      <span class="n">remote_objects</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="nb">self</span><span class="o">::</span><span class="no">REMOTE_TABLE_NAME</span><span class="o">].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">remote_objects</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_object</span><span class="o">|</span>
</span><span class='line'>        <span class="n">object</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">find_or_initialize_by</span> <span class="ss">xxx</span><span class="p">:</span> <span class="n">xxx</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">::</span><span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>          <span class="c1"># 逐一调用属性赋值方法，完成Student属性的赋值</span>
</span><span class='line'>          <span class="n">object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">remote_object</span><span class="o">[</span><span class="nb">self</span><span class="o">::</span><span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">[</span><span class="n">attribute</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">self</span><span class="o">::</span><span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">::</span><span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">association_name</span><span class="p">,</span> <span class="n">association_fields_map</span><span class="o">|</span>
</span><span class='line'>            <span class="c1"># 把远程数据赋给对应的本地数据字段</span>
</span><span class='line'>            <span class="n">association_field_name</span> <span class="o">=</span> <span class="n">association_fields_map</span><span class="o">[</span><span class="ss">:association_field_name</span><span class="o">]</span>
</span><span class='line'>            <span class="n">remote_value</span> <span class="o">=</span> <span class="n">remote_object</span><span class="o">[</span><span class="n">association_fields_map</span><span class="o">[</span><span class="ss">:remote_field_name</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1"># 查找或创建关联对象</span>
</span><span class='line'>            <span class="n">related_object</span> <span class="o">=</span>
</span><span class='line'>              <span class="n">reflect_on_association</span><span class="p">(</span><span class="n">association_name</span><span class="p">)</span><span class="o">.</span><span class="n">klass</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="n">association_field_name</span> <span class="o">=&gt;</span> <span class="n">remote_value</span>
</span><span class='line'>            <span class="c1"># 建立关联关系</span>
</span><span class='line'>            <span class="n">local_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">association_name</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">related_object</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">object</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，我们把核心对接逻辑抽了出来，并且抽象了远程数据表名的配置，另外通过<code>if self::LOCAL_TO_REMOTE_ASSOCIATION_MAP</code>兼容关联关系的导入。
为了在<code>Teacher</code>以及<code>Student</code>中正常运行上面的代码，我们还需要在这两个model分别include当前的concern，并且声明必要的常量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/student.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ImportDataConcern</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">REMOTE_TABLE_NAME</span> <span class="o">=</span> <span class="s1">&#39;XSJBXX&#39;</span>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">number</span><span class="p">:</span> <span class="ss">:xh</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="ss">:xm</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">age</span><span class="p">:</span> <span class="ss">:nj</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">klass</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">association_field_name</span><span class="p">:</span> <span class="ss">:name</span><span class="p">,</span>
</span><span class='line'>      <span class="n">remote_field_name</span><span class="p">:</span> <span class="ss">:bjmc</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/teacher.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ImportDataConcern</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">number</span><span class="p">:</span> <span class="ss">:xh</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">title</span><span class="p">:</span> <span class="ss">:zc</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id_number</span><span class="p">:</span> <span class="ss">:zjhm</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过上面的重构，原本重复的代码已经变成了一个Concern，通过Concern来管理独立的业务逻辑，也使得代码管理起来更方便了。但是，等等，我们的重构之旅还在继续！</p>

<h3>数据对接第五版：砍掉恶心的常量，使用YAML配置映射关系</h3>

<p>当时在写代码的过程中，我就一直感觉一大堆的常量令人无法直视，但是，如果不用常量，我还能怎么做？尽管前面两个表的数据导入任务完成了，我还是纠结于代码中那恶心死了的常量（实际上，我当时写的常量比你们现在看到的更多，文章中的只不过是示例）。而庆幸的是，那天脑洞一开：“这些映射关系本质上不就是一堆配置信息吗？而我在代码中的常量也就是用Hash存储的，那用YAML文件不就刚好了吗?”。是啊，像<code>config/database.yml</code>这类的文件，一直以来都是用于保存配置信息的啊，一个是符合Rails的使用习惯，另一个也确实符合数据结构的要求。Awesome，这就开始动工。</p>

<p>首先第一件事，我就把那些常量搬到了yaml文件中，并且放在了项目的<code>config/</code>目录下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_unique_field_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">number</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">models</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">student</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">remote_table_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">xsjbxx</span>
</span><span class='line'>    <span class="l-Scalar-Plain">local_to_remote_fields_map</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">number</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">xh</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">xm</span>
</span><span class='line'>      <span class="l-Scalar-Plain">grade</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nj</span>
</span><span class='line'>    <span class="l-Scalar-Plain">local_to_remote_association_map</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">klass</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">association_field_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name</span>
</span><span class='line'>        <span class="l-Scalar-Plain">remote_field_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bjmc</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">teacher</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">remote_table_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jzgjbxx</span>
</span><span class='line'>    <span class="l-Scalar-Plain">local_to_remote_fields_map</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">xm</span>
</span><span class='line'>      <span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zc</span>
</span><span class='line'>      <span class="l-Scalar-Plain">id_number</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zjhm</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置好了yaml，那么又要如何方便地读取配置信息呢？我的方法是在<code>config/iniitializers/</code>目录下新建了一个initializer，主要用于在项目启动时加载配置信息，关键代码段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">RemoteDatabase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">fields_map</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@fields_map</span> <span class="k">if</span> <span class="vi">@fields_map</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@fields_map</span> <span class="o">||=</span>
</span><span class='line'>      <span class="ss">YAML</span><span class="p">:</span><span class="ss">:load_file</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="s1">&#39;local_to_remote_oracle_database_map.yml&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，以后只要使用<code>RemoteDatabase.fields_map</code>就能读取到所有数据字段映射关系了！</p>

<p>万事俱备之后，我最后需要做的事情就是把Concern中的常量替换为从YAML中读取到的配置就好了，重构后的代码为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ImportDataConcern</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">importing_fields_map</span>
</span><span class='line'>      <span class="k">return</span> <span class="vi">@fields_map</span> <span class="k">if</span> <span class="vi">@fields_map</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@fields_map</span> <span class="o">=</span>
</span><span class='line'>        <span class="no">RemoteDatabase</span><span class="o">.</span><span class="n">fields_map</span><span class="o">[</span><span class="ss">:default</span><span class="o">].</span><span class="n">merge</span><span class="p">(</span>
</span><span class='line'>          <span class="no">RemoteDatabase</span><span class="o">.</span><span class="n">fields_map</span><span class="o">[</span><span class="ss">:models</span><span class="o">][</span><span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">underscore</span><span class="o">]</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>      <span class="n">remote_objects</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:remote_table_name</span><span class="o">]].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">remote_objects</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_object</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># 通过值唯一的属性查找对象</span>
</span><span class='line'>        <span class="n">remote_unique_field_name</span> <span class="o">=</span> <span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:remote_unique_field_name</span><span class="o">]</span>
</span><span class='line'>        <span class="n">remote_unique_field</span> <span class="o">=</span> <span class="n">remote_object</span><span class="o">[</span><span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:local_to_remote_fields_map</span><span class="o">][</span><span class="n">remote_unique_field_name</span><span class="o">]]</span>
</span><span class='line'>        <span class="n">local_object</span> <span class="o">=</span> <span class="n">find_or_initialize_by</span><span class="p">(</span><span class="n">remote_unique_field_name</span> <span class="o">=&gt;</span> <span class="n">remote_unique_field</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">local_to_remote_fields_map</span> <span class="o">=</span> <span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:local_to_remote_fields_map</span><span class="o">]</span>
</span><span class='line'>        <span class="c1"># 逐一设置本地对象需要对接的各个属性</span>
</span><span class='line'>        <span class="n">local_to_remote_fields_map</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>          <span class="n">local_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">remote_object</span><span class="o">[</span><span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:local_to_remote_fields_map</span><span class="o">][</span><span class="n">attribute</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># ... 关联关系的保存</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">next</span> <span class="k">unless</span> <span class="n">local_object</span><span class="o">.</span><span class="n">changes</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">local_object</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码中，<code>importing_fields_map</code>读取与当前Model匹配的字段映射关系，其内部先通过<code>RemoteDatabase.fields_map[:default]</code>加载了默认的配置，然后通过merge<code>RemoteDatabase.fields_map[:models][self.name.underscore]</code>得到当前model专属的配置，其中的<code>self.name.underscore</code>的值类似于<code>'student'</code>或者<code>'teacher'</code>。</p>

<p>在后续的代码中，基本跟前面列举的代码一致，只是将各种常量对应替换为通过<code>local_to_remote_fields_map</code>存储的配置，并且删除<code>Student</code>以及<code>Teacher</code>的多余常量，在此就不列举示例代码了。</p>

<p>在整个重构的过程中，代码是越来越抽象的，但是代码本身却也因此变得越来越灵活，而至此，我们已经完全将字段映射关系从Ruby代码中剥离，假使以后还需要导入其他数据，我们只需要修改YAML文件，而不再需要碰任何Ruby代码，除非我们需要修改配置项的结构。</p>

<h3>收获重构后的果实：专业数据的导入</h3>

<p>在经历过了几次重构后，今天开始导入学生专业的数据，而我所需要做的全部事情，仅仅只是在yaml文件中加入专业相关的配置，并且在专业的model<code>Major</code>include一下数据导入的Concern就行了。整个过程几分钟就完成了，简直丝般顺滑啊！</p>

<h3>总结</h3>

<p>最后简单总结一下重构完的代码的特点吧：</p>

<ul>
<li>避免了在model或者concern中生命一堆常量或者方法，到处定义的常量会让映射关系的管理非常分散</li>
<li>避免不同命名空间下的同名常量，比如<code>Student::LOCAL_TO_REMOTE_FIELDS_MAP</code>以及<code>Teacher::LOCAL_TO_REMOTE_FIELDS_MAP</code></li>
<li>更集中的字段映射关系配置，避免错漏</li>
<li>逻辑跟映射关系解耦，更简洁稳健的代码</li>
<li>自适应新的数据表导入，不需要再修改或者添加Ruby代码，配置即插即用</li>
</ul>


<h3>问题</h3>

<ul>
<li>如果涉及复杂关联，如何更好地扩展？
现在的数据对接是有限制的，就是数据本身比较规则，几乎是一张表到一张表的对接，但是如果涉及一张表到多张表之间的对接，是否可以继续再将以上代码扩展？</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>说是基本数据，是因为这篇文章介绍的方案目前仅针对数据关联不是特别复杂的场景，而且介绍的场景，数据的导入也比较简单，基本是从远程数据库中取值，然后再直接赋值到项目数据库的记录中。对于需要在数据导入过程中做复杂的数据分析的案例，我暂时也没有尝试过，不过我预计可以尝试使用Ruby中的代码块的方式解决，但是在此不赘述。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sublime text 2基于语法的配置文件]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/08/03/sublime-text-2ji-yu-yu-fa-de-pei-zhi-wen-jian/"/>
    <updated>2014-08-03T23:13:09+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/08/03/sublime-text-2ji-yu-yu-fa-de-pei-zhi-wen-jian</id>
    <content type="html"><![CDATA[<p>最近在学习Python编程语言，但是遇到一个小小的问题，就是原来Ruby的编码规范是用2个空格缩进的，所以以前在Sublime的全局用户配置中设置了<code>"tab_size": 2</code>，所以在编辑Python文件的时候就每次都要从菜单中设置<code>tab_size</code>的大小为4。后来经过搜索，发现Sublime Text 2实际上是支持语法特定的配置的，具体的步骤是：</p>

<!-- More -->


<ol>
<li>先打开一个Python代码文件，或者是设置当前文件的语法为&#8221;Python&#8221;；</li>
<li>点击菜单栏中的“Sublime Text 2 &ndash;> Preferences &ndash;> Settings &ndash; More &ndash;> Syntax Specific &ndash; User”；</li>
<li>可以看到打开了一个名字为&#8221;Python.sublime-setting&#8221;的文件，如果打开的文件的名字不是Python，请回头检查第一步。</li>
<li><p>在打开的特定语言的配置文件中，直接设置:</p>

<p> <code>
 { "tab_size": 4, "translate_tabs_to_spaces": true }
</code></p>

<p> 以上的设置会默认覆盖全局配置。</p></li>
</ol>


<p>以上步骤参考自<a href="http://lukecafe.com/2013/03/daily-tips-sublime-text2-setting-and-ipa-generation/">今日技巧：Sublime Text 2语法缩进配置和ipa文件生成</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spree 2.3.0已经发布]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/07/28/spree-2-dot-3-0yi-jing-fa-bu/"/>
    <updated>2014-07-28T21:32:54+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/07/28/spree-2-dot-3-0yi-jing-fa-bu</id>
    <content type="html"><![CDATA[<p><strong>声明：</strong>原文来自Spree官方博客<a href="http://spreecommerce.com/blog/spree-2-3-released">Spree 2.3.0 Released</a>，原文发布日期是2014-06-30，本文仅作翻译。</p>

<p><strong>简要介绍：</strong><a href="http://spreecommerce.com/">Spree</a>是一个基于<a href="http://rubyonrails.org/">Ruby on Rails</a>开发的开源在线商城框架，提供了从商品展示购买、下单支付到库存管理以及订单管理等一系列基本功能，并且支持通过第三方扩展的形式定制或者扩展框架的功能，最新版本的Spree已经支持最新的Rails版本。</p>

<p>Spree 2.3的最新更改已经加入对Rails 4.1的支持，提供了更好的配置项的存储，更好的针对多店铺的支持，以及更好的游客追踪。Spree 2.3的发布，有赖于总的97位贡献者以及他们总的700多个的commit记录。现在，我们非常兴奋地宣布：Spree 2.3发布了！</p>

<!-- More -->


<h3>Rails 4.1 的支持</h3>

<p>现在，Rails 4.1已经得到了Spree 2.3的支持。如果你希望基于Rails 4.1进行开发，那么Spree 2.3就是特为你准备的发布版。</p>

<h3>基于序列化记录的配置项</h3>

<p>现在，所有的配置项存储在一个记录上，而不是存储在<code>spree_preferences</code>表中。这意味着，为了获取一个配置项，比如价格的计算器配置，就会触发一个数据库查询，所查询的那一行记录有一个包含了所有配置信息的命名为<code>preferences</code>的列。</p>

<p>而在此之前，对于每一个配置记录本身，可能都会有一个单独的数据库调用，而在查询到所请求的配置项之后，还是有可能会有任意数目的数据库调用产生。而现在，我们总的只需要调用一次，这意味着程序本身将会有一些速度上的提升。</p>

<h3>更好的多店铺支持</h3>

<p>我们已经添加了一个名为<code>Spree::Store</code>的model，用于支持基本的多店铺/多域名的站点。其在<code>spree-multi-domain</code>这个扩展的基础上提供了针对多店铺/多域名的基本框架。一些原有的配置项被转移到了这个model上，以此实现根据具体的店铺提供不同配置值：</p>

<ul>
<li><code>Spree::Config[:site_name]</code> 迁移到了 <code>name</code></li>
<li><code>Spree::Config[:site_url]</code> 迁移到了 <code>url</code></li>
<li><code>Spree::Config[:default_meta_description]</code> 迁移到了 <code>meta_description</code></li>
<li><code>Spree::Config[:default_meta_keywords]</code> 迁移到了 <code>meta_keywords</code></li>
<li><code>Spree::Config[:default_seo_title]</code> 迁移到了 <code>seo_title</code></li>
</ul>


<p>一个数据库迁移文件将会负责把这些原有的配置项转移到一个新的默认的store实例上。</p>

<p>一个新的名为<code>ControllerHelpers::Store</code>的Concern提供了一个<code>current_store</code>helper，可以在请求的域名的基础上，通过它获取当前店铺。</p>

<h3>更好的游客追踪</h3>

<p>现在，我们用了一个签名的cookie在浏览器中存储游客的唯一的token。通过它允许关闭了浏览器的顾客可以在再次访问时继续完成他们的购物流程。更重要的是，这也帮助作为商店主人的你方便地识别游客的订单。由于我们在访客来访时都会设置<code>cookies.signed[:guest_token]</code>，所以除了订单，或许你可以把cookie用于其他用途。</p>

<p>举个实际例子，如果游客需要收藏一个商品，你可以创建一个用于记录收藏记录的model，然后把<code>cookies.signed[:guest_token]</code>赋值给这个model中的<code>token</code>字段。这将有助于你分析当前用户在此之前的订单以及收藏记录，这对于商品推荐将是非常有用的。</p>

<h3>总结</h3>

<p>你可以从<a href="https://github.com/spree/spree/releases/tag/v2.3.0">Github</a>上浏览更详细的变更列表。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run a shell script auto-matically when entering/cd a directory]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/05/04/run-a-shell-script-auto-matically-when-entering-a-directory/"/>
    <updated>2014-05-04T10:32:16+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/05/04/run-a-shell-script-auto-matically-when-entering-a-directory</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t know if it is common that you need to run some shell scripts which are  used under only some directories, such as, one of your Rails projects.</p>

<!-- More -->


<p>Today I find that I always need to run <code>rspec</code> command with a <code>SPEC</code> option, which specifies spec files to be run. In short, everytime I should type the following command in my terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake spec <span class="nv">SPEC</span><span class="o">=</span>spec/lib/
</span></code></pre></td></tr></table></div></figure>


<p>It is convenient to run this command as an <strong>alias</strong>, but I don&rsquo;t want to write this alias into the <code>~/.bash_profile</code>, because it should be available under the current directory only. But how?</p>

<p>Thanks to the powerful bash shell and its function, we can rewrite the built-in <code>cd</code> command through a function named <strong>cd</strong>. The following are steps:</p>

<ol>
<li>Open your <code>~/.bash_profile</code>, and insert:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function </span><span class="nb">cd</span> <span class="o">{</span>
</span><span class='line'>    <span class="c"># actually change the directory with all args passed to the function</span>
</span><span class='line'>    <span class="nb">builtin cd</span> <span class="s2">&quot;$@&quot;</span>
</span><span class='line'>    <span class="c"># if there&#39;s a regular file named &quot;.bash_local&quot;...</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;.bash_local&quot;</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>        <span class="c"># source its contents</span>
</span><span class='line'>        <span class="nb">source</span> .bash_local
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>And then source it in your terminal:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Create new file named <code>.bash_local</code> under your target directories(on my machine, it is <code>~/development/rails-dev/graduation-project/</code>), and then insert:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">alias </span><span class="nv">rspec_lib</span><span class="o">=</span><span class="s1">&#39;rake spec SPEC=spec/lib/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Now cd the directory, and the alias <code>rspec_lib</code> will be available auto-matically:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/development/rails-dev/graduation-project/
</span><span class='line'><span class="nv">$ rspec_lib</span>
</span><span class='line'><span class="o">=</span>&gt; .....
</span><span class='line'>
</span><span class='line'>Finished in 0.00617 seconds
</span><span class='line'>5 examples, 0 failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 23543
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<p>Please consider if it is necessary to check <code>.bash_local</code> into your git repo. If not, remember to add it to the <code>.gitignore</code> file.</p>

<h3>TODO</h3>

<p>When leave the directory, how to <strong>&ldquo;un-source&rdquo;</strong> the sourced file, that is, make <code>rspec_lib</code> unavailable?</p>

<h3>Related Links</h3>

<ol>
<li><a href="http://superuser.com/questions/283352/how-do-you-run-a-shell-command-script-automatically-when-entering-cd-ing-a-direc">How do you run a shell command/script automatically when entering/cd-ing a directory on Snow Leopard?</a></li>
<li><a href="http://stackoverflow.com/questions/8760505/is-it-possible-to-unsource-in-bash">Is it possible to “unsource” in bash?</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gemfile指定gem来源的四种方式]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/04/03/gemfilezhi-ding-gemlai-yuan-de-si-chong-fang-shi/"/>
    <updated>2014-04-03T00:30:18+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/04/03/gemfilezhi-ding-gemlai-yuan-de-si-chong-fang-shi</id>
    <content type="html"><![CDATA[<p>Gemfile的作用无非就是告诉bundler你的项目具体都需要哪些gem，这些gem都需要哪些版本，以及从哪获取这些gem。其实你的问题应该就是跟第三点有关，总的来说，gem的来源可以有四种：</p>

<!-- More -->


<h4>1. 从镜像源安装</h4>

<p>这个是最直接的，通过这种方式指定的gem，bundler会从文件开头的<code>source</code>中去查找这个gem：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span>   <span class="c1"># this gem will be installed from https://rubygems.org</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. 从git代码库安装</h4>

<p>通过在<code>gem</code>方法（Gemfile实际上就是一个ruby的代码文件）中指定<code>git</code>参数，可以使bundler从指定的远程代码库上拉取代码，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># nokogiri will be installed from git://github.com/tenderlove/nokogiri.git</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/tenderlove/nokogiri.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. 从github安装</h4>

<p>上面第2种方法只是针对所有合法的git代码库（不仅仅是github，也可以是你自己的一个git服务器上一个代码库）而言，而如果你所需要的库来自于github，则可以通过更方便的<code>github</code>参数实现目标:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">:github</span> <span class="o">=&gt;</span> <span class="s1">&#39;tenderlove/nokogiri&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，只要指定了<code>author/repo_name</code>的形式，bundler就能自动从github上获取你所需要的gem了。
<strong>注意</strong>: 第2跟第3种方式还都可以通过<code>branch</code>参数指定你所需要的代码分支，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;refinerycms&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;refinery/refinerycms&#39;</span><span class="p">,</span> <span class="ss">branch</span><span class="p">:</span> <span class="s1">&#39;master&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. 从文件系统中安装</h4>

<p>假如你有一个已经放在项目目录中（其实可以是任何地方）的gem，则可以通过<code>path</code>参数指定所需的gem在文件系统中的位置，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rails&quot;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;vendor/rails&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>bundler将会根据path指定的路径去查找并且安装gem。</p>

<h3>最后说一下</h3>

<p>最后顺便说下我的一点体会，一般像这种gem来自于项目目录下的情况，大多是因为项目中用到了一些提供扩展机制的框架，比如<strong>Spree</strong>以及<strong>Refinery</strong>，这两者生成的扩展或者子Engine都是以gem的形式放在vendor或者lib目录下，然后从Gemfile里边进行指定，比如我的一个项目中的一个实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;refinerycms-factories&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;vendor/extensions&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>refinerycms-factories是我用Refinery的generator生成的一个子engine，默认放在<code>verdor/extensions</code>目录下。</p>

<p>另一种可能比较常见的情况就是你用到了某个可能不再维护的gem，由于对源代码的改动较大，所以你干脆把这个gem的源代码下载到本地项目目录下，然后直接进行修改，最后通过<code>path</code>去安装。</p>

<h3>参考资料</h3>

<p>关于Gemfiile的更多资料，请自行猛戳：
<a href="http://bundler.io/v1.5/gemfile.html">Bundler homepage</a>
<a href="http://bundler.io/v1.5/man/gemfile.5.html">Gemfile manual page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中Hash的7个日常使用范例]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/25/rubyzhong-hashde-7ge-ri-chang-shi-yong-fan-li/"/>
    <updated>2014-03-25T20:05:56+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/25/rubyzhong-hashde-7ge-ri-chang-shi-yong-fan-li</id>
    <content type="html"><![CDATA[<p>此文翻译自<a href="http://blog.8thcolor.com/en/2014/03/7-daily-use-cases-of-ruby-hash/?utm_source=rubyweekly&amp;utm_medium=email#json-to-hash">7 daily use cases of Ruby Hash</a>，限于本人水平，翻译不当之处，敬请指教！</p>

<p>每一天，你都需要跟Hash相处。创建一个新的Hash或者是通过它的某一个键去检索其中的元素这样的工作，都是常见也是非常简单的。但是当你需要合并两个嵌套的Hash或者是从某一个Hash里边过滤某些键，你可能需要考虑得多一点。通过完整的<a href="http://ruby-doc.org/">文档</a>，你可以找到对Hash中的每一个方法的充分解释。但是由于文档不是面向应用场景的，你可能没法很快找到你的解决方案。在下面，我分享了我日常中经常遇到的Hash中的7个常用场景，希望它们对你有用。</p>

<!-- More -->


<h2>1. 如何将一个JSON转换为一个Hash？</h2>

<p>假设你刚刚接收到一个用JSON表示的Twitter账号的资料信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">data</span> <span class="err">=</span> <span class="err">&#39;</span><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Aaron Patterson&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;screen_name&quot;</span><span class="p">:</span> <span class="s2">&quot;tenderlove&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;location&quot;</span><span class="p">:</span> <span class="s2">&quot;Seattle, WA&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你希望能够将它转化为一个Hash,这样会更方便你进行对数据的操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">profile</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 在IRB中的输出结果：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Aaron Patterson&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;screen_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;tenderlove&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;location&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Seattle, WA&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/json/rdoc/JSON.html#method-i-parse">JSON#parse</a></p>

<h2>2. 如何将一个Hash转换为一个JSON？</h2>

<p>在你的web应用程序中，你需要追踪当前星期每一天新注册用户的数量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">signups_of_the_week</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">monday</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">tuesday</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">wednesday</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">thursday</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">friday</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">saturday</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">sunday</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以通过API的方式把它们以JSON格式提供给客户端：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">signups_of_the_week</span><span class="o">.</span><span class="n">to_json</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 在IRB中的输出结果：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;{</span><span class="se">\&quot;</span><span class="s2">monday</span><span class="se">\&quot;</span><span class="s2">:2,</span><span class="se">\&quot;</span><span class="s2">tuesday</span><span class="se">\&quot;</span><span class="s2">:3,</span><span class="se">\&quot;</span><span class="s2">wednesday</span><span class="se">\&quot;</span><span class="s2">:4,</span><span class="se">\&quot;</span><span class="s2">thursday</span><span class="se">\&quot;</span><span class="s2">:20,</span><span class="se">\&quot;</span><span class="s2">friday</span><span class="se">\&quot;</span><span class="s2">:5,</span><span class="se">\&quot;</span><span class="s2">saturday</span><span class="se">\&quot;</span><span class="s2">:2,</span><span class="se">\&quot;</span><span class="s2">sunday</span><span class="se">\&quot;</span><span class="s2">:5}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/json/rdoc/JSON.html#method-i-generate">JSON#generate</a>
边注：<a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/json/rdoc/JSON.html#method-i-pretty_generate">JSON#pretty_generate</a>对于更好的打印以及调试非常有用。</p>

<h2>3. 如何为一个嵌套的Hash设置默认值？</h2>

<p>你有一个以name为索引的联系人的集合，也就是一个嵌套的Hash：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contacts</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;John&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;john@doe.com&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Freddy&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Freddy&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;freddy@mercury.com&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你在处理单个联系人的时候，你不需要每一次都检查它是否存在。你只需要写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contacts</span><span class="o">[</span><span class="s1">&#39;Jane&#39;</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;jane@doe.com&#39;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">contacts</span><span class="o">[</span><span class="s1">&#39;Jane&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> IRB输出 </strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;Jane&quot;</span><span class="p">,</span> <span class="ss">:email</span><span class="o">=&gt;</span><span class="s2">&quot;jane@doe.com&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以在创建Hash的时候通过设置代码块来实现默认值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contacts</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">hsh</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class='line'>  <span class="n">hsh</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="n">key</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者是使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contacts</span><span class="o">.</span><span class="n">default_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">hsh</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class='line'><span class="err">  </span><span class="n">hsh</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="nb">name</span><span class="p">:</span> <span class="n">key</span><span class="p">,</span>
</span><span class='line'><span class="err">    </span><span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="err">  </span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-c-new">Hash#new</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-default_proc-3D">Hash#default_proc</a></p>

<h2>4. 如何合并两个嵌套的Hash？</h2>

<p>在一个在线商店里，你想要将一个心愿单与当前的购物篮进行合并，这两者都是以商品的id号作为索引：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wish_list</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="mi">8</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;The Color of Magic&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="p">},</span>
</span><span class='line'><span class="err">  </span><span class="mi">42</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;The Hitch-Hiker&#39;s Guide to the Galaxy&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">    </span><span class="ss">price</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'><span class="err">  </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">basket</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="mi">8</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="ss">price</span><span class="p">:</span> <span class="mi">10</span>
</span><span class='line'><span class="err">  </span><span class="p">},</span>
</span><span class='line'><span class="err">  </span><span class="mi">1729</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Ramanujan:  Twelve Lectures on Subjects Suggested by His Life and Work&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">price</span><span class="p">:</span> <span class="mi">28</span>
</span><span class='line'><span class="err">  </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>借助于ActiveSupport,你可以简单地实现你的目标：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/core_ext/hash&#39;</span> <span class="c1"># not necessary if in Rails</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">basket</span><span class="o">.</span><span class="n">deep_merge</span><span class="p">(</span><span class="n">wish_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>又或者，在没有ActiveSupport的情况下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">deep_merge</span><span class="p">(</span><span class="n">h1</span><span class="p">,</span> <span class="n">h2</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="n">h1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">h2</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">h1_elem</span><span class="p">,</span> <span class="n">h2_elem</span><span class="o">|</span> <span class="n">deep_merge</span><span class="p">(</span><span class="n">h1_elem</span><span class="p">,</span> <span class="n">h2_elem</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">deep_merge</span><span class="p">(</span><span class="n">basket</span><span class="p">,</span> <span class="n">wish_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> IRB输出: </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">8</span><span class="o">=&gt;</span><span class="p">{</span><span class="ss">:price</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:title</span><span class="o">=&gt;</span><span class="s2">&quot;The Color of Magic&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="mi">1729</span><span class="o">=&gt;</span><span class="p">{</span><span class="ss">:title</span><span class="o">=&gt;</span><span class="s2">&quot;Ramanujan:  Twelve Lectures on Subjects Suggested by His Life and Work&quot;</span><span class="p">,</span> <span class="ss">:price</span><span class="o">=&gt;</span><span class="mi">28</span><span class="p">},</span>
</span><span class='line'>  <span class="mi">42</span><span class="o">=&gt;</span><span class="p">{</span><span class="ss">:title</span><span class="o">=&gt;</span><span class="s2">&quot;The Hitch-Hiker&#39;s Guide to the Galaxy&quot;</span><span class="p">,</span> <span class="ss">:price</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-merge">Hash#merge</a>, <a href="http://api.rubyonrails.org/classes/Hash.html#method-i-deep_merge">Hash#deep_merge</a></p>

<h2>5. 如何过滤掉一个Hash中的某些key？</h2>

<p>你已经创建了一个表示日销售额的矩形图，并且你将它以Hash的方式存储，每一天就是一个key：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">histogram</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="ss">monday</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">tuesday</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">wednesday</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">thursday</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">friday</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">saturday</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">sunday</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你想从中过滤掉Saturday以及Sunday。通过ActiveSupport，你可以像下面这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/core_ext/hash&#39;</span> <span class="c1"># not necessary if Rails</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">histogram</span><span class="o">.</span><span class="n">except</span><span class="p">(</span><span class="ss">:saturday</span><span class="p">,</span> <span class="ss">:sunday</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者在没有ActiveSupport的情况下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="n">hsh</span><span class="p">,</span> <span class="o">*</span><span class="n">keys</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="n">hsh</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">h</span><span class="o">|</span>
</span><span class='line'><span class="err">    </span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="err">  </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">filter</span><span class="p">(</span><span class="n">histogram</span><span class="p">,</span> <span class="ss">:saturday</span><span class="p">,</span> <span class="ss">:sunday</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一个简洁点实现则是基于<code>reject</code>方法的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">filter2</span><span class="p">(</span><span class="n">hsh</span><span class="p">,</span> <span class="o">*</span><span class="n">keys</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="n">hsh</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span> <span class="n">keys</span><span class="o">.</span><span class="n">include?</span> <span class="n">k</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>请注意，如果你正在处理一个比较大的集合，你最好是先衡量下你的实现，一次选择最好的其中一个实现。
<strong> IRB输出：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:monday</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:tuesday</span><span class="o">=&gt;</span><span class="mi">7</span><span class="p">,</span> <span class="ss">:wednesday</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:thursday</span><span class="o">=&gt;</span><span class="mi">18</span><span class="p">,</span> <span class="ss">:friday</span><span class="o">=&gt;</span><span class="mi">7</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://api.rubyonrails.org/classes/Hash.html#method-i-except">Hash#except</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-delete">Hash#delete</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-reject">Hash#reject</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Object.html#method-i-dup">Object#dup</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Object.html#method-i-tap">Object#tap</a></p>

<h2>6. 如何通过value对一个Hash进行“排序”？</h2>

<p>在一个骰子类游戏中，你在Hash中储存了每一个选手的得分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scores</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="s1">&#39;The Lady&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="s1">&#39;Fate&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="s1">&#39;Death&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你想要通过他们的得分对他们进行排序。你可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">leaderboard</span> <span class="o">=</span> <span class="n">scores</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">score</span><span class="o">|</span> <span class="o">-</span><span class="n">score</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> IRB输出：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;Death&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;The Lady&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;Fate&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://ruby-doc.org/core-2.1.0/Enumerable.html#method-i-sort_by">Enumerable#sort_by</a>
边注：Hash通过元素插入时的顺序去枚举它们的值。</p>

<h2>7. 如何找出两个Hash中的不同？</h2>

<p>假设你定期地从RSS订阅源中读取数据，并且将他们放在了一个Hash里边：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">entries</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">1372284000</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-4073&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">1368482400</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-2065&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你更新了之后，你可能得到另一个Hash：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">updated_entries</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="mi">1385074800</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-4164&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="mi">1372284000</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-4073&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="mi">1368482400</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-2065&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你想要查找出哪一条记录才是新加的，这样你就可以通过email的方式将它们发送出去。最好的解决方案是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_entries</span> <span class="o">=</span> <span class="n">updated_entries</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span> <span class="n">entries</span><span class="o">.</span><span class="n">include?</span> <span class="n">k</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> IRB输出：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="mi">1385074800</span><span class="o">=&gt;</span><span class="s2">&quot;CVE-2013-4164&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-include-3F">Hash#include?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[注意Rake Task中invoke方法跟execute方法的不同]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/21/zhu-yi-rake-taskzhong-invokegen-executefang-fa-de-bu-tong/"/>
    <updated>2014-03-21T01:18:46+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/21/zhu-yi-rake-taskzhong-invokegen-executefang-fa-de-bu-tong</id>
    <content type="html"><![CDATA[<p>平时如果跟Rake Task有过接触的同学都会知道，当我们需要在一个Task里边调用另一个Task的时候，我们可以使用<code>Rake::Task['task_name'].invoke</code>的方式。但是在今天的实践中，才知道<code>Rake::Task#invoke</code>在默认情况下在整个运行过程中将只会被调用一次而已。话不多说，动手演示：</p>

<!-- More -->


<p>准备一个<strong>say hello</strong>的task，代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/tasks/demo.rake</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:demo</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Print &#39;Hello&#39; string&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:say_hello</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello, World!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来在命令行中执行rake task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake demo:say_hello
</span><span class='line'><span class="o">=</span>&gt; Hello, World!
</span></code></pre></td></tr></table></div></figure>


<p>假设我们一个循环，需要调用上边的task共5次，那么我们可能会这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:demo</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ....</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Print &#39;Hello, World!&#39; five times&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:say_five_hello</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;demo:say_hello&#39;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, 让我们尝试着运行这个<code>say_five_hello</code>的task，是不是真的会打印5次&#8217;Hello, World!&lsquo;呢?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake demo:say_five_hello
</span><span class='line'><span class="o">=</span>&gt; Hello, World!
</span></code></pre></td></tr></table></div></figure>


<p>结果就是，&#8217;Hello, World!&lsquo;只打印了一次，也就是说，我们的<code>Rake::Task['demo:say_hello']</code>只被运行了一次。</p>

<p>经过搜索，从StackOverflow找到了这个问题的相关描述，详见：<a href="http://stackoverflow.com/a/12948485">How do I execute Rake tasks with arguments multiple times?</a></p>

<p>按照答案中的描述，我们有两种修改方案。第一种就是将上述代码进行修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:demo</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Print &#39;Hello, World!&#39; five times&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:say_five_hello</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;demo:say_hello&#39;</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次运行，这次总算得到期待结果了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake demo:say_five_hello
</span><span class='line'><span class="o">=</span>&gt; Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span></code></pre></td></tr></table></div></figure>


<p>而第二种方法则会稍微麻烦一点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:demo</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Print &#39;Hello, World!&#39; five times&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:say_five_hello</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;demo:say_hello&#39;</span><span class="o">].</span><span class="n">reenable</span>
</span><span class='line'>      <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;demo:say_hello&#39;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次执行rake task, 同样能够得到预期结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake demo:say_five_hello
</span><span class='line'><span class="o">=</span>&gt; Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span></code></pre></td></tr></table></div></figure>


<h3>未完待续</h3>

<p>针对重复调用的行为上的不同只是<code>invoke</code>以及<code>execute</code>方法之间的一个基本差异而已，那第一种方案跟第二种方案的差异又有什么不同？在带参数的情况下，又该如何考虑两个方法之间的差异？</p>

<p><a href="http://rake.rubyforge.org/classes/Rake/Task.html">Rake::Task source code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[属性方法]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/12/shu-xing-fang-fa/"/>
    <updated>2014-03-12T20:58:17+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/12/shu-xing-fang-fa</id>
    <content type="html"><![CDATA[<p>此文翻译自<a href="http://monkeyandcrow.com/blog/reading_rails_attribute_methods/">Reading Rails &ndash; Attribute Methods</a>，限于本人水平，翻译不当之处，敬请指教！</p>

<p>在我们<a href="http://Martin91.github.io/blog/2014/03/07/zhui-zong-bian-geng/">上一篇的探讨</a>中，我们已经看到了Rails在跟踪属性变更中使用到的属性方法（attribute methods）。有三种类型的属性方法：前缀式（prefix）、后缀式（suffix）以及固定词缀式（ affix）。为了表述简洁，我们将只关注类似<code>attribute_method_suffix</code>这样的后缀式属性方法，并且特别关注它是如何帮助我们实现类似<code>name</code>这样的模型属性以及对应生成的类似<code>name_changed?</code>这样的方法的。</p>

<!-- More -->


<p>如果需要跟着我的步骤走，请使用<a href="https://github.com/adamsanderson/qwandry">qwandry</a>打开每一个相关的代码库，或者直接从<a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github</a>查看源码即可。</p>

<h3>声明（Declarations）</h3>

<p>属性方法是Rails中众多使用了元编程技术的案例之一。在元编程中，我们编写可以编写代码的代码。举例来说，<code>attribute_method_suffix</code>后缀式方法是一个为每个属性都定义了一个helper方法的方法。在<a href="http://Martin91.github.io/blog/2014/03/07/zhui-zong-bian-geng/">之前的讨论</a>中，ActiveModel使用这种方式为您的每一个属性都定义了一个<code>_changed?</code>方法(<strong>提示</strong>： 命令行中键入<code>qw activemodel</code>查看代码)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dirty</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:AttributeMethods</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">attribute_method_suffix</span> <span class="s1">&#39;_changed?&#39;</span><span class="p">,</span> <span class="s1">&#39;_change&#39;</span><span class="p">,</span> <span class="s1">&#39;_will_change!&#39;</span><span class="p">,</span> <span class="s1">&#39;_was&#39;</span>
</span><span class='line'>    <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们打开ActiveModel库中的<code>attribute_methods.rb</code>文件，并且看一下到底发生了什么事情。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_method_suffix</span><span class="p">(</span><span class="o">*</span><span class="n">suffixes</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">attribute_method_matchers</span> <span class="o">+=</span> <span class="n">suffixes</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">suffix</span><span class="o">|</span>
</span><span class='line'>    <span class="no">AttributeMethodMatcher</span><span class="o">.</span><span class="n">new</span> <span class="ss">suffix</span><span class="p">:</span> <span class="n">suffix</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你调用<code>attribute_method_suffix</code>方法的时候，每一个后缀都通过<code>map!</code>方法转换为一个<code>AttributeMethodMatcher</code>对象。这些对象会被存储在<code>attribute_method_matchers</code>中。如果你重新看一下这个module的顶部，你会发现<code>attribute_method_matchers</code>是在每一个包含此module的类中使用<code>class_attribute</code>定义的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">AttributeMethods</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">class_attribute</span> <span class="ss">:attribute_aliases</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:attribute_method_matchers</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">instance_writer</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>class_attribute</code>方法帮助你在类上定义属性。你可以这样在你自己的代码中这样使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="n">class_attribute</span> <span class="ss">:database</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="no">Person</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="no">Sql</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:host</span><span class="o">=&gt;</span><span class="s1">&#39;localhost&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Employee</span><span class="o">.</span><span class="n">database</span> <span class="c1">#=&gt; &lt;Sql:host=&#39;localhost&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby中并没有<code>class_attribute</code>的内置实现，它是在ActiveSupport(<strong>提示</strong>:命令行中键入<code>qw activesupport</code>查看代码)中定义的方法。如果你对此比较好奇，可以简单看下<code>attribute.rb</code></p>

<p>现在我们来看一下<code>AttributeMethodMatcher</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AttributeMethodMatcher</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:prefix</span><span class="p">,</span> <span class="ss">:suffix</span><span class="p">,</span> <span class="ss">:method_missing_target</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>    <span class="vi">@prefix</span><span class="p">,</span> <span class="vi">@suffix</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:prefix</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="n">options</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:suffix</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@regex</span> <span class="o">=</span> <span class="sr">/^(?:</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="vi">@prefix</span><span class="p">)</span><span class="si">}</span><span class="sr">)(.*)(?:</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="vi">@suffix</span><span class="p">)</span><span class="si">}</span><span class="sr">)$/</span>
</span><span class='line'>    <span class="vi">@method_missing_target</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@prefix</span><span class="si">}</span><span class="s2">attribute</span><span class="si">#{</span><span class="vi">@suffix</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="vi">@method_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">%s</span><span class="si">#{</span><span class="n">suffix</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中的<code>prefix</code>以及<code>suffix</code>是通过<code>Hash#fetch</code>方法提取出来的。这会返回一个对应键的值，或者是一个默认值。如果调用方法的时候没有提供默认值，<code>Hash#fetch</code>方法将会抛出一个异常，提示指定的键不存在。对于options的处理来说是一种不错的模式，特别是对于boolean型数据来说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Mortimer&quot;</span><span class="p">,</span> <span class="ss">:imaginary</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">}</span>
</span><span class='line'><span class="c1"># Don&#39;t do this:</span>
</span><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:imaginary</span><span class="o">]</span> <span class="o">||</span> <span class="kp">true</span>     <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="c1"># Do this:</span>
</span><span class='line'><span class="n">options</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:imaginary</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于我们的<code>attribute_method_suffix</code>其中的<code>'_changed'</code>示例来说，<code>AttributeMethodMatcher</code>将会有如下的实例变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@prefix</span>                <span class="c1">#=&gt; &quot;&quot;</span>
</span><span class='line'><span class="vi">@suffix</span>                <span class="c1">#=&gt; &quot;_changed?&quot;</span>
</span><span class='line'><span class="vi">@regex</span>                 <span class="c1">#=&gt; /^(?:)(.*)(?:_changed\?)$/</span>
</span><span class='line'><span class="vi">@method_missing_target</span> <span class="c1">#=&gt; &quot;attribute_changed?&quot;</span>
</span><span class='line'><span class="vi">@method_name</span>           <span class="c1">#=&gt; &quot;%s_changed?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你一定想知道<code>%s_changed</code>中的<code>%s</code>是用来干什么的吧？这是一个格式化字符串（format string）。你可以使用<code>sprintf</code>方法对它插入值，或者使用缩写（shortcut）<code>%</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%s_changed?&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;named_changed?&quot;</span>
</span><span class='line'><span class="s2">&quot;%s_changed?&quot;</span> <span class="o">%</span> <span class="s2">&quot;age&quot;</span>          <span class="c1">#=&gt; &quot;age_changed?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二个比较有趣的地方就是正则表达式创建的方式。请留意创建<code>@regex</code>变量时<code>Regexp.escape</code>的用法。如果后缀没有被escape，则正则表达式中带有特殊含义的符号将会被错误解释(misinterpreted)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Don&#39;t do this!</span>
</span><span class='line'><span class="n">regex</span> <span class="o">=</span> <span class="sr">/^(?:</span><span class="si">#{</span><span class="vi">@prefix</span><span class="si">}</span><span class="sr">)(.*)(?:</span><span class="si">#{</span><span class="vi">@suffix</span><span class="si">}</span><span class="sr">)$/</span> <span class="c1">#=&gt; /^(?:)(.*)(?:_changed?)$/</span>
</span><span class='line'><span class="n">regex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;name_changed?&quot;</span><span class="p">)</span>                 <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="n">regex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;name_change&quot;</span><span class="p">)</span>                   <span class="c1">#=&gt; #&lt;MatchData &quot;name_change&quot; 1:&quot;name&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Do this:</span>
</span><span class='line'><span class="vi">@regex</span> <span class="o">=</span> <span class="sr">/^(?:</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="vi">@prefix</span><span class="p">)</span><span class="si">}</span><span class="sr">)(.*)(?:</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="vi">@suffix</span><span class="p">)</span><span class="si">}</span><span class="sr">)$/</span>
</span><span class='line'><span class="n">regex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;name_changed?&quot;</span><span class="p">)</span>                 <span class="c1">#=&gt; #&lt;MatchData &quot;name_changed?&quot; 1:&quot;name&quot;&gt;</span>
</span><span class='line'><span class="n">regex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;name_change&quot;</span><span class="p">)</span>                   <span class="c1">#=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>请仔细记住<code>regex</code>以及<code>method_name</code>，它们可以用来匹配和生成属性方法，我们在后面还会继续用到它们。</p>

<p>我们现在已经搞明白了属性方法是如何声明的，但是实际中，Rails又是如何使用它们的呢？</p>

<h3>通过Method Missing调用（Invocation With Method Missing）</h3>

<p>当我们调用了一个未定义的方法时，Rails将会在抛出异常之前调用对象的<code>method_missing</code>方法。让我们看看Rails是如何利用这个技巧调用属性方法的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">respond_to_without_attributes?</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">match_attribute_method?</span><span class="p">(</span><span class="nb">method</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>    <span class="n">match</span> <span class="p">?</span> <span class="n">attribute_missing</span><span class="p">(</span><span class="n">match</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="p">:</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>传给<code>method_missing</code>方法的第一个参数是一个用symbol类型表示的方法名，比如，我们的<code>:name_changed?</code>。<code>*args</code>是（未定义的）方法被调用时传入的所有参数，<code>&amp;block</code>是一个可选的代码块。Rails首先通过调用<code>respond_to_without_attributes</code>方法检查是否有别的方法可以对应这次调用。如果别的方法可以处理这次调用，则通过<code>super</code>方法转移控制权。如果找不到别的方法可以处理当前的调用，ActiveModel则会通过<code>match_attribute_method?</code>方法检查当前调用的方法是否是一个属性方法。如果是，它则会接着调用<code>attribute_missing</code>方法。</p>

<p><code>match_attribute_method</code>方法利用了之前声明过的<code>AttributeMethodMatcher</code>对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">match_attribute_method?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">match</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:attribute_method_matcher</span><span class="p">,</span> <span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">match</span> <span class="k">if</span> <span class="n">match</span> <span class="o">&amp;&amp;</span> <span class="n">attribute_method?</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">attr_name</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个方法里边发生了两件事。第一，Rails查找到了一个匹配器(matcher)，并且检查这是否真的是一个属性。说实话，我自己也是比较迷惑，为什么<code>match_attribute_method?</code>方法调用的是<code>self.class.send(:attribute_method_matcher, method_name)</code>，而不是<code>self.attribute_method_matcher(method_name)</code>，但是我们还是可以假设它们的效果是一样的。</p>

<p>如果我们再接着看<code>attribute_method_matcher</code>，就会发现它的最核心的代码仅仅只是扫描匹配了<code>AttributeMethodMatcher</code>实例，它所做的事就是对比对象本身的正则表达式与当前的方法名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_method_matcher</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="n">attribute_method_matchers</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span> <span class="nb">method</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果Rails找到了匹配当前调用的方法的属性，那么接下来所有参数都会被传递给<code>attribute_missing</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_missing</span><span class="p">(</span><span class="n">match</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">__send__</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">target</span><span class="p">,</span> <span class="n">match</span><span class="o">.</span><span class="n">attr_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法将匹配到的属性名以及传入的任意参数或者代码块代理给了<code>match.target</code>。回头看下我们的实例变量，<code>match.target</code>将会是<code>attribute_changed?</code>，而且<code>match.attr_name</code>则是&#8221;name&#8221;。<code>__send__</code>方法将会调用<code>attribute_changed?</code>方法，或者是你定义的任意一个特殊的属性方法。</p>

<h3>元编程（Metaprogramming）</h3>

<p>有很多的方式可以对一个方法的调用进行分发（dispatch），如果这个方法经常被调用，那么实现一个<code>name_changed?</code>方法将会更为有效。Rails通过<code>define_attribute_methods</code>方法做到了对这类属性方法的自动定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">define_attribute_methods</span><span class="p">(</span><span class="o">*</span><span class="n">attr_names</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attr_names</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">attr_name</span><span class="o">|</span> <span class="n">define_attribute_method</span><span class="p">(</span><span class="n">attr_name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">define_attribute_method</span><span class="p">(</span><span class="n">attr_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attribute_method_matchers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">matcher</span><span class="o">|</span>
</span><span class='line'>    <span class="n">method_name</span> <span class="o">=</span> <span class="n">matcher</span><span class="o">.</span><span class="n">method_name</span><span class="p">(</span><span class="n">attr_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_proxy_call</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">generated_attribute_methods</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">method_name</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">matcher</span><span class="o">.</span><span class="n">method_missing_target</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">attr_name</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>matcher.method_name</code>使用了我们前面见到过的格式化字符串，并且插入了<code>attr_name</code>。在我们的例子中，<code>"%s_changed?"</code>变成了<code>"name_changed?"</code>。现在我们我们准备好了了解在<code>define_proxy_call</code>中的元编程。下面是这个方法被删掉了一些特殊场景下的代码的版本，你可以在阅读完这篇文章后自己去了解更多的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">define_proxy_call</span><span class="p">(</span><span class="n">include_private</span><span class="p">,</span> <span class="n">mod</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="nb">send</span><span class="p">,</span> <span class="o">*</span><span class="n">extra</span><span class="p">)</span>
</span><span class='line'>  <span class="n">defn</span> <span class="o">=</span> <span class="s2">&quot;def </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">(*args)&quot;</span>
</span><span class='line'>  <span class="n">extra</span> <span class="o">=</span> <span class="p">(</span><span class="n">extra</span><span class="o">.</span><span class="n">map!</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:inspect</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;*args&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">target</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">send</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="n">extra</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mod</span><span class="o">.</span><span class="n">module_eval</span> <span class="o">&lt;&lt;-</span><span class="no">RUBY</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">    #{defn}</span>
</span><span class='line'><span class="sh">      #{target}</span>
</span><span class='line'><span class="sh">    end</span>
</span><span class='line'><span class="no">  RUBY</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里为我们定义了一个新的方法。<code>name</code>就是正要被定义的方法名，而<code>send</code>则是处理器(handler)，另外的<code>extra</code>是属性名。<code>mod</code>参数是一个Rails用<code>generated_attribute_methods</code>方法生成的特殊的模块（module），它被嵌入（mixin）到我们的类中。现在让我们多看一下<code>module_eval</code>方法。这里有三件有趣的事情发生了。</p>

<p>第一件事就是<a href="http://blog.jayfields.com/2006/12/ruby-multiline-strings-here-doc-or.html">HEREDOC</a>被用作一个参数传给了一个方法。这是有点难懂的，但是对某些场景却是非常有用的。举个例子，想象我们在一个服务器响应(response)中有一个方法要用来嵌入Javascript代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_js</span><span class="p">(</span><span class="o">&lt;&lt;-</span><span class="no">JS</span><span class="p">,</span> <span class="ss">:minify</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="sh">  $(&#39;#logo&#39;).show();</span>
</span><span class='line'><span class="sh">  App.refresh();</span>
</span><span class='line'><span class="no">JS</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将会把字符串<code>"$('#logo').show(); App.refresh();"</code>作为调用<code>include_js</code>时传入的第一个参数，而<code>:minify =&gt; true</code>作为第二个参数。在Ruby中需要生成代码时，这是一个非常有用的技巧。值得高兴的是，诸如<a href="https://github.com/textmate/textmate">TextMate</a>这类编辑器都能够识别这个模式，并且正确地高亮显示字符串。即使你并不需要生成代码，HEREDOC对于多行的字符串也是比较有用的。</p>

<p>现在我们就知道了<code>&lt;&lt;-RUBY</code>做了些什么事，但是<code>__FILE__</code>以及<code>__LINE__ + 1</code>呢？<code>__FILE__</code>返回了当前文件的（相对）路径，而<code>__LINE__</code>返回了当前代码的行号。<code>module_eval</code>接收这些参数，并通过这些参数决定新的代码定义在文件中“看起来”的位置。在对于栈跟踪（stack traces）来说是特别有用的。</p>

<p>最后，让我们看一些<code>module_eval</code>中实际执行的代码。我们可以把值替换成我们的<code>name_changed?</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mod</span><span class="o">.</span><span class="n">module_eval</span> <span class="o">&lt;&lt;-</span><span class="no">RUBY</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">  def name_changed?(*args)</span>
</span><span class='line'><span class="sh">    attribute_changed?(&quot;name&quot;, *args)</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'><span class="no">RUBY</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在<code>name_changed?</code>就是一个真实的方法了，比起依赖于<code>method_missing</code>方法的实现，这种方法的开销要小得多。</p>

<h3>总结（Recap）</h3>

<p>我们发现了调用<code>attribute_method_suffix</code>方法会保存一个配置好的对象，这个对象用于Rails中两种元编程方法中的一种。不考虑是否使用了<code>method_missing</code>，或者通过<code>module_eval</code>定义了新的方法，方法的调用最后总会被传递到诸如<code>attribute_changed?(attr)</code>这样的方法上。</p>

<p>走过这次比较宽泛的旅途，我们也收获了一些有用的技巧：</p>

<ul>
<li>你必须使用<code>Hash#fetch</code>从options中读取参数，特别是对于boolean类型参数来说。</li>
<li>诸如<code>"%s_changed"</code>这样的格式化字符串，可以被用于简单的模板。</li>
<li>可以使用<code>Regexp.escape</code>escape正则表达式。</li>
<li>当你试图调用一个未定义的方法时，Ruby会调用<code>method_missing</code>方法。</li>
<li>HEREDOCs可以用在方法参数中，也可以用来定义多行的字符串。</li>
<li><code>__FILE__</code>以及<code>__LINE__</code>指向当前的文件以及行号。</li>
<li>你可以使用<code>module_eval</code>动态生成代码。</li>
</ul>


<p>坚持浏览Rails的源代码吧，你总会发现你原本不知道的宝藏！</p>

<h3>喜欢这篇文章？</h3>

<p><a href="http://Martin91.github.io/blog/2014/03/02/jie-du-rails-xi-lie-fan-yi/">阅读另外8篇</a>《解读Rails》中的文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跟踪model中属性（值）的变更]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/07/zhui-zong-bian-geng/"/>
    <updated>2014-03-07T13:02:47+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/07/zhui-zong-bian-geng</id>
    <content type="html"><![CDATA[<p>此文翻译自<a href="http://monkeyandcrow.com/blog/reading_rails_change_tracking/">Reading Rails &ndash; Change Tracking</a>，限于本人水平，翻译不当之处，敬请指教！</p>

<p>我们今天来看看Rails是如何追踪model里边属性的变更的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Mortimer&quot;</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name_changed?</span>    <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name_was</span>         <span class="c1">#=&gt; &quot;Horton&quot;</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">changes</span>          <span class="c1">#=&gt; {&quot;name&quot;=&gt;[&quot;Horton&quot;,&quot;Mortimer&quot;]}</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">changes</span>          <span class="c1">#=&gt; {}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>name_changed?</code>方法是从哪来的呢？变更又是如何被创建的？让我们顺着这个场景，看看这一切背后的秘密。</p>

<!-- More -->


<p>如果需要跟着我的步骤走，请使用<a href="https://github.com/adamsanderson/qwandry">qwandry</a>打开每一个相关的代码库，或者直接从<a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github</a>查看源码即可。</p>

<h3>ActiveModel</h3>

<p>当你想探寻ActiveRecord里边的功能时，你应该首先了解ActiveModel。ActiveModel（<strong>提示</strong>： 命令行中键入<code>qw activemodel</code>查看代码）定义了没有与数据库捆绑的逻辑。我们将从<code>dirty.rb</code>文件开始。在这个模块最开始的地方，代码调用了<code>attribute_method_suffix</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dirty</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:AttributeMethods</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">attribute_method_suffix</span> <span class="s1">&#39;_changed?&#39;</span><span class="p">,</span> <span class="s1">&#39;_change&#39;</span><span class="p">,</span> <span class="s1">&#39;_will_change!&#39;</span><span class="p">,</span> <span class="s1">&#39;_was&#39;</span>
</span><span class='line'>    <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>attribute_method_suffix</code>定义了定制的属性读写器。这主要用来告诉Rails将一些带有类似<code>_changed?</code>后缀的调用分发到特定的处理器方法上。为了看看它们是如何实现的，请向下滚动代码，并且找到<code>def attribute_changed?</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">changed_attributes</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们将会在另外的一篇文章中再着重介绍如何连接这些方法的细节，当你调用一个类似<code>name_changed?</code>的方法时，Rails将会把<code>"name"</code>作为参数<code>attr</code>传给上述方法。往回看一点点，你会发现<code>changed_attributes</code>只是一个包含了从属性名到旧的属性值的映射的<code>Hash</code>而已：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Returns a hash of the attributes with unsaved changes indicating their original</span>
</span><span class='line'><span class="c1"># values like &lt;tt&gt;attr =&gt; original value&lt;/tt&gt;.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   person.name # =&gt; &quot;bob&quot;</span>
</span><span class='line'><span class="c1">#   person.name = &#39;robert&#39;</span>
</span><span class='line'><span class="c1">#   person.changed_attributes # =&gt; {&quot;name&quot; =&gt; &quot;bob&quot;}</span>
</span><span class='line'><span class="k">def</span> <span class="nf">changed_attributes</span>
</span><span class='line'>  <span class="vi">@changed_attributes</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Ruby中，如果你之前都没有见过<code>||=</code>操作，那么你可能需要了解这其实是一个用于初始化变量值的技巧。当它第一次被访问的时候，变量的值是<code>nil</code>，所以它返回了一个空的<code>Hash</code>并且用其初始化<code>@changed_attributes</code>。当它再一次被访问的时候，<code>@changed_attributes</code>已经被赋值过了。那么现在我们可以回答我们的第一个问题了，<code>name_changed?</code>方法被转发到<code>attribute_changed?</code>方法，而后者会在<code>changed_attributes</code>中查找特定的值。</p>

<p>在我们的例子中，我们看到<code>changes</code>返回一个类似<code>{"name"=&gt;["Horton","Mortimer"]}</code>这样既包含旧的属性值，又包含新的属性值的<code>Hash</code>。让我们这又是如何做到的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">changes</span>
</span><span class='line'>  <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:HashWithIndifferentAccess</span><span class="o">[</span><span class="n">changed</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="kp">attr</span><span class="o">|</span> <span class="o">[</span><span class="kp">attr</span><span class="p">,</span> <span class="n">attribute_change</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码看起来有点难以理解，但是我们可以一步一步分析。首先我们从<code>ActiveSupport::HashWithIndifferentAccess</code>开始，这是在ActiveSupport中所定义的<code>Hash</code>的子类，通过字符串类型或者符号类型的键去访问它将得到一样的结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:HashWithIndifferentAccess</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Mortimer&quot;</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;name&quot;</span><span class="o">]</span> <span class="c1">#=&gt; &quot;Mortimer&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来就有点奇怪了，Rails调用了<code>Hash[]</code>方法。这是一个鲜为人知的从包含键/值对的数组中初始化一个哈希表的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Hash</span><span class="o">[</span>
</span><span class='line'>  <span class="o">[</span><span class="ss">:name</span><span class="p">,</span> <span class="s2">&quot;Mortimer&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="o">[</span><span class="ss">:species</span><span class="p">,</span> <span class="s2">&quot;Crow&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span> <span class="c1">#=&gt; {[:name, &quot;Mortimer&quot;]=&gt;[:species, &quot;Crow&quot;]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以查看<code>Hash Tricks</code>找到更多类似的方法。<code>changes</code>中剩余部分的代码就比较清晰了。属性名被映射到类似<code>[attr, attribute_change(attr)]</code>的数组。其中第一个元素，也就是<code>attr</code>编程了一个键，而对应的值则是<code>attribute_change(attr)</code>返回的结果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_change</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>  <span class="o">[</span><span class="n">changed_attributes</span><span class="o">[</span><span class="kp">attr</span><span class="o">]</span><span class="p">,</span> <span class="nb">__send__</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span><span class="o">]</span> <span class="k">if</span> <span class="n">attribute_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是另一个被分发的属性方法，但是在这个例子里，它返回了一个包含了两个元素的数组，第一个元素是从<code>changed_attributes</code>哈希表中读到的<code>attr</code>所对应的旧的值，第二个则是所对应的新的值。Rails通过使用<code>__send__</code>方法调用了名为<code>attr</code>的方法，进而得到新的属性值。然后这对值会被返回，并且用作<code>changes</code>哈希表中<code>attr</code>所对应的值。</p>

<h3>ActiveRecord</h3>

<p>现在让我们来找出Rails是如何记录更改的。ActiveRecord实现了读写ActiveModel所跟踪的属性的代码。跟ActiveModel一样，ActiveRecord也有一个<code>dirty.rb</code>文件，我们将要对这个文件进行挖掘。通过在定义了<code>changed_attributes</code>的文件中（<strong>提示</strong>：命令行中键入<code>qw activerecord</code>）找到的相关代码，我们可以看到这个文件包装了ActiveRecord的<code>write_attribute</code>与逻辑以实现对变更的跟踪。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Wrap write_attribute to remember original attribute value.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">write_attribute</span><span class="p">(</span><span class="kp">attr</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">attr</span> <span class="o">=</span> <span class="kp">attr</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># The attribute already has an unsaved change.</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">attribute_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>    <span class="n">old</span> <span class="o">=</span> <span class="vi">@changed_attributes</span><span class="o">[</span><span class="kp">attr</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@changed_attributes</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span> <span class="k">unless</span> <span class="n">_field_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">,</span> <span class="n">old</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">old</span> <span class="o">=</span> <span class="n">clone_attribute_value</span><span class="p">(</span><span class="ss">:read_attribute</span><span class="p">,</span> <span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@changed_attributes</span><span class="o">[</span><span class="kp">attr</span><span class="o">]</span> <span class="o">=</span> <span class="n">old</span> <span class="k">if</span> <span class="n">_field_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">,</span> <span class="n">old</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Carry on.</span>
</span><span class='line'>  <span class="k">super</span><span class="p">(</span><span class="kp">attr</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们暂时偏离一下主题，并且看一下方法的包装。这是在Rails的代码里边非常常见的模式。当你调用<code>super</code>的时候，Ruby查找当前对象的所有祖先，包括相关的模块。由于一个类可以引进多个模块，所以你可以多层地包装方法。这里是一个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Shouting</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="n">message</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Speaker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Shouting</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="k">super</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Speaker</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span><span class="p">(</span><span class="s2">&quot;Hi!&quot;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;HI!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>请注意<code>Shouting</code>是<code>Speaker</code>所包含的模块，而不是后者所扩展的类。Rails使用这种技巧去包装方法，以此确保在不同的文件里有独立的关注点（Concern）。这也意味着为了了解整个系统，你可能需要从多个文件里边找到相关的代码。假如你看到了一个对<code>super</code>的调用，这是一个可以告诉你在别的地方还有更多代码需要了解的好线索。假如你想学习更多的这方面的知识，James Coglan有一个非常详细的文章讲解了Ruby的<a href="https://blog.jcoglan.com/2013/05/08/how-ruby-method-dispatch-works/">方法分发</a>。</p>

<p>回到<code>write_attribute</code>方法。根据属性（值）是否已经改变，会有两个可能的场景。第一个分支检查你是否正在将一个属性（值）还原到原来的值，如果是这样，它将会从记录了已改变属性的哈希表中删除属性。第二个分支仅仅在新的值与旧的值不同的时候记录下更改。一旦更改被记录下来，实际的用于更新属性的逻辑通过调用<code>super</code>方法完成。</p>

<h3>总结</h3>

<p>Rails为你的model提供了变更的跟踪。这个功能是在ActiveModel中实现的，但是真正的监测更改的逻辑则是在ActiveRecord中实现的。</p>

<p>通过了解这个功能，我们也发掘到了一些有趣的小贴士：</p>

<ul>
<li>ActiveModel定义了<code>attribute_method_suffix</code>方法用于分发类似<code>name_changed?</code>的方法。</li>
<li><code>||=</code>操作符是一个可以用来初始化变量的方便的方法。</li>
<li>在<code>HashWithIndifferentAccess</code>中，字符串类型以及符号类型的键是一样的。</li>
<li><code>Hash</code>可以通过<code>Hash[key_value_pairs]</code>方法初始化。</li>
<li>你可以使用模块拦截方法并为方法加上另一层的功能。</li>
</ul>


<p>假如你有关于你想阅读的关于Rails中其他部分的建议，请让我知道。</p>

<h3>喜欢这篇文章？</h3>

<p><a href="http://Martin91.github.io/blog/2014/03/02/jie-du-rails-xi-lie-fan-yi/">阅读另外8篇</a>“解读Rails”中的文章。</p>
]]></content>
  </entry>
  
</feed>

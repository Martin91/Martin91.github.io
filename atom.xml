<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Martin]]></title>
  <link href="http://Martin91.github.io/atom.xml" rel="self"/>
  <link href="http://Martin91.github.io/"/>
  <updated>2016-08-02T15:19:04+08:00</updated>
  <id>http://Martin91.github.io/</id>
  <author>
    <name><![CDATA[Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[嘿，小心你的双等号==]]></title>
    <link href="http://Martin91.github.io/blog/articles/2016/01/17/pay-attention-to-your-double-equals/"/>
    <updated>2016-01-17T01:40:48+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2016/01/17/pay-attention-to-your-double-equals</id>
    <content type="html"><![CDATA[<p>前两天在写代码的时候，突然收到警告说项目代码中存在 XSS 漏洞，遂立即根据报告的 URL 排查页面代码，虽然很快就修复了，而且同样问题的讨论两年前就有了，看<a href="https://ruby-china.org/topics/16633">RubyChina: 别用 raw 和 html_safe</a>，一般来说相对有经验的老鸟也应该都知道这个点，但是还是觉得有必要写出来，再次提醒一下其他小伙伴，避免踩坑。</p>

<!-- MORE -->


<h2>问题根源</h2>

<p>其中，在找到的漏洞出现的地方，都存在类似以下这样的 slim 代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">==</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>问题就出在双等号 <code>==</code> 上，因为在 <strong>slim</strong> 跟 <strong>ERB</strong> 模板（其他模板比如 HAML 之类的就不清楚了）中，双等号其实是 Rails 的 <code>raw</code> 这个 helper 方法的缩写，<a href="http://edgeguides.rubyonrails.org/active_support_core_extensions.html#output-safety">参考链接</a>：</p>

<blockquote><p>To insert something verbatim use the raw helper rather than calling html_safe:</p>

<pre><code>&lt;%= raw @cms.current_template %&gt; &lt;%# inserts @cms.current_template as is %&gt;
</code></pre>

<p>or, equivalently, use <code>&lt;%==</code>:</p>

<pre><code>&lt;%== @cms.current_template %&gt; &lt;%# inserts @cms.current_template as is %&gt;
</code></pre></blockquote>

<p>也就是说上面的代码等同于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">=</span><span class="n">raw</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>raw</code> 方法在 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw">Rails 文档</a>中的解释是这样子的：</p>

<blockquote><p>This method outputs without escaping a string. Since escaping tags is now default, this can be used when you don&rsquo;t want Rails to automatically escape tags. This is not recommended if the data is coming from the user&rsquo;s input.</p></blockquote>

<p>大概意思就是，这个方法将会跳过对传入的字符串进行标签过滤以及其他处理，直接将字符串输出到 HTML 中。<br/>
所以到现在原因就很清晰了，因为不小心在代码里多加了一个等号，变成了双等号，导致将会直接把用户的输入输出到待渲染的 HTML 中，在不自知的情况下留下了 XSS 漏洞。于是乎，修复方案仅需去掉一个等号即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">=</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，Rails 就能继续自动过滤输入的 <code>:account</code> 的参数并且自动过滤恶意内容了。</p>

<h2>raw、String#html_safe 以及 &lt;%== %></h2>

<p>在查看 <code>raw</code> 方法的文档时，顺便看了其源码，极其简单，只有一行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File actionview/lib/action_view/helpers/output_safety_helper.rb, line 16</span>
</span><span class='line'><span class="k">def</span> <span class="nf">raw</span><span class="p">(</span><span class="n">stringish</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stringish</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>raw</code> 只是先确保将 <code>stringish</code> 参数转化为字符串，然后调用了 <a href="http://api.rubyonrails.org/classes/String.html#method-i-html_safe"><code>String#html_safe</code></a> 方法而已。而且在 <code>String#html_safe</code> 的文档中，同样反复强调慎重使用这两个方法：</p>

<blockquote><p>It will be inserted into HTML with no additional escaping performed. It is your responsibilty to ensure that the string contains no malicious content. This method is equivalent to the <code>raw</code> helper in views.</p></blockquote>

<p>所以，可以总结一下，以下三种写法的代码都是等价的，都是不安全的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">==</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span>
</span><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">=</span><span class="n">raw</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">input</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span> <span class="n">value</span><span class="o">=</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">].</span><span class="n">html_safe</span>
</span></code></pre></td></tr></table></div></figure>


<p>那在切实需要输出包含 HTML 内容比如富文本编辑器编辑的内容时，如何保证安全？<br/>
方案很简单，只需要使用文档中推荐的 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize"><code>sanitize</code></a> helper 方法：</p>

<blockquote><ol>
<li>It is recommended that you use <code>sanitize</code> instead of this method(html_safe).</li>
<li>(#sanitize)Sanitizes HTML input, stripping all tags and attributes that aren&rsquo;t whitelisted.</li>
</ol>
</blockquote>

<p>或者使用一些其他第三方的 gem 用来做过滤处理。</p>

<h2>总结</h2>

<ol>
<li>不要使用双等号缩写的方式，以避免其他人（比如项目里的 Rails 新手）在不了解的情况下照着滥用；</li>
<li>尽可能不用 <code>raw</code> helper 或者 <code>String#html_safe</code> 方法，尽可能使用 <code>#sanitize</code>；</li>
<li>多借助工具进行自动扫描，比如 <a href="http://brakemanscanner.org/"><code>brakeman</code></a>，能够快速高效检测出包括 XSS 漏洞在内的多种安全隐患。</li>
</ol>


<h2>参考链接</h2>

<ol>
<li><a href="https://ruby-china.org/topics/16633">别用 raw 和 html_safe</a></li>
<li><a href="http://brakemanscanner.org/">BrakemanScanner</a></li>
<li><a href="http://guides.rubyonrails.org/active_support_core_extensions.html#safe-strings">Rails Guides: Safe Strings</a></li>
<li><a href="http://wiki.open.qq.com/wiki/Web%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E5%8F%8A%E4%BF%AE%E5%A4%8D#1.2_XSS.E6.BC.8F.E6.B4.9E">腾讯开放平台：XSS漏洞</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cross-site_scripting">Wikipedia: Cross-site scripting</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw">Rails API: #raw</a></li>
<li><a href="http://api.rubyonrails.org/classes/String.html#method-i-html_safe">Rails API: String#html_safe</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谨防 ActiveSupport::Cache::Store 缓存 nil 值]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/10/30/jin-fang-activesupport-cache-store-huan-cun-nil-zhi/"/>
    <updated>2015-10-30T20:48:41+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/10/30/jin-fang-activesupport-cache-store-huan-cun-nil-zhi</id>
    <content type="html"><![CDATA[<p>Rails 中的 <strong><a href="https://github.com/rails/rails/tree/master/activesupport">active_support</a></strong> 组件主要基于 Rails 需要提供了很多非常有用的基础工具以及对 Ruby 内置类进行扩展。其中的 cache 模块主要提供了 Rails 中底层缓存的定义以及简单实现。今天要跟大家探讨的是之前在使用此模块所遇到的一个坑，有兴趣学习其基本用法的可以点击以下两个链接：</p>

<ul>
<li><a href="http://guides.rubyonrails.org/caching_with_rails.html#activesupport-cache-store">Rails Guides: ActiveSupport::Cache::Store</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html">Rails API: ActiveSupport::Cache::Store</a></li>
</ul>


<!-- MORE -->


<h3>从 ActiveSupport::Cache::Store#fetch 聊起</h3>

<p>之前在实现一个需要从外部服务请求数据的功能时，处于性能考虑，我在代码中使用了缓存，并且设置缓存失效时间为 7 天，示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">read_external_service</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 这段代码稍微解释下：</span>
</span><span class='line'>  <span class="c1">#   当缓存命中时，则直接读取缓存，如果无期待缓存，则通过 HTTP 向外请求结果，并且将结果</span>
</span><span class='line'>  <span class="c1">#   缓存下来，这样子，当下次继续调用时，则可直接返回缓存内容，而无需重复向外请求</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="s1">&#39;example_cache_key_here&#39;</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;https://example.com/example/request/path&#39;</span>
</span><span class='line'>    <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码其实不复杂，核心代码就是使用了 <a href="http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html#method-i-fetch"><code>ActiveSupport::Cache::Store#fetch</code></a> 方法。</p>

<p>一切都很正常地运行着，直到有一天，线上系统不断报警，出错原因就是这段代码总是返回 <code>nil</code> ，而调用者又因为没有判断 <code>nil</code> 值，就会出现 <code>undefined method 'xxx' for nil:NilClass</code> 错误。在 debug 时，我尝试了直接调用外部服务接口，发现请求都有正确返回数据，不可能返回 <code>nil</code> 啊，难道是缓存了 <code>nil</code> 值？下面就直接通过代码验证一下！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;active_support&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Cache</span><span class="o">::</span><span class="no">MemoryStore</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="c1">#ActiveSupport::Cache::MemoryStore entries=0, size=0, options={}&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">read</span> <span class="ss">:nil_value</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">exist?</span> <span class="ss">:nil_value</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="ss">:nil_value</span> <span class="k">do</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="kp">nil</span>   <span class="c1"># this `nil` value will be cached</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">read</span> <span class="ss">:nil_value</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">exist?</span> <span class="ss">:nil_value</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>看吧， <code>fetch</code> 方法确实会缓存 <code>nil</code> 值（通过 <code>exist?</code> 方法可以判断是否缓存了指定的 key ），所以系统出错原因就清晰了：在某次代码执行中，我的缓存刚好失效了，所以系统向外部发送了请求，恰巧这时候外部系统因为故障或者其他可能原因，没有返回期待数据，导致代码中最终缓存了 <code>nil</code> 值，在接下来的时间里，虽然外部系统可能恢复了正确服务，可是这时候因为我们的系统已经缓存了 <code>nil</code>值，所以在每次调用时都返回缓存的 <code>nil</code>，而不是重新请求正确结果，导致最后不停的报错告警。</p>

<p>这里插播一句，通过后来仔细查阅文档，才发现文档里已经注明：</p>

<blockquote><p>Nil values can be cached.</p></blockquote>

<p><strong>╮(╯▽╰)╭ 怪我咯~</strong></p>

<h3>解决方案</h3>

<p>意识到这个问题之后，解决思路简单粗暴，就是在可能返回 <code>nil</code> 值的地方放弃写入缓存：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">read_external_service</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cache_key</span> <span class="o">=</span> <span class="s1">&#39;example_cache_key_here&#39;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 缓存命中，且内容不为 nil ，直接返回缓存内容</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span> <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 缓存失效，只能重新请求了~</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;https://example.com/example/request/path&#39;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 请求结果正确，写入缓存；否则，放弃之~~~</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cache_key</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span><span class="p">)</span> <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>呃~~~虽然解决问题了，可是，就为了告诉系统不要相信 <code>nil</code>，就写得这么繁琐，好么？好么？好么？</p>

<h3>踏上阅读源码之路</h3>

<p>我尝试搜索了 <code>#fetch</code> 方法是否有支持比如 <code>reject_nil</code> 这样的 option，可惜的是，没有！可是真的没有吗？我不信！看源码去！</p>

<p>首先还是拜访下 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L154"><code>ActiveSupport::Cache::Store</code></a> 这个类啦，它可是所有缓存实现类的抽象类，别问我抽象类是什么，就是它明明只说话不干活，但是其他干活的都得向它看齐！好啦，说人话，其实就是说，我们在调用 <code>Rails.cache.read</code>、<code>Rails.cache.fetch</code> 等读写方法时，这些方法都是在 <code>ActiveSupport::Cache::Store</code> 中定义的，但是它只定义逻辑，而实际底层的读写实现，则都是交由其各种子类实现的，比如前面的 <code>ActiveSupport::Cache::MemoryStore</code>。</p>

<p>首先让我们来看看 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L275"><code>fetch</code></a>方法的全部内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fetch</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>    <span class="n">options</span> <span class="o">=</span> <span class="n">merged_options</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">namespaced_key</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">instrument</span><span class="p">(</span><span class="ss">:read</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">payload</span><span class="o">|</span>
</span><span class='line'>      <span class="n">cached_entry</span> <span class="o">=</span> <span class="n">read_entry</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:force</span><span class="o">]</span>
</span><span class='line'>      <span class="n">payload</span><span class="o">[</span><span class="ss">:super_operation</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:fetch</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>      <span class="n">entry</span> <span class="o">=</span> <span class="n">handle_expired_entry</span><span class="p">(</span><span class="n">cached_entry</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">entry</span>
</span><span class='line'>        <span class="n">payload</span><span class="o">[</span><span class="ss">:hit</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>        <span class="n">get_entry_value</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">payload</span><span class="o">[</span><span class="ss">:hit</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>        <span class="n">save_block_result_to_cache</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">_name</span><span class="o">|</span> <span class="k">yield</span> <span class="n">_name</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">read</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从代码中可以看到，当 <code>#fetch</code> 方法调用时没有传递 block 的话，它本质上就是 <code>read</code> 方法的别名而已。而当调用时传递了 block 的话，即如我前面的示例代码，让我们把代码分开看下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cached_entry</span> <span class="o">=</span> <span class="n">read_entry</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:force</span><span class="o">]</span>
</span><span class='line'><span class="n">payload</span><span class="o">[</span><span class="ss">:super_operation</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:fetch</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'><span class="n">entry</span> <span class="o">=</span> <span class="n">handle_expired_entry</span><span class="p">(</span><span class="n">cached_entry</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>它首先判断是否设置了 <code>force</code> 选项，如果有，则不读取缓存，由此模拟缓存强制失效；如果未设置 <code>force</code> 选项或者该选项不等于 true value，则尝试读取缓存，并且调用 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L564-L578"><code>handle_expired_entry</code></a>判断缓存是否仍旧有效。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">entry</span>
</span><span class='line'>  <span class="n">payload</span><span class="o">[</span><span class="ss">:hit</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>  <span class="n">get_entry_value</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这三行代码，则是在缓存命中时，直接读取缓存内容并且返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">payload</span><span class="o">[</span><span class="ss">:hit</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">payload</span>
</span><span class='line'>  <span class="n">save_block_result_to_cache</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">_name</span><span class="o">|</span> <span class="k">yield</span> <span class="n">_name</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>else</code> 的代码则表示，在缓存无命中时， <code>#fetch</code> 代码直接调用 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L585-L592"><code>#save_block_result_to_cache</code></a> 方法，并且向其传递了一个 block，这个 block 没有干别的事情，它只会执行我们传递给 <code>#fetch</code> 方法的 block，让我们接着往下看看相关的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">save_block_result_to_cache</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">instrument</span><span class="p">(</span><span class="ss">:generate</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">payload</span><span class="o">|</span>
</span><span class='line'>    <span class="k">yield</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，<code>#save_block_result_to_cache</code> 方法首先执行传递进来的代码块，实际上也就是我们期待在缓存失效时执行的代码，而在获得执行结果 <code>result</code> 后，方法通过调用 <a href="https://github.com/rails/rails/blob/edd33c08d98723ae9bb89cf7f019277117ed6414/activesupport/lib/active_support/cache.rb#L384-L391"><code>#write</code></a> 方法将结果写入缓存，最后将 <code>result</code> 返回。</p>

<p>通过上面的源码分析，我们可以知道，当缓存失效时，<code>#fetch</code> 方法会直接将其代码块中的代码的返回值<strong>不加判断</strong>地写入缓存，并且返回该返回值。这里，或许我们可以做点什么，来实现我们想要支持 <code>:reject_nil</code> 的需求？</p>

<h3>支持 <code>:reject_nil</code> option</h3>

<p>为了支持 <code>:reject_nil</code>，我们只需要在写入缓存前判断是否真的需要 <code>nil</code> 值即可，于是我们只需要在 <code>#save_block_result_to_cache</code> 中加入 <code>#write</code> 的前置条件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">save_block_result_to_cache</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">instrument</span><span class="p">(</span><span class="ss">:generate</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">payload</span><span class="o">|</span>
</span><span class='line'>    <span class="k">yield</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># options[:reject_nil] &amp;&amp; result.nil? 作为前置条件</span>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">unless</span> <span class="n">result</span><span class="o">.</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:reject_nil</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>话不多说，让我们来重新试验一番：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;active_support&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Cache</span><span class="o">::</span><span class="no">MemoryStore</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="c1">#ActiveSupport::Cache::MemoryStore entries=0, size=0, options={}&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="ss">:nil_key1</span> <span class="k">do</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">exist?</span> <span class="ss">:nil_key1</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="ss">:nil_key2</span><span class="p">,</span> <span class="n">reject_nil</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">.</span><span class="n">exist?</span> <span class="ss">:nil_key2</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，当我们调用 <code>#fetch</code> 方法时，如果没有传递 <code>reject_nil: true</code>，则 <code>#fetch</code> 方法会默认缓存 <code>nil</code> 值；而如果我们设置 <code>reject_nil: true</code> 的话，则 <code>#fetch</code> 就会放弃写入 <code>nil</code> 值到缓存中。试验成功！！！</p>

<p>基于这样的实现，我的代码就又可以改为如下了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">read_external_service</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 所有改动只是加了一个 `reject_nil: true`，多方便，妈妈再也不用担心我掉到坑里去了</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span> <span class="s1">&#39;example_cache_key_here&#39;</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">reject_nil</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;https://example.com/example/request/path&#39;</span>
</span><span class='line'>    <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>待会去给 Rails 提交 Pull Request 去 <strong>O(∩_∩)O~~</strong></p>

<h3>总结</h3>

<ul>
<li>缓存是好个东西，用得好能够让应用性能表现突飞猛进</li>
<li>要注意缓存写入的边界条件，要注意避免缓存了空值，但也并非所有空值都不能缓存（比如有些接口确实就是有可能返回空值嘛），具体看业务，没有绝对的要与不要，反正 <code>:reject_nil</code> 给你了，看你要不要</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 chinese_pinyin + friendly_id 为中文标题生成 slug]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/10/21/use-chinese-pinyin-and-friendly-id-to-generate-slugs/"/>
    <updated>2015-10-21T22:20:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/10/21/use-chinese-pinyin-and-friendly-id-to-generate-slugs</id>
    <content type="html"><![CDATA[<p>在许多项目中，我们可能都会遇到需要为数据生成 slug 的场景，这些场景类似于：</p>

<ul>
<li>基于商品名称生成 slug</li>
<li>基于文章标题生成 slug</li>
</ul>


<p>至于为什么需要生成 slug，而不是使用比如 Rails 中默认自增的主键也就是数据的 id，原因其实很简单：</p>

<ul>
<li>使用自增 id 容易暴露数据，比如通过订单 id 可能导致遍历所有订单，不信，你看这里就有个<a href="http://www.wooyun.org/bugs/wooyun-2015-0127301">例子</a></li>
<li>增加 URL 友好性，/products/18376 这样的链接肯定没有比 /products/apple-watch-gold 这样的链接更招人喜欢</li>
</ul>


<!-- MORE -->


<h3><a href="https://github.com/norman/friendly_id">friendly_id</a></h3>

<p>friendly_id 是用来生成 slug 的 ruby gem，假设我们有一个产品模型 <code>Product</code>，使用 friendly_id 为商品名称(<code>name</code>)生成 slug 的示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">friendly_id</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">use</span><span class="p">:</span> <span class="ss">:slugged</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码理论上来说已经完成我们所需要的工作了，但是如果 title 包含中文的话，生成的 slug 就有点类似 <code>30f175f4-1e56-4e3a-823d-a7c1a5d32b29</code> 这样的乱码了，实际上这个 slug 对应的原来的 title 是 <code>测试产品</code>。这样的 slug 虽然避免了自增 id 的弊端，但是却丧失了友好性。如果 slug 能够基于汉语拼音生成，岂不更好？</p>

<h3>自己控制 slug 生成方式</h3>

<p>阅读 <a href="https://github.com/norman/friendly_id/blob/master/lib/friendly_id/slugged.rb#L290-L292">friendly_id 的源码</a>可以找到以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">FriendlyId</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Slugged</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">normalize_friendly_id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">parameterize</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码便是 friendly_id 基于输入生成 slug 的核心代码，使用 ActiveSupport 扩展后的 <code>String</code> 类的 <a href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html#method-i-parameterize"><code>parameterize</code></a> 方法，此方法会将除了英文字母、数字、短横线以及下划线之外的字符转换为 <code>-</code>，所以不适用于中文的情况，我们需要<a href="https://github.com/norman/friendly_id/blob/master/lib/friendly_id/slugged.rb#L259-L261">重写该方法</a>，以满足我们的需求。</p>

<h3>中文拼音利器——<a href="https://github.com/flyerhzm/chinese_pinyin">chinese_pinyin</a></h3>

<p>中文生成中文拼音的工具，我选择了黄志敏先生写的 <code>chinese_pinyin</code> 这个 gem，推荐理由就是简单够用。</p>

<p>以下是单独使用这个 gem 时的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="no">Pinyin</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;中国人&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;zhong guo ren&quot;</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="no">Pinyin</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;Hello, 李雷&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;Hello  li lei&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>组装！！！</h3>

<p>根据 <a href="https://github.com/norman/friendly_id/blob/master/lib/friendly_id/slugged.rb#L259-L261">friendly_id 的注释</a>，如果你只需要为单独一个 model 定制 slug 的生成逻辑，那么建议你只在相关的 model 中定义同名方法即可。但是由于我是需要为多个 model 定制中文的 slug 生成逻辑，所以我选择了直接重定义 <code>FriendlyId::Slugged</code> 模块中的这个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/initializers/friendly_id/slugged.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">FriendlyId</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Slugged</span>
</span><span class='line'>    <span class="c1"># 重定义 friendly_id 方法，实现 slug 从中文到拼音，非中文不受影响</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">normalize_friendly_id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Pinyin</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span><span class="o">.</span><span class="n">parameterize</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的定义方式使得新的 <code>normalize_friendly_id</code> 方法对所有依赖 friendly_id 的代码都生效。</p>

<p>最后通过新的方法为我们的产品生成新的 slug，现在“测试产品”得到的 slug 变为 <code>ce-shi-chan-pin</code> 了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">slug</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>  <span class="c1"># 显式清空 slug, friendly_id 在 save 时会自动重新生成 slug</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后产品的链接已变为 <code>/products/ce-shi-chan-pin</code>，比起 <code>/products/30f175f4-1e56-4e3a-823d-a7c1a5d32b29</code>，可真是叫人心旷神怡。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL IN 查询，并通过 FIELD 函数按照查询条件顺序返回结果]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/09/13/mysql-in-query-and-order-by-field-function/"/>
    <updated>2015-09-13T20:24:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/09/13/mysql-in-query-and-order-by-field-function</id>
    <content type="html"><![CDATA[<p>我们都非常习惯通过 MySQL 的 <a href="https://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#function_in">IN 函数</a>来查询特定集合的数据，比如为了在 books 表中找出李雷、韩梅梅和安华写的书，我们可以有如下的 SQL（可以通过 <a href="http://sqlfiddle.com/#!9/1982d">SQL Fiddle</a>查看示例）：</p>

<!-- MORE -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">books</span> <span class="k">WHERE</span> <span class="o">`</span><span class="n">books</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">author</span><span class="o">`</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;李雷&#39;</span><span class="p">,</span><span class="s1">&#39;韩梅梅&#39;</span><span class="p">,</span><span class="s1">&#39;安华&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>数据库返回如下结果：</p>

<table>
<thead>
<tr>
<th></th>
<th> author </th>
<th>     title      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 安华   </td>
<td> 暴走漫画</td>
</tr>
<tr>
<td></td>
<td> 李雷   </td>
<td> 蓝色生死恋</td>
</tr>
<tr>
<td></td>
<td> 韩梅梅 </td>
<td> 冰与火之歌</td>
</tr>
<tr>
<td></td>
<td> 韩梅梅 </td>
<td> 天国的阶梯</td>
</tr>
<tr>
<td></td>
<td> 李雷   </td>
<td> 这个杀手不太冷</td>
</tr>
<tr>
<td></td>
<td> 韩梅梅 </td>
<td> 阿甘正传</td>
</tr>
</tbody>
</table>


<p>虽然这样确实能够返回所有李雷、韩梅梅和安华写过的书，但是返回的数据的排序方式是默认按照数据在数据库中的存储顺序，假如我们需要的返回结果是同时按照 IN 查询条件里边的参数顺序来排序呢？这个时候我们就需要利用到 MySQL <a href="https://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_field">FIELD</a> 这个函数了，FIELD 函数本来是 MySQL 提供用来查询某一个字符串在给定字符串元组中的索引位置的，比如这个官方例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">FIELD</span><span class="p">(</span><span class="s1">&#39;ej&#39;</span><span class="p">,</span> <span class="s1">&#39;Hej&#39;</span><span class="p">,</span> <span class="s1">&#39;ej&#39;</span><span class="p">,</span> <span class="s1">&#39;Heja&#39;</span><span class="p">,</span> <span class="s1">&#39;hej&#39;</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span> <span class="o">#</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果将其应用在 <a href="http://dev.mysql.com/doc/internals/en/optimizer-order-by-clauses.html"><code>ORDER BY</code></a> 排序条件中，就可以根据指定字段的值在给定参数列表中的索引数值，进而将查询结果按照参数列表排序了（示例请访问 <a href="http://sqlfiddle.com/#!9/46ccc/5">SQL Fiddle</a>）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">books</span> <span class="k">WHERE</span> <span class="o">`</span><span class="n">books</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">author</span><span class="o">`</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;李雷&#39;</span><span class="p">,</span><span class="s1">&#39;韩梅梅&#39;</span><span class="p">,</span><span class="s1">&#39;安华&#39;</span><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">FIELD</span><span class="p">(</span><span class="n">author</span><span class="p">,</span> <span class="s1">&#39;李雷&#39;</span><span class="p">,</span><span class="s1">&#39;韩梅梅&#39;</span><span class="p">,</span><span class="s1">&#39;安华&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一次，返回的结果则是：</p>

<table>
<thead>
<tr>
<th></th>
<th> author </th>
<th>     title      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>李雷 </td>
<td>  蓝色生死恋</td>
</tr>
<tr>
<td></td>
<td>李雷 </td>
<td>  这个杀手不太冷</td>
</tr>
<tr>
<td></td>
<td>韩梅梅 </td>
<td> 冰与火之歌</td>
</tr>
<tr>
<td></td>
<td>韩梅梅 </td>
<td> 天国的阶梯</td>
</tr>
<tr>
<td></td>
<td>韩梅梅 </td>
<td> 阿甘正传</td>
</tr>
<tr>
<td></td>
<td>安华 </td>
<td>  暴走漫画</td>
</tr>
</tbody>
</table>


<p>可以发现，这一次，我们得到的结果就是按照条件参数列表 <code>'李雷','韩梅梅','安华'</code> 进行排序后得到了。</p>

<h3>应用层面的思考</h3>

<h4>1. 兼容性</h4>

<p>本文提到的 <code>FIELD</code> 函数，毕竟只是 MySQL 数据库内置提供的一种函数，除非你非常明确你的项目就是只用 MySQL 数据库，否则，你的 SQL 代码在未来迁移到其他数据库的过程中就会遇到语法兼容性问题（只是 PostgreSQL 数据库不支持 FIELD）。</p>

<h4>2. 性能问题</h4>

<p>我们都知道，数据库在进行 <code>ORDER BY</code> 排序的时候，除非它是按照某个已经存在索引的键的值进行排序，否则数据库则需要通过计算 <code>ORDER BY</code> 中表达式的值并且按照查询结果建立新的临时表，这个过程会带来额外的时间开销跟内存开销，对数据库本身就是一种性能负担。这样的方式在单一数据库多个数据库客户端连接的时候，可能对数据库造成太大负担。</p>

<h4>3. 与应用层代码的结合</h4>

<p>尽管使用 <code>FIELD</code> 函数可能带来兼容性以及性能方面的隐患，但是 <code>FIELD</code> 的使用并非全是有损之处。</p>

<p>比如在与 Ruby 的 active_record 结合时，这种通过数据库直接完成排序等 SQL 语句可以方便我们构建 ActiveRecord::Relation 对象，因为我们不再需要先将查询结果集从内存中转为数组排序，再进行二次查询，可以帮助我们减少 <a href="https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/">N+1 查询问题</a>，后者也是常见的影响数据库服务器性能的现象之一。除此之外，这样的写法也可以有效地帮助我们简化代码，保持代码简洁。</p>

<p>但是在不需要对数据进行二次查询或者查询数据量太大的情况下，我反而建议可以通过 Ruby 的 <code>Array#sort_by</code> 方法对数据进行排序，这样的话，排序的任务就转移给了客户端代码，排序任务的压力就自然分散，减轻了服务器端的压力。</p>

<h3>总结</h3>

<ol>
<li>FIELD 函数结合 ORDER BY 可以帮助我们将查询结果集按照参数列表顺序返回；</li>
<li>FIELD 函数结合 ORDER BY 的方式可以帮助我们在数据库层面完成排序，简化了业务代码逻辑；</li>
<li>FIELD 函数结合 ORDER BY 可能带来 SQL 兼容性以及性能方面的问题；</li>
<li>在确认项目数据库不大可能为 MySQL
之外的数据库的前提下，查询数据量少或者需要保持业务代码简洁的场景下，我建议可以采用 FIELD 函数排序；而在数据量庞大的情况下，或者不大可能出现大量 N+1 查询的情况下，我建议可以采用先在数据库中查询数据集（只查询 IN 条件，不排序）再到内存中通过业务代码排序(比如 Ruby 的 <code>Array#sort_by</code>)的方式。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apdex——衡量服务器性能的标准]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/07/30/the-correct-way-to-metric-server-response-time/"/>
    <updated>2015-07-30T12:12:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/07/30/the-correct-way-to-metric-server-response-time</id>
    <content type="html"><![CDATA[<p>日常工作中，我们总是习惯于通过量化的标准去衡量我们对事物的评价，比如美食点评的星级、酒店的星级、每个个人的信用评分等等。而作为一个 Web 工程师，我们也总是在意于我们网站的性能，因为网站的性能会最直接地影响用户的体验。今天要介绍的就是一种同样能够帮助工程师对应用性能进行量化评估的标准 —— Apdex 。</p>

<!-- MORE -->


<p>Apdex 全称是 Application Performance Index，是由 Apdex 联盟开放的用于评估应用性能的工业标准。Apdex 联盟起源于 2004 年，由 <a href="http://apdex.org/bios.html">Peter Sevcik</a>发起。Apdex 标准从用户的角度出发，将对应用响应时间的表现，转为用户对于应用性能的可量化为范围为 0-1 的满意度评价。</p>

<h3>术语</h3>

<p>Apdex 定义了应用响应时间的最优门槛为T，另外根据应用响应时间结合 T 定义了三种不同的性能表现：</p>

<ul>
<li><strong>Satisfied（满意）</strong>：应用响应时间低于或等于 T（T 由性能评估人员根据预期性能要求确定），比如 T 为 1.5s，则一个耗时 1s 的响应结果则可以认为是 satisfied 的。</li>
<li><strong>Tolerating（可容忍）</strong>：应用响应时间大于 T，但同时小于或等于 4T。假设应用设定的 T 值为 1s，则 4 * 1 = 4 秒极为应用响应时间的容忍上限。</li>
<li><strong>Frustrated（烦躁期）</strong>：应用响应时间大于 4T。</li>
</ul>


<h3>公式</h3>

<p><code>Apdex<sub>t</sub> = (Satisfied Count + Tolerating Count / 2) / Total Samples</code></p>

<p>其中 <code>Satisfied Count</code> 就是指定采样时间内响应时间满足 <code>Satisfied</code> 要求的应用响应次数；而 <code>Tolerating Count</code> 就是指定采样时间内响应时间满足 <code>Tolerating</code> 要求的应用响应次数；最后的 <code>Total Samples</code> 就是总的采样次数总数。从公式可以看出，应用的 Apdex 得分与采样持续时间无关，与目标响应时间 T 相关（在采用总数固定的情况下，T 通过影响 <code>Satisfied Count</code>以及 <code>Tolerating Count</code>的值间接影响最终的得分）。</p>

<p>举例来说，假设你的应用期待的响应时间能够在 1000 ms 内，在 100 次采样中，有 50 次应用响应时间低于 1000 ms，30 次应用响应时间处于 1000 ms 到 4000 ms（ 4 * 1000ms） 之间，剩下 20 次响应时间长于 4000 ms，那么，该应用在 T = 1000ms 的情况下的 Apdex 值为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">50</span> <span class="o">+</span> <span class="mi">30</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">65</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Apdex 与 New Relic</h3>

<p>在 New Relic 的 APM（Application Performance Management）功能中，就提供了各个维度的 Apdex 统计结果，比如 Server Apdex(服务器性能评分)以及 Browser Apdex(终端用户性能体验评分)，如图：
<img src="http://7xj84e.com1.z0.glb.clouddn.com/blog/apdex%20overview.png" alt="Apdex 统计报表(T=0.5s)" /></p>

<p>其中可以看到应用服务器在 <code>T=0.5s</code> 的情况下得到的 Apdex 分数为 0.76，而 Browser（Browser 更多的是静态文件加载） 在 <code>T=7s</code>的情况下得到的 Apdex 分数为 0.94。结合两者可以判断，目前应用到达终端用户性能表现比较优秀（0.94，比较接近最大值 1），但是其中影响总体性能的瓶颈则在于服务器性能（仅仅只有 0.76 分），通过这样的数据，我们就能知道下一步性能优化的方向了——服务器端性能优化。</p>

<p>实际上，上面展示的只是 New Relic 的一种粒度比较粗的针对整个应用的 Apdex 报表，New Relic 同样提供了很多细粒度的 Apdex 数据，比如下面展示的针对具体的请求入口的 Apdex 报表：
<img src="http://7xj84e.com1.z0.glb.clouddn.com/blog/detailed_apdex.png" alt="具体请求入口的 Apdex" />
这样，通过逐步的细化，我们就可以进一步定位性能瓶颈，通过不断优化 Apdex 评分低的入口逐步提升应用整体性能体验。</p>

<h3>Apdex 与 T 值</h3>

<p>从公式中其实可以非常明显地看出来，T 值的选择对于最终的 Apdex 值也会有直接影响，越大的 T 值理论上来说会有更大的 Apdex 得分。比如我们可以在 New Relic 中将应用的 Apdex T 值改为 1s，以下是设定过程中看到的原来的值是 0.5s：
<img src="http://7xj84e.com1.z0.glb.clouddn.com/blog/apdex%20setting.png" alt="T 值设定" />
而改为 1s 后，跟上面同样的采样数据得到的新的平均 Apdex 值则高于原来的 0.76。
所以，在对应用性能进行评估的时候，首先需要确保结合应用具体情况设定一个相对合理的 T 值，太大的 T 值会导致过于乐观的 Apdex 值，但是太小的 T 值又会造成过于严苛的性能要求，最终可能导致过度的性能优化。
所以，总而言之，抛弃 T 值谈 Apdex 得分，都是耍流氓！</p>

<h3>Apdex 值一定要做到 1 吗？</h3>

<p>Apdex 公式计算能够得到的最大值就是 1，表示应用“可能”能够令所有用户对应用性能感到满意。但是， Apdex = 1 可以只是一个不断优化的方向，却不一定是要成为优化的目标，具体根据项目实际情况确定，毕竟，优化本身也需要成本投入，不需要为了极致的性能而投入过多的成本。</p>

<h3>参考资料以及推荐链接</h3>

<ol>
<li><a href="https://en.wikipedia.org/wiki/Apdex">Wikipedia: Apdex</a></li>
<li><a href="http://www.apdex.org/">Apdex 官网</a></li>
<li><a href="https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measuring-user-satisfaction#what-is">Apdex: Measuring user satisfaction</a></li>
<li><a href="https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/change-your-apdex-settings">New Relic: Change your Apdex settings</a></li>
<li><a href="https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/view-your-apdex-score">New Relic: View your Apdex score</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[申请以及集成 Stripe 的 Alipay 支付方案]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/03/28/shen-qing-yi-ji-ji-cheng-stripe-de-alipay-zhi-fu-fang-an/"/>
    <updated>2015-03-28T12:12:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/03/28/shen-qing-yi-ji-ji-cheng-stripe-de-alipay-zhi-fu-fang-an</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在一个项目需要支持人民币支付，并且客户要求希望能够收完款后的结算是用美元，所以就想到了去年 Stripe 宣布已经跟支付宝达成合作意向，所以经过一番咨询跟集成，终于把 Stripe 集成进来，并且启用了支付宝收款。这篇文章介绍功能申请以及集成的完整过程。</p>

<!-- More -->


<h2>功能申请</h2>

<ol>
<li><a href="https://dashboard.stripe.com/register">注册 Stripe 账号</a>；</li>
<li>加入 <a href="https://stripe.com/alipay">beta 用户组</a>，电子邮箱跟注册的 Stripe 账号保持一致；</li>
<li>联系 Stripe 员工<br/>
发送邮件到 <a href="mailto:support@stripe.com">support@stripe.com</a>，声明你需要在你的 Stripe 账号中启用 Alipay 的支付功能，并且提供你的 Stripe 账号。然后，等待回复就是，一般当天都能收到回复的。</li>
</ol>


<h2>集成</h2>

<h3>0. 时序图(可结合后边代码一起理解)</h3>

<p><img src="http://Martin91.github.io/images/medias/stripe_checkout_flow.png" alt="Stripe 支付流程" /></p>

<h3>1. 引入 stripe.js 以及初始化脚本</h3>

<p>假设支付页面上有个开始支付按钮，其 html 代码为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&#39;pay&#39;</span><span class="nt">&gt;</span>支付<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>请在 html 代码里合适的地方（比如<code>&lt;body&gt;</code>标签的底部）加载 stripe.js：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://checkout.stripe.com/checkout.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在脚本中初始化 stripe.js，并且注册支付按钮的事件监听函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">stripeHandler</span> <span class="o">=</span> <span class="nx">StripeCheckout</span><span class="p">.</span><span class="nx">configure</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;pk_test_xxxxxxxxxxxxxxxxxxxxxxxx&#39;</span><span class="p">,</span>  <span class="c1">// 可以查看 https://dashboard.stripe.com/account/apikeys</span>
</span><span class='line'>    <span class="nx">image</span><span class="o">:</span> <span class="s1">&#39;https://placehold.it/200x200&#39;</span><span class="p">,</span>    <span class="c1">// 显示在支付对话框的图片，可自己指定</span>
</span><span class='line'>    <span class="nx">alipay</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>                             <span class="c1">// 启用支付宝支付</span>
</span><span class='line'>    <span class="nx">token</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">token</span><span class="p">){</span>                   <span class="c1">// 用户填写完资料并且 Stripe 校验成功后的回调函数</span>
</span><span class='line'>      <span class="c1">// 此时应该提交 token.id 到后台，比如 http://example.com/orders/1?stripeToken={token.id}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#pay&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">stripeHandler</span><span class="p">.</span><span class="nx">open</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Business Name&#39;</span><span class="p">,</span>                  <span class="c1">// 收款方或商家名称，比如 Beansmile</span>
</span><span class='line'>      <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;商品描述内容&quot;</span><span class="p">,</span>              <span class="c1">// 待支付商品的描述</span>
</span><span class='line'>      <span class="nx">amount</span><span class="o">:</span> <span class="mi">50</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span>                       <span class="c1">// 支付金额，单位是“分”</span>
</span><span class='line'>      <span class="nx">opened</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>                     <span class="c1">// 支付对话框打开后的回调函数</span>
</span><span class='line'>        <span class="c1">// Do something</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 通过 token 请求收款</h3>

<p>服务器端是 Ruby on Rails 实现，所以在 Gemfile 中引入 Stripe 官方的 Ruby SDK(具体配置方法请自行查阅其 README)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="c1"># Stripe Ruby bindings</span>
</span><span class='line'><span class="c1"># https://github.com/stripe/stripe-ruby</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;stripe&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.20.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在 Controller action 中添加处理逻辑:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/orders_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">OrdersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="c1"># PUT /orders/:id</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># params:</span>
</span><span class='line'>  <span class="c1">#   id: 订单的 id</span>
</span><span class='line'>  <span class="c1">#   stripeToken: 客户端完成支付流程，在脚本的回调函数中会得到 `token.id`，</span>
</span><span class='line'>  <span class="c1">#                将其上传到 `stripeToken` 参数，服务器端用此 token 请求收款</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pay</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="ss">Stripe</span><span class="p">:</span><span class="ss">:Charge</span><span class="o">.</span><span class="n">create</span>  <span class="ss">amount</span><span class="p">:</span> <span class="n">order</span><span class="o">.</span><span class="n">amount_in_cents</span><span class="p">,</span>
</span><span class='line'>                                      <span class="ss">currency</span><span class="p">:</span> <span class="s1">&#39;USD&#39;</span><span class="p">,</span>
</span><span class='line'>                                      <span class="ss">source</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:stripeToken</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                      <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;订单描述&quot;</span>
</span><span class='line'>    <span class="n">order</span><span class="o">.</span><span class="n">update_attribute</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">:paid</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">order</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Stripe</span><span class="p">:</span><span class="ss">:InvalidRequestError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;由于</span><span class="si">#{</span><span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">，支付失败！&quot;</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">order</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 效果预览</h3>

<p><img src="http://Martin91.github.io/images/medias/stripe.gif" alt="stripe 支付流程演示" /></p>

<h2>其他</h2>

<ol>
<li>关于 Stripe 的沙盒机制<br/>
Stripe 为每个账号都提供了<a href="https://dashboard.stripe.com/account/apikeys">两组 keys</a>，一组 key 用于用于 live 环境，另一组是 test 环境，后者即是沙盒环境，而针对支付宝的沙盒，可用任意合法的邮箱账号进行测试，但验证码是固定的 123456，而身份证后 6 位是固定的 12345；</li>
<li>在功能申请过程中，一定要记得完成步骤3——联系 Stripe 开通 Alipay 支付功能。否则，会在支付的时候出现错误，错误信息示例为：<code>There is no token with ID atok_xxxxxxxxxxxxxxxxxxxxxxxx</code></li>
<li>实际开发中，请结合考虑用 stripe 提供的 <a href="https://dashboard.stripe.com/account/webhooks">webhook</a> 处理支付状态变迁；</li>
<li>此支付机制中，付款人可用人民币支付，但是 Stripe 会用美元跟商家（收款方）进行结算；</li>
<li>我总结了工作中集成过的其他几款支付网关，横向对比了各家的异同点，有兴趣的请戳：<a href="http://jianggaowang.com/slides/67">讲稿网：Payment Gateways</a></li>
</ol>


<h2>参考链接</h2>

<ol>
<li><a href="https://stripe.com/alipay">Stripe: Alipay 首页</a></li>
<li><a href="https://stripe.com/press/alipay">Stripe: Alipay FAQ</a></li>
<li><a href="https://stripe.com/docs/guides/alipay-beta">Stripe: Alipay 集成文档</a></li>
<li><a href="https://stripe.com/docs/checkout">Stripe: Checkout</a>，这部分的文档虽然没有提交 Alipay, 但是针对 Alipay 的集成，依旧适用。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do I fix Passenger application startup problem]]></title>
    <link href="http://Martin91.github.io/blog/articles/2015/01/10/how-do-i-fix-passenger-application-startup-problem/"/>
    <updated>2015-01-10T01:54:35+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2015/01/10/how-do-i-fix-passenger-application-startup-problem</id>
    <content type="html"><![CDATA[<p>Recent days I was working on deploying one of my Rails project on a complete new VPS. I had operated according to my experience for deploying sites before, but at the last step, after I have deployed the site, it always raised error message &ldquo;An error occurred while starting up the preloader: it did not write a startup response in time.&rdquo; when I try to visit the site. But, thanks to much hard work and retry, I found the source of the problem and finally fix it.</p>

<p>I will spend short time to show the main steps to resolve the problem. Let&rsquo;s GO!</p>

<!-- More -->


<h2>What Does The Error Message Mean?</h2>

<p>According the official wiki of <a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems">Passenger</a> on Github:</p>

<blockquote><p>Phusion Passenger reports this error if the application did not finish initializing within a time limit, or if it exited without sending Phusion Passenger a message that says &ldquo;I&rsquo;ve initialized successfully!&rdquo;</p></blockquote>

<p>That is, <strong>TWO</strong> things are expected that our application should:</p>

<ul>
<li>response a message to notify Passenger that itself is ready</li>
<li>response within a time limit</li>
</ul>


<p>otherwise Passenger will regard the application has been failed to startup and hence report error.</p>

<h2>Possible Causes Of Problem</h2>

<p>According <a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#possible-causes-of-problems">&ldquo;Possible causes of problems&rdquo;</a> section in the above wiki, we can conclude that there will be the below four causes:</p>

<ul>
<li><a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#stdout-redirection">Stdout redirection</a></li>
<li><a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#early-termination-in-bash">Early termination in bash</a></li>
<li><a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#application-startup-freeze">Application startup freeze</a></li>
<li><a href="https://github.com/phusion/passenger/wiki/Debugging-application-startup-problems#server-too-busy">Server too busy</a></li>
</ul>


<h2>How I Refused Impossible Causes</h2>

<p>For the first possible cause, I can not find any STDOUT redirection in all my bash init scripts, so I trust there is no redirection in my server.</p>

<p>For the second one, I had tried to config to disable the loading of bashrc, but it still didn&rsquo;t work, so the second cause is not the cause.</p>

<p>The third one is impossible because I had built the application on other servers successfully, it seems that the cause was not from the application itself.</p>

<h2>The True Evil Found</h2>

<p>For the last one possible cause, I tried to run <code>top</code> command in shell of the server to determine if CPU or disk is busy, and I found a interesting thing: everytime I visit the site, the CPU usage was up to > 80%, even 90% &ndash; 100%, and after about one and half minutes, the browser rendered a rails &ldquo;Something went wrong&rdquo; page and meantime the CPU usage was back to &lt;10%.</p>

<p>I then check the explanation from Passenger again:</p>

<blockquote><p>It could also be that your server is so busy doing something (either CPU-wise or disk-wise) that it fails to start an application process within a reasonable amount of time. The default startup limit is 90 seconds.</p></blockquote>

<p>Aha, looks like the time limit is the evil. So I decided to try to change the timeout to a longer time, such as 300 seconds.</p>

<p>In my passenger module config file <code>/etc/apache2/mods-available/passenger.conf</code>(more details about why this file, see <a href="https://www.phusionpassenger.com/documentation/Users%20guide%20Apache.html#working_with_apache_conf">Passenger Guide: Working with the Apache configuration file</a>), I explicitly append:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PassengerStartTimeout 300</span></code></pre></td></tr></table></div></figure>


<p>After that, I tried to restart my Apache2 server and deploy again, and Passenger waited for startup within a longer time this time, and hence my application was lastly deployed successfully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 coding.net 上部署 Jekyll 博客]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/12/20/zai-coding-dot-netshang-bu-shu-jekyllbo-ke/"/>
    <updated>2014-12-20T12:59:30+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/12/20/zai-coding-dot-netshang-bu-shu-jekyllbo-ke</id>
    <content type="html"><![CDATA[<p>自从 <a href="https://ruby-china.org/topics/22858">coding 推出 PaaS 演示平台以及开放自定义域名</a>之后，很多人开始尝试在 coding 上部署自己的博客，其中就有 <a href="http://jekyllrb.com/">jekyll</a>，coding 上就有官方推荐的 <a href="https://coding.net/u/chenwj233/p/jekyll-demo/git">jekyll-demo</a>。但是因为这个 Demo 的 README 文档中只是简单介绍配置步骤而已，没有详细介绍原理以及灵活配置的地方，我在参照着迁移 jekyll 博客的过程中也遇到一些问题。现在写下文章，希望能够把原理理清楚。</p>

<!-- MORE -->


<p><strong>声明：</strong>这篇文章主要是对原来的 Demo 的几个主要思路做一个补充说明，而并非 coding 演示平台使用操作的详细教程，所以在有些细节上不一定覆盖到，建议最终的部署代码需要以官方推荐的 repo 里的代码为主。</p>

<h2>基本原理</h2>

<p>因为 Coding 提供的演示平台是通用的 PaaS 平台，并非类似 Github 或者 Gitcafe 的 Pages 服务，所以 jekyll 部署到演示平台需要解决三个问题：</p>

<p><strong>1. 运行问题</strong>，blog 需要以常规 Web 程序的方式运行；<br/>
<strong>2. 启动脚本</strong>，部署完成后自动启动服务器；<br/>
<strong>3. 自动更新</strong>，blog 内容更新 push 后能够自动生成新的页面。</p>

<p>第一个问题我们可以通过 <a href="https://github.com/adaoraul/rack-jekyll">rack-jekyll</a> 解决；第二个问题通过 Coding 约定的 <code>Procfile</code> 文件解决；第三个问题我们通过 Coding 的 <a href="https://coding.net/help/about_git/what_is_web_hook">Webhook</a> 结合脚本解决。</p>

<h3>1. 将 Jekyll 博客变为一个在线运行的 Rack 程序</h3>

<p>Jekyll 原本是一个用于生成静态博客站点的框架，但是为了能够在 coding 演示平台上直接运行 Jekyll 博客，我们需要一个能够在 <a href="http://unicorn.bogomips.org/">Unicorn</a> 服务器上运行 Jekyll 的方法。通过原来 coding 提供的 Demo，找到了一个叫 <a href="https://github.com/adaoraul/rack-jekyll">rack-jekyll</a> 的工具。</p>

<p>rack-jekyll 主要的功能如其介绍：</p>

<blockquote><p>Transform your Jekyll app into Rack application!</p></blockquote>

<p>就是将 Jekyll 作为 <a href="http://rack.github.io/">Rack</a> 程序运行。</p>

<p>首先，为了能够使用 rack-jekyll 以及 unicorn，我们在 <code>Gemfile</code> 文件(如果没有则直接新建即可)中加入:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rack-jekyll&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;unicorn&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两行，然后执行 <code>bundle install</code> 这样，我们的项目中就成功引入 <code>rack-jekyll</code> 以及 <code>unicorn</code> 了。</p>

<p>其次，因为 unicorn 默认会从项目根目录下的 <code>config.ru</code> 文件启动，再结合 <a href="https://github.com/adaoraul/rack-jekyll#how-to-use-it">rack-jekyll 的使用说明</a> ，我们在 jekyll 项目根目录下要创建一个包含以下内容的文件，并且名字就是 <code>config.ru</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config.ru</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rack/jekyll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Jekyll</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>到此，可以在命令行中 cd 到当前项目根目录，执行 <code>jekyll build</code> 生成站点，然后再执行 <code>unicorn</code> 从默认配置启动服务器，成功启动后，在浏览器中访问“ <a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a> ”就可以看到博客了。</p>

<h3>2. 添加用于 Coding 演示平台的启动脚本</h3>

<p>上面第一步只是解决了 Jekyll 能够以 Rack 方式运行的问题而已，但是为了部署到 coding 后，项目能够正常启动，我们还需要加入启动命令。</p>

<p>按照 <a href="http://docs.coding.io/ruby.html#%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4">coding 在关于 Ruby 部分的演示平台文档</a> 中的介绍得知，coding 会查找项目根目录下的 <code>Procfile</code> 文件，并将里边的内容作为启动命令，当此文件不存在时，则将默认使用一下启动命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">web</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rackup</span> <span class="n">config</span><span class="o">.</span><span class="n">ru</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照默认启动命令的格式，我们也可以写出以下 <code>Procfile</code> 文件，用于部署后从 unicorn 启动项目：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">web</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">unicorn</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span> <span class="o">-</span><span class="n">c</span> <span class="o">.</span><span class="n">/unicorn</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成前面两步之后，将代码 push 到 coding 上，再从演示平台一键部署的话，就应该可以成功启动 unicorn 服务器，并且能够访问你的 jekyll 博客了。但是，如果有了新文章呢？怎么自动在站点改动后重新生成站点？</p>

<h3>3. 使用 Webhook 在 push 后自动重新生成站点内容</h3>

<p>coding 为用户提供了 <a href="https://coding.net/help/about_git/what_is_web_hook">webhook</a> 功能，方便用户在 push 代码改动后自动 POST 请求你指定的 Web URL，你可以利用这个 URL 在程序后台完成程序的自动部署等操作。更多的介绍跟使用方法请参考 <a href="https://coding.net/help/about_git/about_web_hook_content">&ldquo;WebHook 的内容是什么？&rdquo;</a> 以及 <a href="https://coding.net/help/about_git/what_is_web_hook">&ldquo;WebHook 是什么？我该如何使用？&rdquo;</a>。</p>

<p>为了增加新的入口以接收 coding 的 Webhook 通知，我们可以在 <code>config.ru</code> 中添加新的路由，并且添加响应的处理脚本，这部分的内容我先直接拷贝官方推荐的 <a href="https://coding.net/u/chenwj233/p/jekyll-demo/git/raw/master/config.ru">jekyll demo 的代码</a> 后再做必要的解读：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config.ru</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler/setup&quot;</span>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:default</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">WEBHOOK_TOKEN</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;WEBHOOK_TOKEN&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Response</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">path_info</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">path_info</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=~</span> <span class="sr">/application\/json/</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">params</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">post?</span> <span class="o">&amp;&amp;</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;token&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="no">WEBHOOK_TOKEN</span>
</span><span class='line'>    <span class="n">repo_url</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;repository&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">repo_url</span>
</span><span class='line'>      <span class="n">archive_url</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">repo_url</span><span class="si">}</span><span class="s2">/archive/master&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;--&gt; updating to </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="s1">&#39;ref&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">..&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="sb">`jekyll build`</span>
</span><span class='line'>      <span class="sb">`rm -rf $HOME/_posts; curl -s -L -o $TMPDIR/archive.zip </span><span class="si">#{</span><span class="n">archive_url</span><span class="si">}</span><span class="sb">; unzip -qo -d $HOME $TMPDIR/archive.zip; cd $HOME; jekyll build`</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;--&gt; done.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;--&gt; error: no url field found in params: </span><span class="si">#{</span><span class="n">params</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;200&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Conetent-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/json;charset=utf-8&#39;</span> <span class="p">},</span> <span class="o">[</span><span class="s1">&#39;ok&#39;</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="o">[</span><span class="s1">&#39;403&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Conetent-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/json;charset=utf-8&#39;</span> <span class="p">},</span> <span class="o">[</span><span class="p">{</span> <span class="ss">error</span><span class="p">:</span> <span class="s1">&#39;webhook token mismatch!&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">to_json</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">jekyll</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Jekyll</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">auto</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:URLMap</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;/&#39;</span> <span class="o">=&gt;</span> <span class="n">jekyll</span><span class="p">,</span> <span class="s1">&#39;/_&#39;</span> <span class="o">=&gt;</span> <span class="n">app</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，程序在启动时，指定了两个路由入口分别指向不同的后台程序，其中 <code>'/'</code> 路径指向了我们的 <code>jekyll</code> 程序，这个跟原来的配置目的一致；而 <code>'/_'</code> 路径指向了 <code>app</code> 这个程序。</p>

<p>所以，当有外部向服务器发送了一个指向 &ldquo;/_&rdquo; 路径（比如“ <a href="http://test.codingapp.com/_">http://test.codingapp.com/_</a> ”）的请求时，服务器在内部启动了 <code>app</code> 的脚本。（注意，如果你希望使用别的路径名来配置 webhook 的入口，只要将下划线改成你需要的路径即可，比如： &ldquo;<a href="http://test.codingapp.com/deploy">http://test.codingapp.com/deploy</a>&#8220;）。</p>

<p><code>app</code> 脚本首先通过请求的 <code>Content-Type</code> 头信息判断请求格式，并据此从请求中提取请求参数赋给 <code>params</code> 变量；接着脚本验证请求的合法性，要求请求必须是 POST 方式，并且参数中的 <code>token</code> 参数的值必须与我们在 coding 后台中配置的 token 一致。</p>

<p>最后，在确认请求的合法性后，脚本先清空了当前部署的项目，然后下载解压指定分支的最新代码，并且进入项目根目录(<code>$HOME</code>环境变量)重新执行了 <code>jekyll build</code> 命令以重新生成静态站点，见代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sb">`rm -rf $HOME/_posts; curl -s -L -o $TMPDIR/archive.zip </span><span class="si">#{</span><span class="n">archive_url</span><span class="si">}</span><span class="sb">; unzip -qo -d $HOME $TMPDIR/archive.zip; cd $HOME; jekyll build`</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中值得一提的是，<code>archive_url</code>是在前面代码中拼接而来的链接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">archive_url</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">repo_url</span><span class="si">}</span><span class="s2">/archive/master&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>请注意其中硬编码的部分 <code>"archive/master"</code>，其中的 <code>master</code> 指定了是 <code>master</code> 分支上的代码压缩包的路径，所以假如你需要从 master 分支外的分支部署代码，请务必记得将 <code>master</code> 改为对应的分支名，比如我的部署分支是 <code>coding-pages</code>，那我这里的代码就应该改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">archive_url</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">repo_url</span><span class="si">}</span><span class="s2">/archive/coding-pages&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成 webhook 处理脚本后，需要重新 push 代码并且重新在演示平台部署一次，以使 <code>config.ru</code> 文件里的代码生效。至于如何配置 webhook ，直接参照 coding 的官方文档即可。</p>

<h2>总结</h2>

<p>以上的三点主要是对在 coding 上部署 jekyll 博客的关键思路的说明，通过这三点，相信你再去看原来的 <a href="https://coding.net/u/chenwj233/p/jekyll-demo/git/raw/125f456d2dfa4d324e320a57a78adf7fda89c93e/README.md">README</a> 的时候，应该就能很快理解为什么需要配置 <code>WEBHOOK_TOKEN</code> 环境变量以及为什么要配置 webhook 的 URL 为类似 &ldquo;<a href="http://host/_">http://host/_</a>&rdquo; 这么奇怪的链接了吧？除此之外，你也可以根据你的需要将脚本中的代码分支从 <code>master</code> 改为你所需要的目标分支了。<br/>
其实用 unicorn 运行 jekyll 项目的原理还是非常简单的，知道了这些之后，将你的已有 jekyll 项目直接迁移到 coding 甚至是其他 PaaS 平台上就不是件麻烦的事了。</p>

<h2>其他联想</h2>

<ol>
<li><a href="http://octopress.org/">Octopress</a> 博客是在 jekyll 的基础上封装而来的更高级也更方便的静态站点框架，所以按照上面的原理，将已有的 octopress 项目部署到 coding 平台上，应该也不是件难事。</li>
<li>Octopress 本身支持另外一种部署方式，就是本地生成静态站点之后，直接执行 <code>rake deploy</code> 将生成后的静态站点 push 到指定的远程 repo 或者指定的分支上，从这个角度考虑，其实也可以为 jekyll 实现类似的脚本，结合 coding 演示平台的 <a href="https://coding.net/help/project_demos/do_you_support_static_html_site">静态站点部署</a> ，就可以直接部署 jekyll 博客了，这种方式就省去了 unicorn 服务器等的配置了，也不需要再使用 webhook 重新生成站点了，而且纯静态站点的方案的最大优点就是，特别节约内存。这种方案只是构想，但是值得一试。如果哪位朋友尝试成功了，请记得在评论里回复一下。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RAILS中利用YAML文件完成数据对接]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/11/12/railszhong-jie-he-yamlwen-jian-wan-cheng-shu-ju-dui-jie/"/>
    <updated>2014-11-12T20:15:33+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/11/12/railszhong-jie-he-yamlwen-jian-wan-cheng-shu-ju-dui-jie</id>
    <content type="html"><![CDATA[<p>最近在做的Ruby on Rails项目中，需要将远程数据库中的数据对接到项目数据库中，但是远程的数据不仅数据表名跟字段命名奇葩，数据结构本身跟项目数据结构出入比较大，在数据导入过程中代码经历了几次重构，最后使用了YAML文件解决了基本数据<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>对接的问题。在此写一篇博文，我会尽量重现一路过来的代码变更，算是分享一下我的思考过程，也算是祭奠一下自己的苦逼岁月。</p>

<!-- More -->


<h3>假设以及数据结构预览</h3>

<p>因为远程数据库服务器为Oracle Server，我在项目中使用到了<a href="http://sequel.jeremyevans.net/">Sequel</a>这个gem用于连接数据库以及数据查询，因为数据库连接的内容不是本文的重点，故后续代码直接用<code>remote_database</code>表示数据库连接，而根据<a href="http://sequel.jeremyevans.net/rdoc/files/doc/dataset_basics_rdoc.html">Sequel的用法</a>，我们可以直接使用<code>remote_database[table_name]</code>连接到具体的表。</p>

<p>本次需要从远程数据库中导入的基本数据主要有学生信息表（包含班级名称）、老师信息表以及专业信息表，相应地，项目中（以下称为“本地”）也已经创建好了对应的model。其中学生信息表的表名以及部分数据字段的从本地到远程的映射关系如表所示：</p>

<table>
<thead>
<tr>
<th> 表名或字段名 </th>
<th>                 本地                 </th>
<th>      远程      </th>
</tr>
</thead>
<tbody>
<tr>
<td> 表名         </td>
<td> students                             </td>
<td> XSJBXX</td>
</tr>
<tr>
<td> 姓名         </td>
<td> name                                 </td>
<td> XM</td>
</tr>
<tr>
<td> 学号         </td>
<td> number                               </td>
<td> XH</td>
</tr>
<tr>
<td> 年级         </td>
<td> grade                                </td>
<td> NJ</td>
</tr>
<tr>
<td> 班级         </td>
<td> belongs_to :klass &nbsp;&nbsp;&nbsp; </td>
<td> BJMC(班级名称)</td>
</tr>
</tbody>
</table>


<p>老师信息表的表名以及部分数据字段的映射关系为：</p>

<table>
<thead>
<tr>
<th> 表名或字段名 </th>
<th>    本地   </th>
<th>   远程  </th>
</tr>
</thead>
<tbody>
<tr>
<td> 表名         </td>
<td> teachers  </td>
<td> JZGJBXX</td>
</tr>
<tr>
<td> 姓名         </td>
<td> name      </td>
<td> XM</td>
</tr>
<tr>
<td> 职称         </td>
<td> title     </td>
<td> ZC</td>
</tr>
<tr>
<td> 证件号码     </td>
<td> id_number </td>
<td> ZJHM</td>
</tr>
</tbody>
</table>


<h3>数据对接第一版：属性方法显式赋值</h3>

<p>第一个导入的数据表是学生的信息表，在最开始的时候，因为只需要考虑一张单独的表，所以代码写得简单粗暴，基本过程就是：根据需要的信息，查询对应的远程数据字段，然后使用属性方法赋值，最后保存接入的数据。对接方法的部分相关代码示例（为了方便阅读以及保护项目敏感信息，本文对项目中原有代码进行了缩减以及修改）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/student.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>    <span class="n">remote_students</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="ss">:xsjbxx</span><span class="o">].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">remote_students</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_student</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">grade</span> <span class="o">=</span> <span class="o">*</span><span class="n">remote_student</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="ss">:xm</span><span class="p">,</span> <span class="ss">:xh</span><span class="p">,</span> <span class="ss">:nj</span><span class="p">)</span>
</span><span class='line'>      <span class="n">class_name</span> <span class="o">=</span> <span class="n">remote_student</span><span class="o">[</span><span class="ss">:bjmc</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">klass</span> <span class="o">=</span> <span class="no">Klass</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="nb">name</span><span class="p">:</span> <span class="n">class_name</span>
</span><span class='line'>      <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="o">.</span><span class="n">find_by_create_by</span> <span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="ss">number</span><span class="p">:</span> <span class="n">number</span><span class="p">,</span>
</span><span class='line'>                                          <span class="ss">grade</span><span class="p">:</span> <span class="n">grade</span><span class="p">,</span>
</span><span class='line'>                                          <span class="ss">klass</span><span class="p">:</span> <span class="n">klass</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，呃，中规中矩，基本体现了各取所需的指导思想，但是总觉得怎么有点不好呢？</p>

<h3>数据对接第二版：通过本地到远程数据库字段映射关系自动匹配赋值</h3>

<p>在第一版的代码中，最大的坏味道在于：代码中需要把所有需要对接的字段列举出来，一旦遇到字段增删修改的情况，就需要同时更新原来的逻辑代码，太不灵活了，而且列举所有字段本身就是一件非常繁琐枯燥的事情。再假设字段很多的情况下，要从代码中一个个检查字段的名称，肯定是件多么可怕的事情啊。</p>

<p>那么怎么修改呢？用映射表！仔细观察第一段的代码，其实代码所做的工作如此简单：无非是先从远程数据中取值，然后赋值到本地数据对象的对应属性中，这种“本地-远程”的字段映射关系，不就是我们每天面对的“键-值”对的特征吗？那直接用一个<code>Hash</code>来保存这种对应关系不就好了。</p>

<p>话不多说，我们开始重构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/student.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">number</span><span class="p">:</span> <span class="ss">:xh</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="ss">:xm</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">age</span><span class="p">:</span> <span class="ss">:nj</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">klass</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">association_field_name</span><span class="p">:</span> <span class="ss">:name</span><span class="p">,</span>
</span><span class='line'>      <span class="n">remote_field_name</span><span class="p">:</span> <span class="ss">:bjmc</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>    <span class="n">remote_students</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="ss">:xsjbxx</span><span class="o">].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">remote_students</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_student</span><span class="o">|</span>
</span><span class='line'>      <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="o">.</span><span class="n">find_or_initialize_by</span> <span class="ss">xxx</span><span class="p">:</span> <span class="n">xxx</span>
</span><span class='line'>      <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># 逐一调用属性赋值方法，完成Student属性的赋值</span>
</span><span class='line'>        <span class="n">student</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">remote_student</span><span class="o">[</span><span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">[</span><span class="n">attribute</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">association_name</span><span class="p">,</span> <span class="n">association_fields_map</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># 把远程数据赋给对应的本地数据字段</span>
</span><span class='line'>        <span class="n">association_field_name</span> <span class="o">=</span> <span class="n">association_fields_map</span><span class="o">[</span><span class="ss">:association_field_name</span><span class="o">]</span>
</span><span class='line'>        <span class="n">remote_value</span> <span class="o">=</span> <span class="n">remote_student</span><span class="o">[</span><span class="n">association_fields_map</span><span class="o">[</span><span class="ss">:remote_field_name</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 查找或创建关联对象</span>
</span><span class='line'>        <span class="n">related_object</span> <span class="o">=</span>
</span><span class='line'>          <span class="n">reflect_on_association</span><span class="p">(</span><span class="n">association_name</span><span class="p">)</span><span class="o">.</span><span class="n">klass</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="n">association_field_name</span> <span class="o">=&gt;</span> <span class="n">remote_value</span>
</span><span class='line'>        <span class="c1"># 建立关联关系</span>
</span><span class='line'>        <span class="n">local_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">association_name</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">related_object</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">student</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的示例中，我们用常量<code>LOCAL_TO_REMOTE_FIELDS_MAP</code>保存<code>Student</code>这个model本身的字段跟远程数据字段的映射关系，这样我们就可以通过类似<code>LOCAL_TO_REMOTE_FIELDS_MAP[:number]</code>知道学生的姓名在远程数据表中对应的字段是<code>:xm</code>了。另外值得一提的是，我用了<code>LOCAL_TO_REMOTE_ASSOCIATION_MAP</code>这个常量保存了学生与班级关联关系，同时保存了关联的<code>klass</code>的数据字段映射关系。</p>

<p>在声明了必要的字段映射关系之后，我就在代码中遍历了每一个字段，并且通过对应的远程字段名称查找对应的数值，并且使用<code>send</code>方法调用了对象的属性赋值方法，将数据自动对接到本地数据对象上。</p>

<p>到目前为止，代码行数虽然反而多了，但是却实现了字段映射关系与逻辑代码的分离，我们可以独立管理映射关系了。以后就算需要加入新的对接字段，只要在<code>LOCAL_TO_REMOTE_FIELDS_MAP</code>中添加新的键值对就好了，甚至可以在<code>LOCAL_TO_REMOTE_ASSOCIATION_MAP</code>添加类似<code>klass</code>的简单关联关系的数据接入，而这些都无需修改逻辑代码。</p>

<h3>数据对接第三版：教职工信息也需要导入了，代码拷贝之旅开始了</h3>

<p>毫无疑问，如果只是满足于学生信息的对接，相信上面的代码也都够用了，代码的重构也可以告一段落了。</p>

<p>但是，前面说了，除了学生的信息，还有教职工的信息需要做接入，而且从最开始的<strong>假设以及数据结构预览</strong>一节看到，老师的数据结构跟学生的数据结构极其相似，所以，时间紧迫，我就直接拷贝代码然后简单删改了一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/teacher.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">number</span><span class="p">:</span> <span class="ss">:xh</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">title</span><span class="p">:</span> <span class="ss">:zc</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id_number</span><span class="p">:</span> <span class="ss">:zjhm</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>    <span class="n">remote_teachers</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="ss">:jzgjbxx</span><span class="o">].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">remote_teachers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_teacher</span><span class="o">|</span>
</span><span class='line'>      <span class="n">teacher</span> <span class="o">=</span> <span class="no">Teacher</span><span class="o">.</span><span class="n">find_or_initialize_by</span> <span class="ss">xxx</span><span class="p">:</span> <span class="n">xxx</span>
</span><span class='line'>      <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>        <span class="n">teacher</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">remote_teacher</span><span class="o">[</span><span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">[</span><span class="n">attribute</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">teacher</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意在上面的代码中，<code>Teacher</code>中比起<code>Student</code>，少了<code>LOCAL_TO_REMOTE_ASSOCIATION_MAP</code>常量，并且也删除了相关的代码，虽然代码已经满足需求了，教职工的数据导入也是无比顺利，可是面对着一堆重复的代码，真心别扭！</p>

<h3>数据对接第四版：抽象逻辑，代码共享</h3>

<p>其实我多少也是有代码洁癖的，大片Copy的代码岂不是搞得自己逼格好Low？怎么可以忍受，继续重构！</p>

<p>这一次重构其实就简单多了，把重复的核心逻辑代码抽取出来，然后放到一个专门负责数据对接的Concern里边，最后在需要此concern的model里include一下就行了。话不多说，上Concern代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/concerns/import_data_concern.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ImportDataConcern</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>      <span class="n">remote_objects</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="nb">self</span><span class="o">::</span><span class="no">REMOTE_TABLE_NAME</span><span class="o">].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">remote_objects</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_object</span><span class="o">|</span>
</span><span class='line'>        <span class="n">object</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">find_or_initialize_by</span> <span class="ss">xxx</span><span class="p">:</span> <span class="n">xxx</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">::</span><span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>          <span class="c1"># 逐一调用属性赋值方法，完成Student属性的赋值</span>
</span><span class='line'>          <span class="n">object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">remote_object</span><span class="o">[</span><span class="nb">self</span><span class="o">::</span><span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span><span class="o">[</span><span class="n">attribute</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">self</span><span class="o">::</span><span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">::</span><span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">association_name</span><span class="p">,</span> <span class="n">association_fields_map</span><span class="o">|</span>
</span><span class='line'>            <span class="c1"># 把远程数据赋给对应的本地数据字段</span>
</span><span class='line'>            <span class="n">association_field_name</span> <span class="o">=</span> <span class="n">association_fields_map</span><span class="o">[</span><span class="ss">:association_field_name</span><span class="o">]</span>
</span><span class='line'>            <span class="n">remote_value</span> <span class="o">=</span> <span class="n">remote_object</span><span class="o">[</span><span class="n">association_fields_map</span><span class="o">[</span><span class="ss">:remote_field_name</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1"># 查找或创建关联对象</span>
</span><span class='line'>            <span class="n">related_object</span> <span class="o">=</span>
</span><span class='line'>              <span class="n">reflect_on_association</span><span class="p">(</span><span class="n">association_name</span><span class="p">)</span><span class="o">.</span><span class="n">klass</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="n">association_field_name</span> <span class="o">=&gt;</span> <span class="n">remote_value</span>
</span><span class='line'>            <span class="c1"># 建立关联关系</span>
</span><span class='line'>            <span class="n">local_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">association_name</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">related_object</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">object</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，我们把核心对接逻辑抽了出来，并且抽象了远程数据表名的配置，另外通过<code>if self::LOCAL_TO_REMOTE_ASSOCIATION_MAP</code>兼容关联关系的导入。
为了在<code>Teacher</code>以及<code>Student</code>中正常运行上面的代码，我们还需要在这两个model分别include当前的concern，并且声明必要的常量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/student.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ImportDataConcern</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">REMOTE_TABLE_NAME</span> <span class="o">=</span> <span class="s1">&#39;XSJBXX&#39;</span>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">number</span><span class="p">:</span> <span class="ss">:xh</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="ss">:xm</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">age</span><span class="p">:</span> <span class="ss">:nj</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_ASSOCIATION_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">klass</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">association_field_name</span><span class="p">:</span> <span class="ss">:name</span><span class="p">,</span>
</span><span class='line'>      <span class="n">remote_field_name</span><span class="p">:</span> <span class="ss">:bjmc</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/teacher.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ImportDataConcern</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">LOCAL_TO_REMOTE_FIELDS_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">number</span><span class="p">:</span> <span class="ss">:xh</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">title</span><span class="p">:</span> <span class="ss">:zc</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id_number</span><span class="p">:</span> <span class="ss">:zjhm</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过上面的重构，原本重复的代码已经变成了一个Concern，通过Concern来管理独立的业务逻辑，也使得代码管理起来更方便了。但是，等等，我们的重构之旅还在继续！</p>

<h3>数据对接第五版：砍掉恶心的常量，使用YAML配置映射关系</h3>

<p>当时在写代码的过程中，我就一直感觉一大堆的常量令人无法直视，但是，如果不用常量，我还能怎么做？尽管前面两个表的数据导入任务完成了，我还是纠结于代码中那恶心死了的常量（实际上，我当时写的常量比你们现在看到的更多，文章中的只不过是示例）。而庆幸的是，那天脑洞一开：“这些映射关系本质上不就是一堆配置信息吗？而我在代码中的常量也就是用Hash存储的，那用YAML文件不就刚好了吗?”。是啊，像<code>config/database.yml</code>这类的文件，一直以来都是用于保存配置信息的啊，一个是符合Rails的使用习惯，另一个也确实符合数据结构的要求。Awesome，这就开始动工。</p>

<p>首先第一件事，我就把那些常量搬到了yaml文件中，并且放在了项目的<code>config/</code>目录下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_unique_field_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">number</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">models</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">student</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">remote_table_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">xsjbxx</span>
</span><span class='line'>    <span class="l-Scalar-Plain">local_to_remote_fields_map</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">number</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">xh</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">xm</span>
</span><span class='line'>      <span class="l-Scalar-Plain">grade</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nj</span>
</span><span class='line'>    <span class="l-Scalar-Plain">local_to_remote_association_map</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">klass</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">association_field_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name</span>
</span><span class='line'>        <span class="l-Scalar-Plain">remote_field_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bjmc</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">teacher</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">remote_table_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jzgjbxx</span>
</span><span class='line'>    <span class="l-Scalar-Plain">local_to_remote_fields_map</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">xm</span>
</span><span class='line'>      <span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zc</span>
</span><span class='line'>      <span class="l-Scalar-Plain">id_number</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zjhm</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置好了yaml，那么又要如何方便地读取配置信息呢？我的方法是在<code>config/iniitializers/</code>目录下新建了一个initializer，主要用于在项目启动时加载配置信息，关键代码段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">RemoteDatabase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">fields_map</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@fields_map</span> <span class="k">if</span> <span class="vi">@fields_map</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@fields_map</span> <span class="o">||=</span>
</span><span class='line'>      <span class="ss">YAML</span><span class="p">:</span><span class="ss">:load_file</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="s1">&#39;local_to_remote_oracle_database_map.yml&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，以后只要使用<code>RemoteDatabase.fields_map</code>就能读取到所有数据字段映射关系了！</p>

<p>万事俱备之后，我最后需要做的事情就是把Concern中的常量替换为从YAML中读取到的配置就好了，重构后的代码为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ImportDataConcern</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">importing_fields_map</span>
</span><span class='line'>      <span class="k">return</span> <span class="vi">@fields_map</span> <span class="k">if</span> <span class="vi">@fields_map</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@fields_map</span> <span class="o">=</span>
</span><span class='line'>        <span class="no">RemoteDatabase</span><span class="o">.</span><span class="n">fields_map</span><span class="o">[</span><span class="ss">:default</span><span class="o">].</span><span class="n">merge</span><span class="p">(</span>
</span><span class='line'>          <span class="no">RemoteDatabase</span><span class="o">.</span><span class="n">fields_map</span><span class="o">[</span><span class="ss">:models</span><span class="o">][</span><span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">underscore</span><span class="o">]</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">import_data_from_remote</span>
</span><span class='line'>      <span class="n">remote_objects</span> <span class="o">=</span> <span class="n">remote_database</span><span class="o">[</span><span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:remote_table_name</span><span class="o">]].</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">remote_objects</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">remote_object</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># 通过值唯一的属性查找对象</span>
</span><span class='line'>        <span class="n">remote_unique_field_name</span> <span class="o">=</span> <span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:remote_unique_field_name</span><span class="o">]</span>
</span><span class='line'>        <span class="n">remote_unique_field</span> <span class="o">=</span> <span class="n">remote_object</span><span class="o">[</span><span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:local_to_remote_fields_map</span><span class="o">][</span><span class="n">remote_unique_field_name</span><span class="o">]]</span>
</span><span class='line'>        <span class="n">local_object</span> <span class="o">=</span> <span class="n">find_or_initialize_by</span><span class="p">(</span><span class="n">remote_unique_field_name</span> <span class="o">=&gt;</span> <span class="n">remote_unique_field</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">local_to_remote_fields_map</span> <span class="o">=</span> <span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:local_to_remote_fields_map</span><span class="o">]</span>
</span><span class='line'>        <span class="c1"># 逐一设置本地对象需要对接的各个属性</span>
</span><span class='line'>        <span class="n">local_to_remote_fields_map</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>          <span class="n">local_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">remote_object</span><span class="o">[</span><span class="n">importing_fields_map</span><span class="o">[</span><span class="ss">:local_to_remote_fields_map</span><span class="o">][</span><span class="n">attribute</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># ... 关联关系的保存</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">next</span> <span class="k">unless</span> <span class="n">local_object</span><span class="o">.</span><span class="n">changes</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">local_object</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码中，<code>importing_fields_map</code>读取与当前Model匹配的字段映射关系，其内部先通过<code>RemoteDatabase.fields_map[:default]</code>加载了默认的配置，然后通过merge<code>RemoteDatabase.fields_map[:models][self.name.underscore]</code>得到当前model专属的配置，其中的<code>self.name.underscore</code>的值类似于<code>'student'</code>或者<code>'teacher'</code>。</p>

<p>在后续的代码中，基本跟前面列举的代码一致，只是将各种常量对应替换为通过<code>local_to_remote_fields_map</code>存储的配置，并且删除<code>Student</code>以及<code>Teacher</code>的多余常量，在此就不列举示例代码了。</p>

<p>在整个重构的过程中，代码是越来越抽象的，但是代码本身却也因此变得越来越灵活，而至此，我们已经完全将字段映射关系从Ruby代码中剥离，假使以后还需要导入其他数据，我们只需要修改YAML文件，而不再需要碰任何Ruby代码，除非我们需要修改配置项的结构。</p>

<h3>收获重构后的果实：专业数据的导入</h3>

<p>在经历过了几次重构后，今天开始导入学生专业的数据，而我所需要做的全部事情，仅仅只是在yaml文件中加入专业相关的配置，并且在专业的model<code>Major</code>include一下数据导入的Concern就行了。整个过程几分钟就完成了，简直丝般顺滑啊！</p>

<h3>总结</h3>

<p>最后简单总结一下重构完的代码的特点吧：</p>

<ul>
<li>避免了在model或者concern中生命一堆常量或者方法，到处定义的常量会让映射关系的管理非常分散</li>
<li>避免不同命名空间下的同名常量，比如<code>Student::LOCAL_TO_REMOTE_FIELDS_MAP</code>以及<code>Teacher::LOCAL_TO_REMOTE_FIELDS_MAP</code></li>
<li>更集中的字段映射关系配置，避免错漏</li>
<li>逻辑跟映射关系解耦，更简洁稳健的代码</li>
<li>自适应新的数据表导入，不需要再修改或者添加Ruby代码，配置即插即用</li>
</ul>


<h3>问题</h3>

<ul>
<li>如果涉及复杂关联，如何更好地扩展？
现在的数据对接是有限制的，就是数据本身比较规则，几乎是一张表到一张表的对接，但是如果涉及一张表到多张表之间的对接，是否可以继续再将以上代码扩展？</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>说是基本数据，是因为这篇文章介绍的方案目前仅针对数据关联不是特别复杂的场景，而且介绍的场景，数据的导入也比较简单，基本是从远程数据库中取值，然后再直接赋值到项目数据库的记录中。对于需要在数据导入过程中做复杂的数据分析的案例，我暂时也没有尝试过，不过我预计可以尝试使用Ruby中的代码块的方式解决，但是在此不赘述。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sublime text 2基于语法的配置文件]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/08/03/sublime-text-2ji-yu-yu-fa-de-pei-zhi-wen-jian/"/>
    <updated>2014-08-03T23:13:09+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/08/03/sublime-text-2ji-yu-yu-fa-de-pei-zhi-wen-jian</id>
    <content type="html"><![CDATA[<p>最近在学习Python编程语言，但是遇到一个小小的问题，就是原来Ruby的编码规范是用2个空格缩进的，所以以前在Sublime的全局用户配置中设置了<code>"tab_size": 2</code>，所以在编辑Python文件的时候就每次都要从菜单中设置<code>tab_size</code>的大小为4。后来经过搜索，发现Sublime Text 2实际上是支持语法特定的配置的，具体的步骤是：</p>

<!-- More -->


<ol>
<li>先打开一个Python代码文件，或者是设置当前文件的语法为&#8221;Python&#8221;；</li>
<li>点击菜单栏中的“Sublime Text 2 &ndash;> Preferences &ndash;> Settings &ndash; More &ndash;> Syntax Specific &ndash; User”；</li>
<li>可以看到打开了一个名字为&#8221;Python.sublime-setting&#8221;的文件，如果打开的文件的名字不是Python，请回头检查第一步。</li>
<li><p>在打开的特定语言的配置文件中，直接设置:</p>

<p> <code>
 { "tab_size": 4, "translate_tabs_to_spaces": true }
</code></p>

<p> 以上的设置会默认覆盖全局配置。</p></li>
</ol>


<p>以上步骤参考自<a href="http://lukecafe.com/2013/03/daily-tips-sublime-text2-setting-and-ipa-generation/">今日技巧：Sublime Text 2语法缩进配置和ipa文件生成</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spree 2.3.0已经发布]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/07/28/spree-2-dot-3-0yi-jing-fa-bu/"/>
    <updated>2014-07-28T21:32:54+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/07/28/spree-2-dot-3-0yi-jing-fa-bu</id>
    <content type="html"><![CDATA[<p><strong>声明：</strong>原文来自Spree官方博客<a href="http://spreecommerce.com/blog/spree-2-3-released">Spree 2.3.0 Released</a>，原文发布日期是2014-06-30，本文仅作翻译。</p>

<p><strong>简要介绍：</strong><a href="http://spreecommerce.com/">Spree</a>是一个基于<a href="http://rubyonrails.org/">Ruby on Rails</a>开发的开源在线商城框架，提供了从商品展示购买、下单支付到库存管理以及订单管理等一系列基本功能，并且支持通过第三方扩展的形式定制或者扩展框架的功能，最新版本的Spree已经支持最新的Rails版本。</p>

<p>Spree 2.3的最新更改已经加入对Rails 4.1的支持，提供了更好的配置项的存储，更好的针对多店铺的支持，以及更好的游客追踪。Spree 2.3的发布，有赖于总的97位贡献者以及他们总的700多个的commit记录。现在，我们非常兴奋地宣布：Spree 2.3发布了！</p>

<!-- More -->


<h3>Rails 4.1 的支持</h3>

<p>现在，Rails 4.1已经得到了Spree 2.3的支持。如果你希望基于Rails 4.1进行开发，那么Spree 2.3就是特为你准备的发布版。</p>

<h3>基于序列化记录的配置项</h3>

<p>现在，所有的配置项存储在一个记录上，而不是存储在<code>spree_preferences</code>表中。这意味着，为了获取一个配置项，比如价格的计算器配置，就会触发一个数据库查询，所查询的那一行记录有一个包含了所有配置信息的命名为<code>preferences</code>的列。</p>

<p>而在此之前，对于每一个配置记录本身，可能都会有一个单独的数据库调用，而在查询到所请求的配置项之后，还是有可能会有任意数目的数据库调用产生。而现在，我们总的只需要调用一次，这意味着程序本身将会有一些速度上的提升。</p>

<h3>更好的多店铺支持</h3>

<p>我们已经添加了一个名为<code>Spree::Store</code>的model，用于支持基本的多店铺/多域名的站点。其在<code>spree-multi-domain</code>这个扩展的基础上提供了针对多店铺/多域名的基本框架。一些原有的配置项被转移到了这个model上，以此实现根据具体的店铺提供不同配置值：</p>

<ul>
<li><code>Spree::Config[:site_name]</code> 迁移到了 <code>name</code></li>
<li><code>Spree::Config[:site_url]</code> 迁移到了 <code>url</code></li>
<li><code>Spree::Config[:default_meta_description]</code> 迁移到了 <code>meta_description</code></li>
<li><code>Spree::Config[:default_meta_keywords]</code> 迁移到了 <code>meta_keywords</code></li>
<li><code>Spree::Config[:default_seo_title]</code> 迁移到了 <code>seo_title</code></li>
</ul>


<p>一个数据库迁移文件将会负责把这些原有的配置项转移到一个新的默认的store实例上。</p>

<p>一个新的名为<code>ControllerHelpers::Store</code>的Concern提供了一个<code>current_store</code>helper，可以在请求的域名的基础上，通过它获取当前店铺。</p>

<h3>更好的游客追踪</h3>

<p>现在，我们用了一个签名的cookie在浏览器中存储游客的唯一的token。通过它允许关闭了浏览器的顾客可以在再次访问时继续完成他们的购物流程。更重要的是，这也帮助作为商店主人的你方便地识别游客的订单。由于我们在访客来访时都会设置<code>cookies.signed[:guest_token]</code>，所以除了订单，或许你可以把cookie用于其他用途。</p>

<p>举个实际例子，如果游客需要收藏一个商品，你可以创建一个用于记录收藏记录的model，然后把<code>cookies.signed[:guest_token]</code>赋值给这个model中的<code>token</code>字段。这将有助于你分析当前用户在此之前的订单以及收藏记录，这对于商品推荐将是非常有用的。</p>

<h3>总结</h3>

<p>你可以从<a href="https://github.com/spree/spree/releases/tag/v2.3.0">Github</a>上浏览更详细的变更列表。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run a shell script auto-matically when entering/cd a directory]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/05/04/run-a-shell-script-auto-matically-when-entering-a-directory/"/>
    <updated>2014-05-04T10:32:16+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/05/04/run-a-shell-script-auto-matically-when-entering-a-directory</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t know if it is common that you need to run some shell scripts which are  used under only some directories, such as, one of your Rails projects.</p>

<!-- More -->


<p>Today I find that I always need to run <code>rspec</code> command with a <code>SPEC</code> option, which specifies spec files to be run. In short, everytime I should type the following command in my terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake spec <span class="nv">SPEC</span><span class="o">=</span>spec/lib/
</span></code></pre></td></tr></table></div></figure>


<p>It is convenient to run this command as an <strong>alias</strong>, but I don&rsquo;t want to write this alias into the <code>~/.bash_profile</code>, because it should be available under the current directory only. But how?</p>

<p>Thanks to the powerful bash shell and its function, we can rewrite the built-in <code>cd</code> command through a function named <strong>cd</strong>. The following are steps:</p>

<ol>
<li>Open your <code>~/.bash_profile</code>, and insert:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function </span><span class="nb">cd</span> <span class="o">{</span>
</span><span class='line'>    <span class="c"># actually change the directory with all args passed to the function</span>
</span><span class='line'>    <span class="nb">builtin cd</span> <span class="s2">&quot;$@&quot;</span>
</span><span class='line'>    <span class="c"># if there&#39;s a regular file named &quot;.bash_local&quot;...</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;.bash_local&quot;</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>        <span class="c"># source its contents</span>
</span><span class='line'>        <span class="nb">source</span> .bash_local
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>And then source it in your terminal:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Create new file named <code>.bash_local</code> under your target directories(on my machine, it is <code>~/development/rails-dev/graduation-project/</code>), and then insert:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">alias </span><span class="nv">rspec_lib</span><span class="o">=</span><span class="s1">&#39;rake spec SPEC=spec/lib/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Now cd the directory, and the alias <code>rspec_lib</code> will be available auto-matically:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/development/rails-dev/graduation-project/
</span><span class='line'><span class="nv">$ rspec_lib</span>
</span><span class='line'><span class="o">=</span>&gt; .....
</span><span class='line'>
</span><span class='line'>Finished in 0.00617 seconds
</span><span class='line'>5 examples, 0 failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 23543
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<p>Please consider if it is necessary to check <code>.bash_local</code> into your git repo. If not, remember to add it to the <code>.gitignore</code> file.</p>

<h3>TODO</h3>

<p>When leave the directory, how to <strong>&ldquo;un-source&rdquo;</strong> the sourced file, that is, make <code>rspec_lib</code> unavailable?</p>

<h3>Related Links</h3>

<ol>
<li><a href="http://superuser.com/questions/283352/how-do-you-run-a-shell-command-script-automatically-when-entering-cd-ing-a-direc">How do you run a shell command/script automatically when entering/cd-ing a directory on Snow Leopard?</a></li>
<li><a href="http://stackoverflow.com/questions/8760505/is-it-possible-to-unsource-in-bash">Is it possible to “unsource” in bash?</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gemfile指定gem来源的四种方式]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/04/03/gemfilezhi-ding-gemlai-yuan-de-si-chong-fang-shi/"/>
    <updated>2014-04-03T00:30:18+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/04/03/gemfilezhi-ding-gemlai-yuan-de-si-chong-fang-shi</id>
    <content type="html"><![CDATA[<p>Gemfile的作用无非就是告诉bundler你的项目具体都需要哪些gem，这些gem都需要哪些版本，以及从哪获取这些gem。其实你的问题应该就是跟第三点有关，总的来说，gem的来源可以有四种：</p>

<!-- More -->


<h4>1. 从镜像源安装</h4>

<p>这个是最直接的，通过这种方式指定的gem，bundler会从文件开头的<code>source</code>中去查找这个gem：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span>   <span class="c1"># this gem will be installed from https://rubygems.org</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. 从git代码库安装</h4>

<p>通过在<code>gem</code>方法（Gemfile实际上就是一个ruby的代码文件）中指定<code>git</code>参数，可以使bundler从指定的远程代码库上拉取代码，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># nokogiri will be installed from git://github.com/tenderlove/nokogiri.git</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/tenderlove/nokogiri.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. 从github安装</h4>

<p>上面第2种方法只是针对所有合法的git代码库（不仅仅是github，也可以是你自己的一个git服务器上一个代码库）而言，而如果你所需要的库来自于github，则可以通过更方便的<code>github</code>参数实现目标:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">:github</span> <span class="o">=&gt;</span> <span class="s1">&#39;tenderlove/nokogiri&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，只要指定了<code>author/repo_name</code>的形式，bundler就能自动从github上获取你所需要的gem了。
<strong>注意</strong>: 第2跟第3种方式还都可以通过<code>branch</code>参数指定你所需要的代码分支，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;refinerycms&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;refinery/refinerycms&#39;</span><span class="p">,</span> <span class="ss">branch</span><span class="p">:</span> <span class="s1">&#39;master&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. 从文件系统中安装</h4>

<p>假如你有一个已经放在项目目录中（其实可以是任何地方）的gem，则可以通过<code>path</code>参数指定所需的gem在文件系统中的位置，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rails&quot;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;vendor/rails&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>bundler将会根据path指定的路径去查找并且安装gem。</p>

<h3>最后说一下</h3>

<p>最后顺便说下我的一点体会，一般像这种gem来自于项目目录下的情况，大多是因为项目中用到了一些提供扩展机制的框架，比如<strong>Spree</strong>以及<strong>Refinery</strong>，这两者生成的扩展或者子Engine都是以gem的形式放在vendor或者lib目录下，然后从Gemfile里边进行指定，比如我的一个项目中的一个实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;refinerycms-factories&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;vendor/extensions&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>refinerycms-factories是我用Refinery的generator生成的一个子engine，默认放在<code>verdor/extensions</code>目录下。</p>

<p>另一种可能比较常见的情况就是你用到了某个可能不再维护的gem，由于对源代码的改动较大，所以你干脆把这个gem的源代码下载到本地项目目录下，然后直接进行修改，最后通过<code>path</code>去安装。</p>

<h3>参考资料</h3>

<p>关于Gemfiile的更多资料，请自行猛戳：
<a href="http://bundler.io/v1.5/gemfile.html">Bundler homepage</a>
<a href="http://bundler.io/v1.5/man/gemfile.5.html">Gemfile manual page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中Hash的7个日常使用范例]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/25/rubyzhong-hashde-7ge-ri-chang-shi-yong-fan-li/"/>
    <updated>2014-03-25T20:05:56+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/25/rubyzhong-hashde-7ge-ri-chang-shi-yong-fan-li</id>
    <content type="html"><![CDATA[<p>此文翻译自<a href="http://blog.8thcolor.com/en/2014/03/7-daily-use-cases-of-ruby-hash/?utm_source=rubyweekly&amp;utm_medium=email#json-to-hash">7 daily use cases of Ruby Hash</a>，限于本人水平，翻译不当之处，敬请指教！</p>

<p>每一天，你都需要跟Hash相处。创建一个新的Hash或者是通过它的某一个键去检索其中的元素这样的工作，都是常见也是非常简单的。但是当你需要合并两个嵌套的Hash或者是从某一个Hash里边过滤某些键，你可能需要考虑得多一点。通过完整的<a href="http://ruby-doc.org/">文档</a>，你可以找到对Hash中的每一个方法的充分解释。但是由于文档不是面向应用场景的，你可能没法很快找到你的解决方案。在下面，我分享了我日常中经常遇到的Hash中的7个常用场景，希望它们对你有用。</p>

<!-- More -->


<h2>1. 如何将一个JSON转换为一个Hash？</h2>

<p>假设你刚刚接收到一个用JSON表示的Twitter账号的资料信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">data</span> <span class="err">=</span> <span class="err">&#39;</span><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Aaron Patterson&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;screen_name&quot;</span><span class="p">:</span> <span class="s2">&quot;tenderlove&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;location&quot;</span><span class="p">:</span> <span class="s2">&quot;Seattle, WA&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你希望能够将它转化为一个Hash,这样会更方便你进行对数据的操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">profile</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 在IRB中的输出结果：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Aaron Patterson&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;screen_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;tenderlove&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;location&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Seattle, WA&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/json/rdoc/JSON.html#method-i-parse">JSON#parse</a></p>

<h2>2. 如何将一个Hash转换为一个JSON？</h2>

<p>在你的web应用程序中，你需要追踪当前星期每一天新注册用户的数量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">signups_of_the_week</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">monday</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">tuesday</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">wednesday</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">thursday</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">friday</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">saturday</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">sunday</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以通过API的方式把它们以JSON格式提供给客户端：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">signups_of_the_week</span><span class="o">.</span><span class="n">to_json</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 在IRB中的输出结果：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;{</span><span class="se">\&quot;</span><span class="s2">monday</span><span class="se">\&quot;</span><span class="s2">:2,</span><span class="se">\&quot;</span><span class="s2">tuesday</span><span class="se">\&quot;</span><span class="s2">:3,</span><span class="se">\&quot;</span><span class="s2">wednesday</span><span class="se">\&quot;</span><span class="s2">:4,</span><span class="se">\&quot;</span><span class="s2">thursday</span><span class="se">\&quot;</span><span class="s2">:20,</span><span class="se">\&quot;</span><span class="s2">friday</span><span class="se">\&quot;</span><span class="s2">:5,</span><span class="se">\&quot;</span><span class="s2">saturday</span><span class="se">\&quot;</span><span class="s2">:2,</span><span class="se">\&quot;</span><span class="s2">sunday</span><span class="se">\&quot;</span><span class="s2">:5}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/json/rdoc/JSON.html#method-i-generate">JSON#generate</a>
边注：<a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/json/rdoc/JSON.html#method-i-pretty_generate">JSON#pretty_generate</a>对于更好的打印以及调试非常有用。</p>

<h2>3. 如何为一个嵌套的Hash设置默认值？</h2>

<p>你有一个以name为索引的联系人的集合，也就是一个嵌套的Hash：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contacts</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;John&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;john@doe.com&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Freddy&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Freddy&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;freddy@mercury.com&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你在处理单个联系人的时候，你不需要每一次都检查它是否存在。你只需要写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contacts</span><span class="o">[</span><span class="s1">&#39;Jane&#39;</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;jane@doe.com&#39;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">contacts</span><span class="o">[</span><span class="s1">&#39;Jane&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> IRB输出 </strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;Jane&quot;</span><span class="p">,</span> <span class="ss">:email</span><span class="o">=&gt;</span><span class="s2">&quot;jane@doe.com&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以在创建Hash的时候通过设置代码块来实现默认值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contacts</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">hsh</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class='line'>  <span class="n">hsh</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="n">key</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者是使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contacts</span><span class="o">.</span><span class="n">default_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">hsh</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class='line'><span class="err">  </span><span class="n">hsh</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="nb">name</span><span class="p">:</span> <span class="n">key</span><span class="p">,</span>
</span><span class='line'><span class="err">    </span><span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="err">  </span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-c-new">Hash#new</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-default_proc-3D">Hash#default_proc</a></p>

<h2>4. 如何合并两个嵌套的Hash？</h2>

<p>在一个在线商店里，你想要将一个心愿单与当前的购物篮进行合并，这两者都是以商品的id号作为索引：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wish_list</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="mi">8</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;The Color of Magic&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="p">},</span>
</span><span class='line'><span class="err">  </span><span class="mi">42</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;The Hitch-Hiker&#39;s Guide to the Galaxy&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">    </span><span class="ss">price</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'><span class="err">  </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">basket</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="mi">8</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="ss">price</span><span class="p">:</span> <span class="mi">10</span>
</span><span class='line'><span class="err">  </span><span class="p">},</span>
</span><span class='line'><span class="err">  </span><span class="mi">1729</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Ramanujan:  Twelve Lectures on Subjects Suggested by His Life and Work&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">price</span><span class="p">:</span> <span class="mi">28</span>
</span><span class='line'><span class="err">  </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>借助于ActiveSupport,你可以简单地实现你的目标：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/core_ext/hash&#39;</span> <span class="c1"># not necessary if in Rails</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">basket</span><span class="o">.</span><span class="n">deep_merge</span><span class="p">(</span><span class="n">wish_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>又或者，在没有ActiveSupport的情况下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">deep_merge</span><span class="p">(</span><span class="n">h1</span><span class="p">,</span> <span class="n">h2</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="n">h1</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">h2</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">h1_elem</span><span class="p">,</span> <span class="n">h2_elem</span><span class="o">|</span> <span class="n">deep_merge</span><span class="p">(</span><span class="n">h1_elem</span><span class="p">,</span> <span class="n">h2_elem</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">deep_merge</span><span class="p">(</span><span class="n">basket</span><span class="p">,</span> <span class="n">wish_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> IRB输出: </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">8</span><span class="o">=&gt;</span><span class="p">{</span><span class="ss">:price</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:title</span><span class="o">=&gt;</span><span class="s2">&quot;The Color of Magic&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="mi">1729</span><span class="o">=&gt;</span><span class="p">{</span><span class="ss">:title</span><span class="o">=&gt;</span><span class="s2">&quot;Ramanujan:  Twelve Lectures on Subjects Suggested by His Life and Work&quot;</span><span class="p">,</span> <span class="ss">:price</span><span class="o">=&gt;</span><span class="mi">28</span><span class="p">},</span>
</span><span class='line'>  <span class="mi">42</span><span class="o">=&gt;</span><span class="p">{</span><span class="ss">:title</span><span class="o">=&gt;</span><span class="s2">&quot;The Hitch-Hiker&#39;s Guide to the Galaxy&quot;</span><span class="p">,</span> <span class="ss">:price</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-merge">Hash#merge</a>, <a href="http://api.rubyonrails.org/classes/Hash.html#method-i-deep_merge">Hash#deep_merge</a></p>

<h2>5. 如何过滤掉一个Hash中的某些key？</h2>

<p>你已经创建了一个表示日销售额的矩形图，并且你将它以Hash的方式存储，每一天就是一个key：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">histogram</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="ss">monday</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">tuesday</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">wednesday</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">thursday</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">friday</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">saturday</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="ss">sunday</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你想从中过滤掉Saturday以及Sunday。通过ActiveSupport，你可以像下面这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/core_ext/hash&#39;</span> <span class="c1"># not necessary if Rails</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">histogram</span><span class="o">.</span><span class="n">except</span><span class="p">(</span><span class="ss">:saturday</span><span class="p">,</span> <span class="ss">:sunday</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者在没有ActiveSupport的情况下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="n">hsh</span><span class="p">,</span> <span class="o">*</span><span class="n">keys</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="n">hsh</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">h</span><span class="o">|</span>
</span><span class='line'><span class="err">    </span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="err">  </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="n">filter</span><span class="p">(</span><span class="n">histogram</span><span class="p">,</span> <span class="ss">:saturday</span><span class="p">,</span> <span class="ss">:sunday</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一个简洁点实现则是基于<code>reject</code>方法的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">filter2</span><span class="p">(</span><span class="n">hsh</span><span class="p">,</span> <span class="o">*</span><span class="n">keys</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="n">hsh</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span> <span class="n">keys</span><span class="o">.</span><span class="n">include?</span> <span class="n">k</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>请注意，如果你正在处理一个比较大的集合，你最好是先衡量下你的实现，一次选择最好的其中一个实现。
<strong> IRB输出：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:monday</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:tuesday</span><span class="o">=&gt;</span><span class="mi">7</span><span class="p">,</span> <span class="ss">:wednesday</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:thursday</span><span class="o">=&gt;</span><span class="mi">18</span><span class="p">,</span> <span class="ss">:friday</span><span class="o">=&gt;</span><span class="mi">7</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://api.rubyonrails.org/classes/Hash.html#method-i-except">Hash#except</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-delete">Hash#delete</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-reject">Hash#reject</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Object.html#method-i-dup">Object#dup</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Object.html#method-i-tap">Object#tap</a></p>

<h2>6. 如何通过value对一个Hash进行“排序”？</h2>

<p>在一个骰子类游戏中，你在Hash中储存了每一个选手的得分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scores</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="s1">&#39;The Lady&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="s1">&#39;Fate&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="s1">&#39;Death&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你想要通过他们的得分对他们进行排序。你可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">leaderboard</span> <span class="o">=</span> <span class="n">scores</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">score</span><span class="o">|</span> <span class="o">-</span><span class="n">score</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> IRB输出：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;Death&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;The Lady&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;Fate&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://ruby-doc.org/core-2.1.0/Enumerable.html#method-i-sort_by">Enumerable#sort_by</a>
边注：Hash通过元素插入时的顺序去枚举它们的值。</p>

<h2>7. 如何找出两个Hash中的不同？</h2>

<p>假设你定期地从RSS订阅源中读取数据，并且将他们放在了一个Hash里边：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">entries</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">1372284000</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-4073&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">1368482400</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-2065&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你更新了之后，你可能得到另一个Hash：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">updated_entries</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="mi">1385074800</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-4164&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="mi">1372284000</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-4073&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">  </span><span class="mi">1368482400</span> <span class="o">=&gt;</span> <span class="s2">&quot;CVE-2013-2065&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你想要查找出哪一条记录才是新加的，这样你就可以通过email的方式将它们发送出去。最好的解决方案是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_entries</span> <span class="o">=</span> <span class="n">updated_entries</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span> <span class="n">entries</span><span class="o">.</span><span class="n">include?</span> <span class="n">k</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> IRB输出：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="mi">1385074800</span><span class="o">=&gt;</span><span class="s2">&quot;CVE-2013-4164&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看文档：<a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-i-include-3F">Hash#include?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[注意Rake Task中invoke方法跟execute方法的不同]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/21/zhu-yi-rake-taskzhong-invokegen-executefang-fa-de-bu-tong/"/>
    <updated>2014-03-21T01:18:46+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/21/zhu-yi-rake-taskzhong-invokegen-executefang-fa-de-bu-tong</id>
    <content type="html"><![CDATA[<p>平时如果跟Rake Task有过接触的同学都会知道，当我们需要在一个Task里边调用另一个Task的时候，我们可以使用<code>Rake::Task['task_name'].invoke</code>的方式。但是在今天的实践中，才知道<code>Rake::Task#invoke</code>在默认情况下在整个运行过程中将只会被调用一次而已。话不多说，动手演示：</p>

<!-- More -->


<p>准备一个<strong>say hello</strong>的task，代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/tasks/demo.rake</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:demo</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Print &#39;Hello&#39; string&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:say_hello</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello, World!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来在命令行中执行rake task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake demo:say_hello
</span><span class='line'><span class="o">=</span>&gt; Hello, World!
</span></code></pre></td></tr></table></div></figure>


<p>假设我们一个循环，需要调用上边的task共5次，那么我们可能会这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:demo</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ....</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Print &#39;Hello, World!&#39; five times&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:say_five_hello</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;demo:say_hello&#39;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, 让我们尝试着运行这个<code>say_five_hello</code>的task，是不是真的会打印5次&#8217;Hello, World!&lsquo;呢?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake demo:say_five_hello
</span><span class='line'><span class="o">=</span>&gt; Hello, World!
</span></code></pre></td></tr></table></div></figure>


<p>结果就是，&#8217;Hello, World!&lsquo;只打印了一次，也就是说，我们的<code>Rake::Task['demo:say_hello']</code>只被运行了一次。</p>

<p>经过搜索，从StackOverflow找到了这个问题的相关描述，详见：<a href="http://stackoverflow.com/a/12948485">How do I execute Rake tasks with arguments multiple times?</a></p>

<p>按照答案中的描述，我们有两种修改方案。第一种就是将上述代码进行修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:demo</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Print &#39;Hello, World!&#39; five times&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:say_five_hello</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;demo:say_hello&#39;</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次运行，这次总算得到期待结果了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake demo:say_five_hello
</span><span class='line'><span class="o">=</span>&gt; Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span></code></pre></td></tr></table></div></figure>


<p>而第二种方法则会稍微麻烦一点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:demo</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Print &#39;Hello, World!&#39; five times&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:say_five_hello</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;demo:say_hello&#39;</span><span class="o">].</span><span class="n">reenable</span>
</span><span class='line'>      <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;demo:say_hello&#39;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次执行rake task, 同样能够得到预期结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake demo:say_five_hello
</span><span class='line'><span class="o">=</span>&gt; Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span><span class='line'>   Hello, World!
</span></code></pre></td></tr></table></div></figure>


<h3>未完待续</h3>

<p>针对重复调用的行为上的不同只是<code>invoke</code>以及<code>execute</code>方法之间的一个基本差异而已，那第一种方案跟第二种方案的差异又有什么不同？在带参数的情况下，又该如何考虑两个方法之间的差异？</p>

<p><a href="http://rake.rubyforge.org/classes/Rake/Task.html">Rake::Task source code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[属性方法]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/12/shu-xing-fang-fa/"/>
    <updated>2014-03-12T20:58:17+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/12/shu-xing-fang-fa</id>
    <content type="html"><![CDATA[<p>此文翻译自<a href="http://monkeyandcrow.com/blog/reading_rails_attribute_methods/">Reading Rails &ndash; Attribute Methods</a>，限于本人水平，翻译不当之处，敬请指教！</p>

<p>在我们<a href="http://Martin91.github.io/blog/2014/03/07/zhui-zong-bian-geng/">上一篇的探讨</a>中，我们已经看到了Rails在跟踪属性变更中使用到的属性方法（attribute methods）。有三种类型的属性方法：前缀式（prefix）、后缀式（suffix）以及固定词缀式（ affix）。为了表述简洁，我们将只关注类似<code>attribute_method_suffix</code>这样的后缀式属性方法，并且特别关注它是如何帮助我们实现类似<code>name</code>这样的模型属性以及对应生成的类似<code>name_changed?</code>这样的方法的。</p>

<!-- More -->


<p>如果需要跟着我的步骤走，请使用<a href="https://github.com/adamsanderson/qwandry">qwandry</a>打开每一个相关的代码库，或者直接从<a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github</a>查看源码即可。</p>

<h3>声明（Declarations）</h3>

<p>属性方法是Rails中众多使用了元编程技术的案例之一。在元编程中，我们编写可以编写代码的代码。举例来说，<code>attribute_method_suffix</code>后缀式方法是一个为每个属性都定义了一个helper方法的方法。在<a href="http://Martin91.github.io/blog/2014/03/07/zhui-zong-bian-geng/">之前的讨论</a>中，ActiveModel使用这种方式为您的每一个属性都定义了一个<code>_changed?</code>方法(<strong>提示</strong>： 命令行中键入<code>qw activemodel</code>查看代码)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dirty</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:AttributeMethods</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">attribute_method_suffix</span> <span class="s1">&#39;_changed?&#39;</span><span class="p">,</span> <span class="s1">&#39;_change&#39;</span><span class="p">,</span> <span class="s1">&#39;_will_change!&#39;</span><span class="p">,</span> <span class="s1">&#39;_was&#39;</span>
</span><span class='line'>    <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们打开ActiveModel库中的<code>attribute_methods.rb</code>文件，并且看一下到底发生了什么事情。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_method_suffix</span><span class="p">(</span><span class="o">*</span><span class="n">suffixes</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">attribute_method_matchers</span> <span class="o">+=</span> <span class="n">suffixes</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">suffix</span><span class="o">|</span>
</span><span class='line'>    <span class="no">AttributeMethodMatcher</span><span class="o">.</span><span class="n">new</span> <span class="ss">suffix</span><span class="p">:</span> <span class="n">suffix</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你调用<code>attribute_method_suffix</code>方法的时候，每一个后缀都通过<code>map!</code>方法转换为一个<code>AttributeMethodMatcher</code>对象。这些对象会被存储在<code>attribute_method_matchers</code>中。如果你重新看一下这个module的顶部，你会发现<code>attribute_method_matchers</code>是在每一个包含此module的类中使用<code>class_attribute</code>定义的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">AttributeMethods</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">class_attribute</span> <span class="ss">:attribute_aliases</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:attribute_method_matchers</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">instance_writer</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>class_attribute</code>方法帮助你在类上定义属性。你可以这样在你自己的代码中这样使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="n">class_attribute</span> <span class="ss">:database</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="no">Person</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="no">Sql</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:host</span><span class="o">=&gt;</span><span class="s1">&#39;localhost&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Employee</span><span class="o">.</span><span class="n">database</span> <span class="c1">#=&gt; &lt;Sql:host=&#39;localhost&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby中并没有<code>class_attribute</code>的内置实现，它是在ActiveSupport(<strong>提示</strong>:命令行中键入<code>qw activesupport</code>查看代码)中定义的方法。如果你对此比较好奇，可以简单看下<code>attribute.rb</code></p>

<p>现在我们来看一下<code>AttributeMethodMatcher</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AttributeMethodMatcher</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:prefix</span><span class="p">,</span> <span class="ss">:suffix</span><span class="p">,</span> <span class="ss">:method_missing_target</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>    <span class="vi">@prefix</span><span class="p">,</span> <span class="vi">@suffix</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:prefix</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="n">options</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:suffix</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@regex</span> <span class="o">=</span> <span class="sr">/^(?:</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="vi">@prefix</span><span class="p">)</span><span class="si">}</span><span class="sr">)(.*)(?:</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="vi">@suffix</span><span class="p">)</span><span class="si">}</span><span class="sr">)$/</span>
</span><span class='line'>    <span class="vi">@method_missing_target</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@prefix</span><span class="si">}</span><span class="s2">attribute</span><span class="si">#{</span><span class="vi">@suffix</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="vi">@method_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">%s</span><span class="si">#{</span><span class="n">suffix</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中的<code>prefix</code>以及<code>suffix</code>是通过<code>Hash#fetch</code>方法提取出来的。这会返回一个对应键的值，或者是一个默认值。如果调用方法的时候没有提供默认值，<code>Hash#fetch</code>方法将会抛出一个异常，提示指定的键不存在。对于options的处理来说是一种不错的模式，特别是对于boolean型数据来说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Mortimer&quot;</span><span class="p">,</span> <span class="ss">:imaginary</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">}</span>
</span><span class='line'><span class="c1"># Don&#39;t do this:</span>
</span><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:imaginary</span><span class="o">]</span> <span class="o">||</span> <span class="kp">true</span>     <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="c1"># Do this:</span>
</span><span class='line'><span class="n">options</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:imaginary</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于我们的<code>attribute_method_suffix</code>其中的<code>'_changed'</code>示例来说，<code>AttributeMethodMatcher</code>将会有如下的实例变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@prefix</span>                <span class="c1">#=&gt; &quot;&quot;</span>
</span><span class='line'><span class="vi">@suffix</span>                <span class="c1">#=&gt; &quot;_changed?&quot;</span>
</span><span class='line'><span class="vi">@regex</span>                 <span class="c1">#=&gt; /^(?:)(.*)(?:_changed\?)$/</span>
</span><span class='line'><span class="vi">@method_missing_target</span> <span class="c1">#=&gt; &quot;attribute_changed?&quot;</span>
</span><span class='line'><span class="vi">@method_name</span>           <span class="c1">#=&gt; &quot;%s_changed?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你一定想知道<code>%s_changed</code>中的<code>%s</code>是用来干什么的吧？这是一个格式化字符串（format string）。你可以使用<code>sprintf</code>方法对它插入值，或者使用缩写（shortcut）<code>%</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%s_changed?&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;named_changed?&quot;</span>
</span><span class='line'><span class="s2">&quot;%s_changed?&quot;</span> <span class="o">%</span> <span class="s2">&quot;age&quot;</span>          <span class="c1">#=&gt; &quot;age_changed?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二个比较有趣的地方就是正则表达式创建的方式。请留意创建<code>@regex</code>变量时<code>Regexp.escape</code>的用法。如果后缀没有被escape，则正则表达式中带有特殊含义的符号将会被错误解释(misinterpreted)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Don&#39;t do this!</span>
</span><span class='line'><span class="n">regex</span> <span class="o">=</span> <span class="sr">/^(?:</span><span class="si">#{</span><span class="vi">@prefix</span><span class="si">}</span><span class="sr">)(.*)(?:</span><span class="si">#{</span><span class="vi">@suffix</span><span class="si">}</span><span class="sr">)$/</span> <span class="c1">#=&gt; /^(?:)(.*)(?:_changed?)$/</span>
</span><span class='line'><span class="n">regex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;name_changed?&quot;</span><span class="p">)</span>                 <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="n">regex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;name_change&quot;</span><span class="p">)</span>                   <span class="c1">#=&gt; #&lt;MatchData &quot;name_change&quot; 1:&quot;name&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Do this:</span>
</span><span class='line'><span class="vi">@regex</span> <span class="o">=</span> <span class="sr">/^(?:</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="vi">@prefix</span><span class="p">)</span><span class="si">}</span><span class="sr">)(.*)(?:</span><span class="si">#{</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="vi">@suffix</span><span class="p">)</span><span class="si">}</span><span class="sr">)$/</span>
</span><span class='line'><span class="n">regex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;name_changed?&quot;</span><span class="p">)</span>                 <span class="c1">#=&gt; #&lt;MatchData &quot;name_changed?&quot; 1:&quot;name&quot;&gt;</span>
</span><span class='line'><span class="n">regex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;name_change&quot;</span><span class="p">)</span>                   <span class="c1">#=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>请仔细记住<code>regex</code>以及<code>method_name</code>，它们可以用来匹配和生成属性方法，我们在后面还会继续用到它们。</p>

<p>我们现在已经搞明白了属性方法是如何声明的，但是实际中，Rails又是如何使用它们的呢？</p>

<h3>通过Method Missing调用（Invocation With Method Missing）</h3>

<p>当我们调用了一个未定义的方法时，Rails将会在抛出异常之前调用对象的<code>method_missing</code>方法。让我们看看Rails是如何利用这个技巧调用属性方法的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">respond_to_without_attributes?</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">match_attribute_method?</span><span class="p">(</span><span class="nb">method</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>    <span class="n">match</span> <span class="p">?</span> <span class="n">attribute_missing</span><span class="p">(</span><span class="n">match</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="p">:</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>传给<code>method_missing</code>方法的第一个参数是一个用symbol类型表示的方法名，比如，我们的<code>:name_changed?</code>。<code>*args</code>是（未定义的）方法被调用时传入的所有参数，<code>&amp;block</code>是一个可选的代码块。Rails首先通过调用<code>respond_to_without_attributes</code>方法检查是否有别的方法可以对应这次调用。如果别的方法可以处理这次调用，则通过<code>super</code>方法转移控制权。如果找不到别的方法可以处理当前的调用，ActiveModel则会通过<code>match_attribute_method?</code>方法检查当前调用的方法是否是一个属性方法。如果是，它则会接着调用<code>attribute_missing</code>方法。</p>

<p><code>match_attribute_method</code>方法利用了之前声明过的<code>AttributeMethodMatcher</code>对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">match_attribute_method?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">match</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:attribute_method_matcher</span><span class="p">,</span> <span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">match</span> <span class="k">if</span> <span class="n">match</span> <span class="o">&amp;&amp;</span> <span class="n">attribute_method?</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">attr_name</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个方法里边发生了两件事。第一，Rails查找到了一个匹配器(matcher)，并且检查这是否真的是一个属性。说实话，我自己也是比较迷惑，为什么<code>match_attribute_method?</code>方法调用的是<code>self.class.send(:attribute_method_matcher, method_name)</code>，而不是<code>self.attribute_method_matcher(method_name)</code>，但是我们还是可以假设它们的效果是一样的。</p>

<p>如果我们再接着看<code>attribute_method_matcher</code>，就会发现它的最核心的代码仅仅只是扫描匹配了<code>AttributeMethodMatcher</code>实例，它所做的事就是对比对象本身的正则表达式与当前的方法名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_method_matcher</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="n">attribute_method_matchers</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span> <span class="nb">method</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果Rails找到了匹配当前调用的方法的属性，那么接下来所有参数都会被传递给<code>attribute_missing</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_missing</span><span class="p">(</span><span class="n">match</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">__send__</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">target</span><span class="p">,</span> <span class="n">match</span><span class="o">.</span><span class="n">attr_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法将匹配到的属性名以及传入的任意参数或者代码块代理给了<code>match.target</code>。回头看下我们的实例变量，<code>match.target</code>将会是<code>attribute_changed?</code>，而且<code>match.attr_name</code>则是&#8221;name&#8221;。<code>__send__</code>方法将会调用<code>attribute_changed?</code>方法，或者是你定义的任意一个特殊的属性方法。</p>

<h3>元编程（Metaprogramming）</h3>

<p>有很多的方式可以对一个方法的调用进行分发（dispatch），如果这个方法经常被调用，那么实现一个<code>name_changed?</code>方法将会更为有效。Rails通过<code>define_attribute_methods</code>方法做到了对这类属性方法的自动定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">define_attribute_methods</span><span class="p">(</span><span class="o">*</span><span class="n">attr_names</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attr_names</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">attr_name</span><span class="o">|</span> <span class="n">define_attribute_method</span><span class="p">(</span><span class="n">attr_name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">define_attribute_method</span><span class="p">(</span><span class="n">attr_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attribute_method_matchers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">matcher</span><span class="o">|</span>
</span><span class='line'>    <span class="n">method_name</span> <span class="o">=</span> <span class="n">matcher</span><span class="o">.</span><span class="n">method_name</span><span class="p">(</span><span class="n">attr_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_proxy_call</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">generated_attribute_methods</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">method_name</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">matcher</span><span class="o">.</span><span class="n">method_missing_target</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">attr_name</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>matcher.method_name</code>使用了我们前面见到过的格式化字符串，并且插入了<code>attr_name</code>。在我们的例子中，<code>"%s_changed?"</code>变成了<code>"name_changed?"</code>。现在我们我们准备好了了解在<code>define_proxy_call</code>中的元编程。下面是这个方法被删掉了一些特殊场景下的代码的版本，你可以在阅读完这篇文章后自己去了解更多的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">define_proxy_call</span><span class="p">(</span><span class="n">include_private</span><span class="p">,</span> <span class="n">mod</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="nb">send</span><span class="p">,</span> <span class="o">*</span><span class="n">extra</span><span class="p">)</span>
</span><span class='line'>  <span class="n">defn</span> <span class="o">=</span> <span class="s2">&quot;def </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">(*args)&quot;</span>
</span><span class='line'>  <span class="n">extra</span> <span class="o">=</span> <span class="p">(</span><span class="n">extra</span><span class="o">.</span><span class="n">map!</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:inspect</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;*args&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">target</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">send</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="n">extra</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mod</span><span class="o">.</span><span class="n">module_eval</span> <span class="o">&lt;&lt;-</span><span class="no">RUBY</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">    #{defn}</span>
</span><span class='line'><span class="sh">      #{target}</span>
</span><span class='line'><span class="sh">    end</span>
</span><span class='line'><span class="no">  RUBY</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里为我们定义了一个新的方法。<code>name</code>就是正要被定义的方法名，而<code>send</code>则是处理器(handler)，另外的<code>extra</code>是属性名。<code>mod</code>参数是一个Rails用<code>generated_attribute_methods</code>方法生成的特殊的模块（module），它被嵌入（mixin）到我们的类中。现在让我们多看一下<code>module_eval</code>方法。这里有三件有趣的事情发生了。</p>

<p>第一件事就是<a href="http://blog.jayfields.com/2006/12/ruby-multiline-strings-here-doc-or.html">HEREDOC</a>被用作一个参数传给了一个方法。这是有点难懂的，但是对某些场景却是非常有用的。举个例子，想象我们在一个服务器响应(response)中有一个方法要用来嵌入Javascript代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_js</span><span class="p">(</span><span class="o">&lt;&lt;-</span><span class="no">JS</span><span class="p">,</span> <span class="ss">:minify</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="sh">  $(&#39;#logo&#39;).show();</span>
</span><span class='line'><span class="sh">  App.refresh();</span>
</span><span class='line'><span class="no">JS</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将会把字符串<code>"$('#logo').show(); App.refresh();"</code>作为调用<code>include_js</code>时传入的第一个参数，而<code>:minify =&gt; true</code>作为第二个参数。在Ruby中需要生成代码时，这是一个非常有用的技巧。值得高兴的是，诸如<a href="https://github.com/textmate/textmate">TextMate</a>这类编辑器都能够识别这个模式，并且正确地高亮显示字符串。即使你并不需要生成代码，HEREDOC对于多行的字符串也是比较有用的。</p>

<p>现在我们就知道了<code>&lt;&lt;-RUBY</code>做了些什么事，但是<code>__FILE__</code>以及<code>__LINE__ + 1</code>呢？<code>__FILE__</code>返回了当前文件的（相对）路径，而<code>__LINE__</code>返回了当前代码的行号。<code>module_eval</code>接收这些参数，并通过这些参数决定新的代码定义在文件中“看起来”的位置。在对于栈跟踪（stack traces）来说是特别有用的。</p>

<p>最后，让我们看一些<code>module_eval</code>中实际执行的代码。我们可以把值替换成我们的<code>name_changed?</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mod</span><span class="o">.</span><span class="n">module_eval</span> <span class="o">&lt;&lt;-</span><span class="no">RUBY</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">  def name_changed?(*args)</span>
</span><span class='line'><span class="sh">    attribute_changed?(&quot;name&quot;, *args)</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'><span class="no">RUBY</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在<code>name_changed?</code>就是一个真实的方法了，比起依赖于<code>method_missing</code>方法的实现，这种方法的开销要小得多。</p>

<h3>总结（Recap）</h3>

<p>我们发现了调用<code>attribute_method_suffix</code>方法会保存一个配置好的对象，这个对象用于Rails中两种元编程方法中的一种。不考虑是否使用了<code>method_missing</code>，或者通过<code>module_eval</code>定义了新的方法，方法的调用最后总会被传递到诸如<code>attribute_changed?(attr)</code>这样的方法上。</p>

<p>走过这次比较宽泛的旅途，我们也收获了一些有用的技巧：</p>

<ul>
<li>你必须使用<code>Hash#fetch</code>从options中读取参数，特别是对于boolean类型参数来说。</li>
<li>诸如<code>"%s_changed"</code>这样的格式化字符串，可以被用于简单的模板。</li>
<li>可以使用<code>Regexp.escape</code>escape正则表达式。</li>
<li>当你试图调用一个未定义的方法时，Ruby会调用<code>method_missing</code>方法。</li>
<li>HEREDOCs可以用在方法参数中，也可以用来定义多行的字符串。</li>
<li><code>__FILE__</code>以及<code>__LINE__</code>指向当前的文件以及行号。</li>
<li>你可以使用<code>module_eval</code>动态生成代码。</li>
</ul>


<p>坚持浏览Rails的源代码吧，你总会发现你原本不知道的宝藏！</p>

<h3>喜欢这篇文章？</h3>

<p><a href="http://Martin91.github.io/blog/2014/03/02/jie-du-rails-xi-lie-fan-yi/">阅读另外8篇</a>《解读Rails》中的文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跟踪model中属性（值）的变更]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/07/zhui-zong-bian-geng/"/>
    <updated>2014-03-07T13:02:47+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/07/zhui-zong-bian-geng</id>
    <content type="html"><![CDATA[<p>此文翻译自<a href="http://monkeyandcrow.com/blog/reading_rails_change_tracking/">Reading Rails &ndash; Change Tracking</a>，限于本人水平，翻译不当之处，敬请指教！</p>

<p>我们今天来看看Rails是如何追踪model里边属性的变更的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Mortimer&quot;</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name_changed?</span>    <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name_was</span>         <span class="c1">#=&gt; &quot;Horton&quot;</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">changes</span>          <span class="c1">#=&gt; {&quot;name&quot;=&gt;[&quot;Horton&quot;,&quot;Mortimer&quot;]}</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">changes</span>          <span class="c1">#=&gt; {}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>name_changed?</code>方法是从哪来的呢？变更又是如何被创建的？让我们顺着这个场景，看看这一切背后的秘密。</p>

<!-- More -->


<p>如果需要跟着我的步骤走，请使用<a href="https://github.com/adamsanderson/qwandry">qwandry</a>打开每一个相关的代码库，或者直接从<a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github</a>查看源码即可。</p>

<h3>ActiveModel</h3>

<p>当你想探寻ActiveRecord里边的功能时，你应该首先了解ActiveModel。ActiveModel（<strong>提示</strong>： 命令行中键入<code>qw activemodel</code>查看代码）定义了没有与数据库捆绑的逻辑。我们将从<code>dirty.rb</code>文件开始。在这个模块最开始的地方，代码调用了<code>attribute_method_suffix</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dirty</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:AttributeMethods</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">attribute_method_suffix</span> <span class="s1">&#39;_changed?&#39;</span><span class="p">,</span> <span class="s1">&#39;_change&#39;</span><span class="p">,</span> <span class="s1">&#39;_will_change!&#39;</span><span class="p">,</span> <span class="s1">&#39;_was&#39;</span>
</span><span class='line'>    <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>attribute_method_suffix</code>定义了定制的属性读写器。这主要用来告诉Rails将一些带有类似<code>_changed?</code>后缀的调用分发到特定的处理器方法上。为了看看它们是如何实现的，请向下滚动代码，并且找到<code>def attribute_changed?</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">changed_attributes</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们将会在另外的一篇文章中再着重介绍如何连接这些方法的细节，当你调用一个类似<code>name_changed?</code>的方法时，Rails将会把<code>"name"</code>作为参数<code>attr</code>传给上述方法。往回看一点点，你会发现<code>changed_attributes</code>只是一个包含了从属性名到旧的属性值的映射的<code>Hash</code>而已：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Returns a hash of the attributes with unsaved changes indicating their original</span>
</span><span class='line'><span class="c1"># values like &lt;tt&gt;attr =&gt; original value&lt;/tt&gt;.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   person.name # =&gt; &quot;bob&quot;</span>
</span><span class='line'><span class="c1">#   person.name = &#39;robert&#39;</span>
</span><span class='line'><span class="c1">#   person.changed_attributes # =&gt; {&quot;name&quot; =&gt; &quot;bob&quot;}</span>
</span><span class='line'><span class="k">def</span> <span class="nf">changed_attributes</span>
</span><span class='line'>  <span class="vi">@changed_attributes</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Ruby中，如果你之前都没有见过<code>||=</code>操作，那么你可能需要了解这其实是一个用于初始化变量值的技巧。当它第一次被访问的时候，变量的值是<code>nil</code>，所以它返回了一个空的<code>Hash</code>并且用其初始化<code>@changed_attributes</code>。当它再一次被访问的时候，<code>@changed_attributes</code>已经被赋值过了。那么现在我们可以回答我们的第一个问题了，<code>name_changed?</code>方法被转发到<code>attribute_changed?</code>方法，而后者会在<code>changed_attributes</code>中查找特定的值。</p>

<p>在我们的例子中，我们看到<code>changes</code>返回一个类似<code>{"name"=&gt;["Horton","Mortimer"]}</code>这样既包含旧的属性值，又包含新的属性值的<code>Hash</code>。让我们这又是如何做到的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">changes</span>
</span><span class='line'>  <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:HashWithIndifferentAccess</span><span class="o">[</span><span class="n">changed</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="kp">attr</span><span class="o">|</span> <span class="o">[</span><span class="kp">attr</span><span class="p">,</span> <span class="n">attribute_change</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码看起来有点难以理解，但是我们可以一步一步分析。首先我们从<code>ActiveSupport::HashWithIndifferentAccess</code>开始，这是在ActiveSupport中所定义的<code>Hash</code>的子类，通过字符串类型或者符号类型的键去访问它将得到一样的结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:HashWithIndifferentAccess</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Mortimer&quot;</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;name&quot;</span><span class="o">]</span> <span class="c1">#=&gt; &quot;Mortimer&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来就有点奇怪了，Rails调用了<code>Hash[]</code>方法。这是一个鲜为人知的从包含键/值对的数组中初始化一个哈希表的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Hash</span><span class="o">[</span>
</span><span class='line'>  <span class="o">[</span><span class="ss">:name</span><span class="p">,</span> <span class="s2">&quot;Mortimer&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="o">[</span><span class="ss">:species</span><span class="p">,</span> <span class="s2">&quot;Crow&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span> <span class="c1">#=&gt; {[:name, &quot;Mortimer&quot;]=&gt;[:species, &quot;Crow&quot;]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以查看<code>Hash Tricks</code>找到更多类似的方法。<code>changes</code>中剩余部分的代码就比较清晰了。属性名被映射到类似<code>[attr, attribute_change(attr)]</code>的数组。其中第一个元素，也就是<code>attr</code>编程了一个键，而对应的值则是<code>attribute_change(attr)</code>返回的结果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_change</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>  <span class="o">[</span><span class="n">changed_attributes</span><span class="o">[</span><span class="kp">attr</span><span class="o">]</span><span class="p">,</span> <span class="nb">__send__</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span><span class="o">]</span> <span class="k">if</span> <span class="n">attribute_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是另一个被分发的属性方法，但是在这个例子里，它返回了一个包含了两个元素的数组，第一个元素是从<code>changed_attributes</code>哈希表中读到的<code>attr</code>所对应的旧的值，第二个则是所对应的新的值。Rails通过使用<code>__send__</code>方法调用了名为<code>attr</code>的方法，进而得到新的属性值。然后这对值会被返回，并且用作<code>changes</code>哈希表中<code>attr</code>所对应的值。</p>

<h3>ActiveRecord</h3>

<p>现在让我们来找出Rails是如何记录更改的。ActiveRecord实现了读写ActiveModel所跟踪的属性的代码。跟ActiveModel一样，ActiveRecord也有一个<code>dirty.rb</code>文件，我们将要对这个文件进行挖掘。通过在定义了<code>changed_attributes</code>的文件中（<strong>提示</strong>：命令行中键入<code>qw activerecord</code>）找到的相关代码，我们可以看到这个文件包装了ActiveRecord的<code>write_attribute</code>与逻辑以实现对变更的跟踪。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Wrap write_attribute to remember original attribute value.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">write_attribute</span><span class="p">(</span><span class="kp">attr</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">attr</span> <span class="o">=</span> <span class="kp">attr</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># The attribute already has an unsaved change.</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">attribute_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>    <span class="n">old</span> <span class="o">=</span> <span class="vi">@changed_attributes</span><span class="o">[</span><span class="kp">attr</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@changed_attributes</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span> <span class="k">unless</span> <span class="n">_field_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">,</span> <span class="n">old</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">old</span> <span class="o">=</span> <span class="n">clone_attribute_value</span><span class="p">(</span><span class="ss">:read_attribute</span><span class="p">,</span> <span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@changed_attributes</span><span class="o">[</span><span class="kp">attr</span><span class="o">]</span> <span class="o">=</span> <span class="n">old</span> <span class="k">if</span> <span class="n">_field_changed?</span><span class="p">(</span><span class="kp">attr</span><span class="p">,</span> <span class="n">old</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Carry on.</span>
</span><span class='line'>  <span class="k">super</span><span class="p">(</span><span class="kp">attr</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们暂时偏离一下主题，并且看一下方法的包装。这是在Rails的代码里边非常常见的模式。当你调用<code>super</code>的时候，Ruby查找当前对象的所有祖先，包括相关的模块。由于一个类可以引进多个模块，所以你可以多层地包装方法。这里是一个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Shouting</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="n">message</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Speaker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Shouting</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="k">super</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Speaker</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span><span class="p">(</span><span class="s2">&quot;Hi!&quot;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;HI!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>请注意<code>Shouting</code>是<code>Speaker</code>所包含的模块，而不是后者所扩展的类。Rails使用这种技巧去包装方法，以此确保在不同的文件里有独立的关注点（Concern）。这也意味着为了了解整个系统，你可能需要从多个文件里边找到相关的代码。假如你看到了一个对<code>super</code>的调用，这是一个可以告诉你在别的地方还有更多代码需要了解的好线索。假如你想学习更多的这方面的知识，James Coglan有一个非常详细的文章讲解了Ruby的<a href="https://blog.jcoglan.com/2013/05/08/how-ruby-method-dispatch-works/">方法分发</a>。</p>

<p>回到<code>write_attribute</code>方法。根据属性（值）是否已经改变，会有两个可能的场景。第一个分支检查你是否正在将一个属性（值）还原到原来的值，如果是这样，它将会从记录了已改变属性的哈希表中删除属性。第二个分支仅仅在新的值与旧的值不同的时候记录下更改。一旦更改被记录下来，实际的用于更新属性的逻辑通过调用<code>super</code>方法完成。</p>

<h3>总结</h3>

<p>Rails为你的model提供了变更的跟踪。这个功能是在ActiveModel中实现的，但是真正的监测更改的逻辑则是在ActiveRecord中实现的。</p>

<p>通过了解这个功能，我们也发掘到了一些有趣的小贴士：</p>

<ul>
<li>ActiveModel定义了<code>attribute_method_suffix</code>方法用于分发类似<code>name_changed?</code>的方法。</li>
<li><code>||=</code>操作符是一个可以用来初始化变量的方便的方法。</li>
<li>在<code>HashWithIndifferentAccess</code>中，字符串类型以及符号类型的键是一样的。</li>
<li><code>Hash</code>可以通过<code>Hash[key_value_pairs]</code>方法初始化。</li>
<li>你可以使用模块拦截方法并为方法加上另一层的功能。</li>
</ul>


<p>假如你有关于你想阅读的关于Rails中其他部分的建议，请让我知道。</p>

<h3>喜欢这篇文章？</h3>

<p><a href="http://Martin91.github.io/blog/2014/03/02/jie-du-rails-xi-lie-fan-yi/">阅读另外8篇</a>“解读Rails”中的文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解读Rails - 处理异常]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/05/jie-du-rails-chu-li-yi-chang/"/>
    <updated>2014-03-05T13:53:09+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/05/jie-du-rails-chu-li-yi-chang</id>
    <content type="html"><![CDATA[<p>此文翻译自<a href="http://monkeyandcrow.com/blog/reading_rails_handling_exceptions/">Reading Rails &ndash; Handling Exceptions</a>，限于本人水平，翻译不当之处，敬请指教！</p>

<p>我们今天开始会读一些Rails的源码。我们有双重的目的，先通过学习（Rails）如何处理异常，再扩展到整个Ruby中基础知识的学习。</p>

<!-- More -->


<p>Rails通过让你使用<code>rescue_from</code>方法，让你在你的<code>controller</code>里边为常见的异常定义处理方法。举例来说吧，你可以在用户试图访问他们尚未付费的功能时将他们重定向到指定的付费页面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span>
</span><span class='line'>  <span class="c1"># Redirect users if they try to use disabled features.</span>
</span><span class='line'>  <span class="n">rescue_from</span> <span class="no">FeatureDisabledError</span><span class="p">,</span> <span class="no">InsufficientAccessError</span> <span class="k">do</span> <span class="o">|</span><span class="n">ex</span><span class="o">|</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:alert</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Your account does not support </span><span class="si">#{</span><span class="n">ex</span><span class="o">.</span><span class="n">feature_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="s2">&quot;/pricing&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们将会探索Rails是如何定义异常处理器，如何将它们与具体的异常进行匹配，以及如何使用它们去rescue失败的action。</p>

<p>如果需要跟着我的步骤走，请使用<a href="https://github.com/adamsanderson/qwandry">qwandry</a>打开每一个相关的代码库，或者直接从<a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github</a>查看源码即可。</p>

<h3>定义处理器(Handlers)</h3>

<p>ActiveSupport包含了一个用于定义异常如何被处理的模块<code>Rescuable</code>。第一个需要了解的方法就是<code>rescue_from</code>。这个方法通过方法名或者代码块为你想rescue的异常注册处理器（<strong>提示</strong>：查看代码，请在命令行中输入<code>qw activesupport</code>）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rescue_from</span><span class="p">(</span><span class="o">*</span><span class="n">klasses</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="n">klasses</span><span class="o">.</span><span class="n">extract_options!</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">unless</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:with</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>      <span class="n">options</span><span class="o">[</span><span class="ss">:with</span><span class="o">]</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，<code>*klasses</code>接收数量不定的异常类，所以你可以进行类似<code>rescue_from(FeatureDisabledError, InsufficientAccessError)</code>这样的调用。它们将会被存放在一个数组里。</p>

<p>接下来，请留意<code>extract_options!</code>的使用。这是一个常见的用于从一个数组生成一个options哈希表的技巧。假如klasses里边的最后一个元素是一个哈希表，那么这个元素会被弹出数组。现在Rails将会使用<code>:with</code>项所指定的方法，或者是使用传递给rescue_from的代码块。Rails中的这种技巧创造了一个灵活的接口。</p>

<p>接着继续往下看这个方法，我们看到每一个异常类都被转换成一个String对象，我们待会便会看到为什么要这么做。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rescue_from</span><span class="p">(</span><span class="o">*</span><span class="n">klasses</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="k">if</span> <span class="n">klass</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">klass</span> <span class="o">&lt;=</span> <span class="no">Exception</span>
</span><span class='line'>      <span class="n">klass</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">klass</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'>      <span class="n">klass</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>  <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里你应该注意的是，Rails是如何判定<code>klass</code>是不是继承自<code>Exception</code>的。通常情况下，你可能会通过使用<code>obj.is_a?(Exception)</code>来判断一个对象是不是某一个具体类型的实例，即使如此，<code>klass</code>并不是<code>Exception</code>，而只是<code>Class</code>。那么我们又怎么找出它使哪一类呢？Ruby在<code>Module</code>上定义了类似<code>&lt;=</code>这样的<a href="http://ruby-doc.org/core-1.9.3/Module.html#method-i-3C">用于比较的操作符</a>。当操作符左边的对象是操作符右边对象的子类的时候，它会返回true。举个例子，<code>ActiveRecord::RecordNotFound &lt; Exception</code>返回true，而<code>ActiveRecord::RecordNotFound &gt; Exception</code>返回false。</p>

<p>在这个方法的末尾，我们看到表示异常类的<code>String</code>对象稍后被储存在二元数组中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rescue_from</span><span class="p">(</span><span class="o">*</span><span class="n">klasses</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">rescue_handlers</span> <span class="o">+=</span> <span class="o">[[</span><span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="o">[</span><span class="ss">:with</span><span class="o">]]]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们已经知道了处理器是如何储存的，但是当Rails需要处理异常的时候，它又是如何查找这些处理器的呢？</p>

<h3>查找处理器（Finding Handlers）</h3>

<p>经过对<code>rescue_handlers</code>的快速搜索发现，这一切使用到了<code>handler_for_rescue</code>。我们可以看到每一个可能的处理器都被一一检查，直到我们找到能够与<code>exception</code>匹配的处理器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">handler_for_rescue</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 我们遵循从右到左的顺序，是因为每当发现一个rescue_from声明的时候，</span>
</span><span class='line'>  <span class="c1"># 相应的klass_name, handler对就会被压入resuce_handlers里。</span>
</span><span class='line'>  <span class="n">_</span><span class="p">,</span> <span class="n">rescuer</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">rescue_handlers</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">detect</span> <span class="k">do</span> <span class="o">|</span><span class="n">klass_name</span><span class="p">,</span> <span class="n">handler</span><span class="o">|</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>    <span class="n">klass</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="n">klass_name</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">klass</span> <span class="o">||=</span> <span class="n">klass_name</span><span class="o">.</span><span class="n">constantize</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">exception</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span> <span class="k">if</span> <span class="n">klass</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>如同注释所言，<code>rescue_handlers</code>被反序读取。假如有两个处理器能够处理同一个异常，那么最后定义的处理器会被优先选中。假如你先定义了一个针对<code>ActiveRecord::NotFoundError</code>异常的处理器，接着又定义了针对<code>Exception</code>异常的处理器，那么前者将永远都不会被调用，因为针对<code>Exception</code>的处理器总是会优先匹配。</p>

<p>现在，在代码块里边，又发生了什么呢？</p>

<p>首先，字符串对象<code>klass_name</code>被当做当前类内部的常量进行查找，在找不到的情况下会继续判断它是不是定义在程序内部其他地方的常量，以此将<code>klass_name</code>转换为实际的类。每一步都通过返回<code>nil</code>进行rescue。这么做的一个原因就是当前处理器可能是针对某个尚未加载的异常的类型。举例来说，一个插件里可能为<code>ActiveRecord::NotFoundError</code>定义了错误处理，但是你可能并没有使用<code>ActiveRecord</code>。在这样的情况下，引用这个异常将会导致异常。每一行最后的<code>rescue nil</code>能够在无法找到类时无声无息地组织异常的抛出。</p>

<p>最后我们检查这个异常（等待匹配的异常）是否是这个处理器所对应异常类的实例。如果是，数组<code>[klass_name, handler]</code>将会被返回。返回到上边看看<code>_, rescuer = ...</code>这一行代码，这一一个数组拆分的例子。因为我们实际上只想要返回数组的第二个元素，也就是处理器，所以<code>_</code>在这里只是一个占位符。</p>

<h3>处理异常（Rescuing Exceptions)</h3>

<p>现在我们知道了程序是如何查找异常处理器的，但是它又是如何被调用的呢？为了回答这最后一个问题，我们可以返回到源代码文件的顶部然后探索一下<code>rescue_with_handler</code>方法。当给它传递一个异常的时候，它将会尝试通过调用合适的处理器来处理这个异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rescue_with_handler</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">handler_for_rescue</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="n">arity</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">handler</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span> <span class="p">:</span> <span class="n">handler</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了了解这个方法是如何在你的controller里边生效的，我们需要查看ActionPack包里边的代码。（<strong>提示</strong>：可以在命令行中键入<code>qw actionpack</code>打开ActionPace的代码）Rails定义了一个叫做<code>ActionController::Rescue</code>的中间件，它被混入到了<code>Rescuable</code>模块里边，并且通过<code>precess_action</code>调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">process_action</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">super</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">exception</span>
</span><span class='line'>  <span class="n">rescue_with_handler</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span> <span class="o">||</span> <span class="k">raise</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails在收到每一个请求时都会调用<code>process_action</code>，假如请求导致一个异常即将被抛出，<code>rescue_with_handler</code>都会试图去处理这个异常。</p>

<h3>在Rails之外使用Rescuable（Using Rescuable Outside of Rails）</h3>

<p><code>Rescuable</code>能够被混入到其它代码之中。假如你想集中化你的异常处理部分的逻辑，那么你可以考虑一下使用<code>Rescuable</code>。举个例子，假如你有很多发向远程服务的请求，并且你不想在每一个方法里边重复异常处理的逻辑：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RemoteService</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Rescuable</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rescue_from</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTPNotFound</span><span class="p">,</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTPNotAcceptable</span> <span class="k">do</span> <span class="o">|</span><span class="n">ex</span><span class="o">|</span>
</span><span class='line'>    <span class="n">disable_service!</span>
</span><span class='line'>    <span class="n">log_http_failure</span><span class="p">(</span><span class="vi">@endpoint</span><span class="p">,</span> <span class="n">ex</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rescue_from</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTPNetworkAuthenticationRequired</span> <span class="k">do</span> <span class="o">|</span><span class="n">ex</span><span class="o">|</span>
</span><span class='line'>    <span class="n">authorize!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_status</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">exception</span>
</span><span class='line'>    <span class="n">rescue_with_handler</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span> <span class="o">||</span> <span class="k">raise</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update_status</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">exception</span>
</span><span class='line'>    <span class="n">rescue_with_handler</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span> <span class="o">||</span> <span class="k">raise</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用一点元编程的技巧，你甚至可以通过类似的模式对已有的方法进行封装以避免rescue代码块。</p>

<h3>总结（Recap）</h3>

<p>ActiveSupport的<code>Rescuable</code>模块允许我们定义异常处理方法。ActionController的<code>Rescue</code>中间件捕捉异常，并试图处理这些异常。
我们也同时了解到：</p>

<ul>
<li>一个签名类似<code>rescue_from(*klasses)</code>的方法可以接收数量不定的参数。</li>
<li><code>Array#extract_options!</code>方法是一个用于从arguments数组得到options的技巧。</li>
<li>你可以通过类似<code>klass &lt;= Exception</code>这样的代码判读一个类是否某个类的子类。</li>
<li><code>rescue nil</code>将会静默地消除异常。</li>
</ul>


<p>就算是再小的代码片段都包含了非常多有用的信息，请让我知道你下一步想要了解什么东西，我们还会看到能够从Rails里边挖掘到的新奇玩意。</p>

<h3>喜欢这篇文章？</h3>

<p><a href="http://Martin91.github.io/blog/2014/03/02/jie-du-rails-xi-lie-fan-yi/">阅读另外8篇</a>“解读Rails”中的文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解读Rails - 适配器模式]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/03/jie-du-rails-gua-pei-qi-mo-shi/"/>
    <updated>2014-03-03T13:40:03+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/03/jie-du-rails-gua-pei-qi-mo-shi</id>
    <content type="html"><![CDATA[<p>本文翻译自<a href="http://monkeyandcrow.com/blog/reading_rails_the_adapter_pattern/?utm_source=rubyweekly&amp;utm_medium=email">Reading Rails &ndash; The Adapter Pattern</a>，限于本人水平有限，翻译不当之处，敬请指教！</p>

<p>今天我们暂时先放下具体的代码片段，我们将要对Rails中所实现的一个比较常见的设计模式进行一番探索，这个模式就是<a href="http://en.wikipedia.org/wiki/Adapter_pattern">适配器模式（Adapter Pattern）</a>。从一定的意义上来说，这次的探索并不全面，但是我希望能够突出一些实际的例子。</p>

<!-- MORE -->


<p>为了跟随本文的步骤，请使用<a href="https://github.com/adamsanderson/qwandry">qwandry</a>打开相关的代码库，或者直接在<a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">Github</a>上查看这些代码。</p>

<h3>适配器模式</h3>

<p><a href="http://en.wikipedia.org/wiki/Adapter_pattern">适配器模式</a>可以用于对不同的接口进行包装以及提供统一的接口，或者是让某一个对象看起来像是另一个类型的对象。在静态类型的编程语言里，我们经常使用它去满足类型系统的特点，但是在类似Ruby这样的弱类型编程语言里，我们并不需要这么做。尽管如此，它对于我们来说还是有很多意义的。</p>

<p>当使用第三方类或者库的时候，我们经常从这个例子开始（start out fine）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_nearest_restaurant</span><span class="p">(</span><span class="n">locator</span><span class="p">)</span>
</span><span class='line'>  <span class="n">locator</span><span class="o">.</span><span class="n">nearest</span><span class="p">(</span><span class="ss">:restaurant</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">lat</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">lon</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们假设有一个针对<code>locator</code>的接口，但是如果我们想要<code>find_nearest_restaurant</code>能够支持另一个库呢？这个时候我们可能就会去尝试添加新的特殊的场景的处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_nearest_restaurant</span><span class="p">(</span><span class="n">locator</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">locator</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">GeoFish</span>
</span><span class='line'>    <span class="n">locator</span><span class="o">.</span><span class="n">nearest</span><span class="p">(</span><span class="ss">:restaurant</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">lat</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">lon</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">locator</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">ActsAsFound</span>
</span><span class='line'>    <span class="n">locator</span><span class="o">.</span><span class="n">find_food</span><span class="p">(</span><span class="ss">:lat</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">lat</span><span class="p">,</span> <span class="ss">:lon</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">lon</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">NotImplementedError</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">locator</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> is not supported.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个比较务实的解决方案。或许我们也不再需要考虑去支持另一个库了。也或许<code>find_nearest_restaurant</code>就是我们使用<code>locator</code>的唯一场景。</p>

<p>那假如你真的需要去支持一个新的<code>locator</code>，那又会是怎么样的呢？那就是你有三个特定的场景。再假如你需要实现<code>find_nearest_hospital</code>方法呢？这样你就需要在维护这三种特定的场景时去兼顾两个不同的地方。当你觉得这种解决方案不再可行的时候，你就需要考虑适配器模式了。</p>

<p>在这个例子中，我们可以为<code>GeoFish</code>以及<code>ActsAsFound</code>编写适配器，这样的话，在我们的其他代码中，我们就不需要了解我们当前正在使用的是哪个库了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_nearest_hospital</span><span class="p">(</span><span class="n">locator</span><span class="p">)</span>
</span><span class='line'>  <span class="n">locator</span><span class="o">.</span><span class="n">find</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:hospital</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:lat</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">lat</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:lon</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">lon</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">locator</span> <span class="o">=</span> <span class="no">GeoFishAdapter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">geo_fish_locator</span><span class="p">)</span>
</span><span class='line'><span class="n">find_nearest_hospital</span><span class="p">(</span><span class="n">locator</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>特意假设的例子就到此为止，接下来让我们看看真实的代码。</p>

<h3>MultiJSON</h3>

<p><code>ActiveSupport</code>在做JSON格式的解码时，用到的是<code>MultiJSON</code>，这是一个针对JSON库的适配器。每一个库都能够解析JSON，但是做法却不尽相同。让我们分别看看针对<a href="https://github.com/ohler55/oj">oj</a>和<a href="https://github.com/brianmario/yajl-ruby">yajl</a>的适配器。
(<strong>提示</strong>: 可在命令行中输入<code>qw multi_json</code>查看源码。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MultiJson</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Adapters</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Oj</span> <span class="o">&lt;</span> <span class="no">Adapter</span>
</span><span class='line'>      <span class="c1">#...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>        <span class="n">options</span><span class="o">[</span><span class="ss">:symbol_keys</span><span class="o">]</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:symbolize_keys</span><span class="p">)</span>
</span><span class='line'>        <span class="o">::</span><span class="no">Oj</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oj的适配器修改了<code>options</code>哈希表，使用<code>Hash#delete</code>将<code>:symbolize_keys</code>项转换为Oj的<code>:symbol_keys</code>项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:symbolize_keys</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:symbol_keys</span><span class="o">]</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:symbolize_keys</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">options</span>                                                 <span class="c1"># =&gt; {:symbol_keys=&gt;true}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来MultiJSON调用了<code>::Oj.load(string, options)</code>。MultiJSON适配后的API跟Oj原有的API非常相似，在此不必赘述。不过你是否注意到，Oj是如何引用的呢？<code>::Oj</code>引用了顶层的<code>Oj</code>类，而不是<code>MultiJson::Adapters::Oj</code>。</p>

<p>现在让我们看看MultiJSON又是如何适配Yajl库的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MultiJson</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Adapters</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Yajl</span> <span class="o">&lt;</span> <span class="no">Adapter</span>
</span><span class='line'>      <span class="c1">#...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>        <span class="o">::</span><span class="ss">Yajl</span><span class="p">:</span><span class="ss">:Parser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:symbolize_keys</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:symbolize_keys</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个适配器从不同的方式实现了<code>load</code>方法。Yajl的方式是先创建一个解析器的实力，然后将传入的字符串<code>string</code>作为参数调用<code>Yajl::Parser#parse</code>方法。在<code>options</code>哈希表上的处理也略有不同。只有<code>:symbolize_keys</code>项被传递给了Yajl。</p>

<p>这些JSON的适配器看似微不足道，但是他们却可以让你随心所欲地在不同的库之间进行切换，而不需要在每一个解析JSON的地方更新代码。</p>

<h3>ActiveRecord</h3>

<p>很多JSON库往往都遵从相似的模式，这让适配工作变得相当轻松。但是如果你是在处理一些更加复杂的情况时，结果会是怎样？ActiveRecord包含了针对不同数据库的适配器。尽管PostgreSQL和MySQL都是SQL数据库，但是他们之间还是有很多不同之处，而ActiveRecord通过使用适配器模式屏蔽了这些不同。(<strong>提示</strong>: 命令行中输入<code>qw activerecord</code>查看ActiveRecord的代码)</p>

<p>打开ActiveRecord代码库中的<code>lib/connection_adapters</code>目录，里边会有针对PostgreSQL,MySQL以及SQLite的适配器。除此之外，还有一个名为<code>AbstractAdapter</code>的适配器，它作为每一个具体的适配器的基类。<code>AbstractAdapter</code>实现了在大部分数据库中常见的功能，这些功能在其子类比如<code>PostgreSQLAdapter</code>以及<code>AbstractMysqlAdapter</code>中被重新定制，而其中<code>AbstractMysqlAdapter</code>则是另外两个不同的MySQL适配器——MysqlAdapter以及Mysql2Adapter——的父类。让我们通过一些真实世界中的例子来看看他们是如何一起工作的。</p>

<p>PostgreSQL和MySQL在SQL方言的实现稍有不同。查询语句<code>SELECT * FROM users</code>在这两个数据库都可以正常执行，但是它们在一些类型的处理上会稍显不同。在MySQL和PostgreSQL中，时间格式就不尽相同。其中，PostgreSQL支持微秒级别的时间，而MySQL只是到了最近的一个稳定发布的版本中才支持。那这两个适配器又是如何处理这种差异的呢？</p>

<p>ActiveRecord通过被混入到<code>AbstractAdapter</code>的<code>ActiveRecord::ConnectionAdapters::Quoting</code>中的<code>quoted_date</code>引用日期。而<code>AbstractAdapter</code>中的实现仅仅只是格式化了日期：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">quoted_date</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:db</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails中的ActiveSupport扩展了<code>Time#to_s</code>，使其能够接收一个代表格式名的符号类型参数。<code>:db</code>所代表的格式就是<code>%Y-%m-%d %H:%M:%S</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Examples of common formats:</span>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:db</span><span class="p">)</span>      <span class="c1">#=&gt; &quot;2014-02-19 06:08:13&quot;</span>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:short</span><span class="p">)</span>   <span class="c1">#=&gt; &quot;19 Feb 06:08&quot;</span>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:rfc822</span><span class="p">)</span>  <span class="c1">#=&gt; &quot;Wed, 19 Feb 2014 06:08:13 +0000&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>MySQL的适配器都没有重写<code>quoted_date</code>方法，它们自然会继承这种行为。另一边，<code>PostgreSQLAdapter</code>则对日期的处理做了两个修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">quoted_date</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">acts_like?</span><span class="p">(</span><span class="ss">:time</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:usec</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%06d&quot;</span><span class="p">,</span> <span class="n">value</span><span class="o">.</span><span class="n">usec</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">year</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/^-/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; BC&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它在一开始便调用<code>super</code>方法，所以它也会得到一个类似MySQL中格式化后的日期。接下来，它检测<code>value</code>是否像是一个具体时间。这是一个ActiveSupport中扩展的方法，当一个对象类似<code>Time</code>类型的实例时，它会返回<code>true</code>。这让它更容易表明各种对象已被假设为类似<code>Time</code>的对象。（<strong>提示</strong>: 对<code>acts_like?</code>方法感兴趣？请在命令行中执行<code>qw activesupport</code>，然后阅读<code>core_ext/object/acts_like.rb</code>）</p>

<p>第二部分的条件检查<code>value</code>是否有用于返回毫秒的<code>usec</code>方法。如果可以求得毫秒数，那么它将通过<code>sprintf</code>方法被追加到<code>result</code>字符串的末尾。跟很多时间格式一样，<code>sprintf</code>也有很多不同的方式用于格式化数字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%06d&quot;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span> <span class="c1">#=&gt; &quot;000032&quot;</span>
</span><span class='line'><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%6d&quot;</span><span class="p">,</span>  <span class="mi">32</span><span class="p">)</span> <span class="c1">#=&gt; &quot;    32&quot;</span>
</span><span class='line'><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%d&quot;</span><span class="p">,</span>   <span class="mi">32</span><span class="p">)</span> <span class="c1">#=&gt; &quot;32&quot;</span>
</span><span class='line'><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%.2f&quot;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span> <span class="c1">#=&gt; &quot;32.00&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，假如日期是一个负数，<code>PostgreSQLAdapter</code>就会通过加上&#8221;BC&#8221;去重新格式化日期，这是PostgreSQL数据库的实际要求：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SELECT</span> <span class="s1">&#39;2000-01-20&#39;</span><span class="o">::</span><span class="n">timestamp</span><span class="p">;</span>
</span><span class='line'><span class="o">--</span> <span class="mi">2000</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">20</span> <span class="mo">00</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span>
</span><span class='line'><span class="no">SELECT</span> <span class="s1">&#39;2000-01-20 BC&#39;</span><span class="o">::</span><span class="n">timestamp</span><span class="p">;</span>
</span><span class='line'><span class="o">--</span> <span class="mi">2000</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">20</span> <span class="mo">00</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="no">BC</span>
</span><span class='line'><span class="no">SELECT</span> <span class="s1">&#39;-2000-01-20&#39;</span><span class="o">::</span><span class="n">timestamp</span><span class="p">;</span>
</span><span class='line'><span class="o">--</span> <span class="ss">ERROR</span><span class="p">:</span>  <span class="n">time</span> <span class="n">zone</span> <span class="n">displacement</span> <span class="n">out</span> <span class="n">of</span> <span class="ss">range</span><span class="p">:</span> <span class="s2">&quot;-2000-01-20&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这只是ActiveRecord适配多个API时的一个极小的方式，但它却能帮助你免除由于不同数据库的细节所带来的差异和烦恼。</p>

<p>另一个体现SQL数据库的不同点是数据库表被创建的方式。MySQL以及PostgreSQL中对主键的处理各不相同：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># AbstractMysqlAdapter</span>
</span><span class='line'><span class="no">NATIVE_DATABASE_TYPES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:primary_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;int(11) DEFAULT NULL auto_increment PRIMARY KEY&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PostgreSQLAdapter</span>
</span><span class='line'><span class="no">NATIVE_DATABASE_TYPES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">primary_key</span><span class="p">:</span> <span class="s2">&quot;serial primary key&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两种适配器都能够明白ActiveRecord中的主键的表示方式，但是它们会在创建新表的时候将此翻译为不同的SQL语句。当你下次在编写一个migration或者执行一个查询的时候，思考一下ActiveRecord的适配器以及它们为你做的所有微小的事情。</p>

<h3>DateTime和Time</h3>

<p>当MultiJson以及ActiveRecord实现了传统的适配器的时候，Ruby的灵活性使得另一种解决方案成为可能。<code>DateTime</code>以及<code>Time</code>都用于表示时间，但是它们在内部的处理上是不同的。虽然有着这些细微的差异，但是它们所暴露出来的API却是极其类似的（<strong>提示</strong>：命令行中执行<code>qw activesupport</code>查看此处相关代码）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">day</span>     <span class="c1">#=&gt; 19         (Day of month)</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">wday</span>    <span class="c1">#=&gt; 3          (Day of week)</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">usec</span>    <span class="c1">#=&gt; 371552     (Microseconds)</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">to_i</span>    <span class="c1">#=&gt; 1392871392 (Epoch secconds)</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">day</span>     <span class="c1">#=&gt; 19         (Day of month)</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">wday</span>    <span class="c1">#=&gt; 3          (Day of week)</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">usec</span>    <span class="c1">#=&gt; NoMethodError: undefined method `usec&#39;</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">to_i</span>    <span class="c1">#=&gt; NoMethodError: undefined method `to_i&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActiveSupport通过添加缺失的方法来直接修改<code>DateTime</code>和<code>Time</code>，进而抹平了两者之间的差异。从实例上看，这里就有一个例子演示了ActiveSupport如何定义<code>DateTime#to_i</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DateTime</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_i</span>
</span><span class='line'>    <span class="n">seconds_since_unix_epoch</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">seconds_since_unix_epoch</span>
</span><span class='line'>    <span class="p">(</span><span class="n">jd</span> <span class="o">-</span> <span class="mi">2440588</span><span class="p">)</span> <span class="o">*</span> <span class="mi">86400</span> <span class="o">-</span> <span class="n">offset_in_seconds</span> <span class="o">+</span> <span class="n">seconds_since_midnight</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">offset_in_seconds</span>
</span><span class='line'>    <span class="p">(</span><span class="n">offset</span> <span class="o">*</span> <span class="mi">86400</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">seconds_since_midnight</span>
</span><span class='line'>    <span class="n">sec</span> <span class="o">+</span> <span class="p">(</span><span class="n">min</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">hour</span> <span class="o">*</span> <span class="mi">3600</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个用于支持的方法，<code>seconds_since_unix_epoch</code>，<code>offset_in_seconds</code>，以及<code>seconds_since_midnight</code>都使用或者扩展了<code>DateTime</code>中已经存在的API去定义与<code>Time</code>中匹配的方法。</p>

<p>假如说我们前面所看到的适配器是相对于被适配对象的外部适配器，那么我们现在所看到的这个就可以被称之为内部适配器。与外部适配器不同的是，这种方法受限于已有的API，并且可能导致一些麻烦的矛盾问题。举例来说，<code>DateTime</code>和<code>Time</code>在一些特殊的场景下就有可能出现不一样的行为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">datetime</span> <span class="o">==</span> <span class="n">time</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">datetime</span> <span class="o">+</span> <span class="mi">1</span>     <span class="c1">#=&gt; 2014-02-26 07:32:39</span>
</span><span class='line'><span class="n">time</span> <span class="o">+</span> <span class="mi">1</span>         <span class="c1">#=&gt; 2014-02-25 07:32:40</span>
</span></code></pre></td></tr></table></div></figure>


<p>当加上1的时候，<code>DateTime</code>加上了一天，而<code>Time</code>则是加上了一秒。当你需要使用它们的时候，你要记住ActiveSupport基于这些不同，提供了诸如<code>change</code>和<code>Duration</code>等保证一致行为的方法或类。</p>

<p>这是一个好的模式吗？它理所当然是方便的，但是如你刚才所见，你仍旧需要注意其中的一些不同之处。</p>

<h3>总结</h3>

<p>设计模式不是只有Java才需要的。Rails通过使用设计模式以提供用于JSON解析以及数据库维护的统一接口。由于Ruby的灵活性，类似<code>DateTime</code>以及<code>Time</code>这样的类可以被直接地修改而提供相似的接口。Rails的源码就是一个可以让你挖掘真实世界中不同设计模式实例的天堂。</p>

<p>在这次的实践中，我们同时也发掘了一些有趣的代码：</p>

<ul>
<li><code>hash[:foo] = hash.delete(:bar)</code>是一个用于重命名哈希表中某一项的巧妙方法。</li>
<li>调用<code>::ClassName</code>会调用顶层的类。</li>
<li>ActiveSupport为<code>Time</code>、<code>Date</code>以及其他的类添加了一个可选的代表格式的参数<code>format</code>。</li>
<li><code>sprintf</code>可以用于格式化数字。</li>
</ul>


<p>想要探索更多的知识？回去看看MultiJson是如何处理以及解析格式的。仔细阅读你在你的数据库中所使用到的ActiveRecord的适配器的代码。浏览ActiveSupport中用于xml适配器的<code>XmlMini</code>，它跟MultiJson中的JSON适配器是类似的。在这些里面还会有很多可以学习的。</p>

<p>喜欢这篇文章？<br>
<a href="http://Martin91.github.io/blog/2014/03/02/jie-du-rails-xi-lie-fan-yi/">阅读另外8篇</a>“解读Rails”中的文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解读Rails(系列翻译)]]></title>
    <link href="http://Martin91.github.io/blog/articles/2014/03/02/jie-du-rails-xi-lie-fan-yi/"/>
    <updated>2014-03-02T13:40:07+08:00</updated>
    <id>http://Martin91.github.io/blog/articles/2014/03/02/jie-du-rails-xi-lie-fan-yi</id>
    <content type="html"><![CDATA[<p>解读Rails系列文章原文来自<a href="http://monkeyandcrow.com/series/reading_rails/">Reading Rails</a>，我将尽我所能完成此系列所有文章的翻译。以下部分为原文系列对应翻译：</p>

<p>在我们的工作中，我们的大部分时间都是在使用各种各样的工具，但是你知不知道它们是如何工作的呢？</p>

<p>在这个系列里，我们通过阅读<a href="http://rubyonrails.org/">Ruby on Rails</a>的源码去探索其内部的工作机制。我们将不仅仅只是学到与Rails有关的知识，我们也将见识到Ruby里边一些有趣的功能，以及一些有用的新技巧。</p>

<ul>
<li><a href="http://Martin91.github.io/blog/2014/03/03/jie-du-rails-gua-pei-qi-mo-shi/">解读Rails &ndash; 适配器模式</a></li>
<li><a href="">解读Rails &ndash; 错误和验证器</a></li>
<li><a href="">解读Rails &ndash; 验证机制是如何配置的</a></li>
<li><a href="">解读Rails &ndash; Concern</a></li>
<li><a href="">解读Rails &ndash; 更多的Migrations</a></li>
<li><a href="">解读Rails &ndash; Migrations</a></li>
<li><a href="http://Martin91.github.io/blog/2014/03/12/shu-xing-fang-fa/">解读Rails &ndash; 属性方法(Attribute Methods)</a></li>
<li><a href="http://Martin91.github.io/blog/2014/03/07/zhui-zong-bian-geng/">解读Rails &ndash; 跟踪model中属性（值）的变更</a></li>
<li><a href="http://Martin91.github.io/blog/2014/03/05/jie-du-rails-chu-li-yi-chang/">解读Rails &ndash; 处理异常</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
